
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00000c54  00000ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  008000d0  008000d0  00000d58  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ed  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf3  00000000  00000000  00000fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000566  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b6  00000000  00000000  0000221e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000275  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000478  00000000  00000000  00002ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003351  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	b5 c2       	rjmp	.+1386   	; 0x582 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e5       	ldi	r30, 0x54	; 84
  3a:	fc e0       	ldi	r31, 0x0C	; 12
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 3d       	cpi	r26, 0xD0	; 208
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 ed       	ldi	r26, 0xD0	; 208
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 30       	cpi	r26, 0x04	; 4
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	8c d0       	rcall	.+280    	; 0x172 <main>
  5a:	fa c5       	rjmp	.+3060   	; 0xc50 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <gpioInit>:
	}
}

void gpioInit(void){
	//set ouput pin
	DDRB = (1<<LED)|(1<<RF_OUT);
  5e:	85 e0       	ldi	r24, 0x05	; 5
  60:	87 bb       	out	0x17, r24	; 23
	DDRD = (1<<LIGHT1)|(1<<LIGHT2)|(1<<LIGHT3)|(1<<LIGHT4)|(1<<LIGHT5)|(1<<LIGHT6);
  62:	8c ef       	ldi	r24, 0xFC	; 252
  64:	81 bb       	out	0x11, r24	; 17
	PORTD = (1<<LIGHT2)|(1<<LIGHT3)|(1<<LIGHT4)|(1<<LIGHT5)|(1<<LIGHT6);
  66:	88 ef       	ldi	r24, 0xF8	; 248
  68:	82 bb       	out	0x12, r24	; 18
	//indication LED on
	I_LED(0);
  6a:	c2 98       	cbi	0x18, 2	; 24
	//initial input pin to High
	PORTC = (1<<SW1)|(1<<SW2)|(1<<SW3)|(1<<SW4)|(1<<SW5)|(1<<SW6); // Light
  6c:	8f e3       	ldi	r24, 0x3F	; 63
  6e:	85 bb       	out	0x15, r24	; 21
	PORTB = (1<<LED); //User button
  70:	84 e0       	ldi	r24, 0x04	; 4
  72:	88 bb       	out	0x18, r24	; 24
	PORTD |= (1<<0); // get code button
  74:	90 9a       	sbi	0x12, 0	; 18
}
  76:	08 95       	ret

00000078 <getCode>:
void getCode(void){
  78:	df 92       	push	r13
  7a:	ef 92       	push	r14
  7c:	ff 92       	push	r15
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17
	// Khai bao cac mang chua du lieu can truyen di
	char str[COMMAND + 1];
	uint8_t datalen;	

	// Nhan code tu bo nho EPPROM
	code [0] = eeprom_read_byte (Mcode);
  82:	00 91 a9 00 	lds	r16, 0x00A9
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c8 01       	movw	r24, r16
  8a:	03 d5       	rcall	.+2566   	; 0xa92 <__eerd_byte_m8>
  8c:	f8 2e       	mov	r15, r24
  8e:	80 93 d0 00 	sts	0x00D0, r24
	code [1] = eeprom_read_byte (Mcode + 1); 
  92:	c8 01       	movw	r24, r16
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	fd d4       	rcall	.+2554   	; 0xa92 <__eerd_byte_m8>
  98:	d8 2e       	mov	r13, r24
  9a:	80 93 d1 00 	sts	0x00D1, r24
	code [2] = eeprom_read_byte (Mcode + 2);
  9e:	c8 01       	movw	r24, r16
  a0:	02 96       	adiw	r24, 0x02	; 2
  a2:	f7 d4       	rcall	.+2542   	; 0xa92 <__eerd_byte_m8>
  a4:	e8 2e       	mov	r14, r24
  a6:	80 93 d2 00 	sts	0x00D2, r24
	code [3] = eeprom_read_byte (Mcode + 3);
  aa:	c8 01       	movw	r24, r16
  ac:	03 96       	adiw	r24, 0x03	; 3
  ae:	f1 d4       	rcall	.+2530   	; 0xa92 <__eerd_byte_m8>
  b0:	80 93 d3 00 	sts	0x00D3, r24
	code [4] = eeprom_read_byte (Mcode + 4);
  b4:	c8 01       	movw	r24, r16
  b6:	04 96       	adiw	r24, 0x04	; 4
  b8:	ec d4       	rcall	.+2520   	; 0xa92 <__eerd_byte_m8>
  ba:	80 93 d4 00 	sts	0x00D4, r24
	code [5] = eeprom_read_byte (Mcode + 5);
  be:	c8 01       	movw	r24, r16
  c0:	05 96       	adiw	r24, 0x05	; 5
  c2:	e7 d4       	rcall	.+2510   	; 0xa92 <__eerd_byte_m8>
  c4:	80 93 d5 00 	sts	0x00D5, r24
	code [6] = 0;
  c8:	10 92 d6 00 	sts	0x00D6, r1

	if ((code [0] == 0xFF)&&(code [1] == 0xFF)&&(code [2] == 0xFF))
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	f8 16       	cp	r15, r24
  d0:	d1 f4       	brne	.+52     	; 0x106 <getCode+0x8e>
  d2:	d8 16       	cp	r13, r24
  d4:	c1 f4       	brne	.+48     	; 0x106 <getCode+0x8e>
  d6:	e8 16       	cp	r14, r24
  d8:	b1 f4       	brne	.+44     	; 0x106 <getCode+0x8e>
	{
	//	set_default();
		code [0] = 'a';
  da:	81 e6       	ldi	r24, 0x61	; 97
  dc:	80 93 d0 00 	sts	0x00D0, r24
		code [1] = 'b'; 
  e0:	82 e6       	ldi	r24, 0x62	; 98
  e2:	80 93 d1 00 	sts	0x00D1, r24
		code [2] = 'c';
  e6:	83 e6       	ldi	r24, 0x63	; 99
  e8:	80 93 d2 00 	sts	0x00D2, r24
		code [3] = 'd';
  ec:	84 e6       	ldi	r24, 0x64	; 100
  ee:	80 93 d3 00 	sts	0x00D3, r24
		code [4] = 'e'; 
  f2:	85 e6       	ldi	r24, 0x65	; 101
  f4:	80 93 d4 00 	sts	0x00D4, r24
		code [5] = 'f';
  f8:	86 e6       	ldi	r24, 0x66	; 102
  fa:	80 93 d5 00 	sts	0x00D5, r24
		printf("code = default = abcdef\n");
  fe:	80 e6       	ldi	r24, 0x60	; 96
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	c4 d2       	rcall	.+1416   	; 0x68c <puts>
 104:	30 c0       	rjmp	.+96     	; 0x166 <getCode+0xee>
	}
	else
	{
		printf("code = %c%c%c%c%c%c\n", code[0], code[1], code[2], code[3], code[4], code[5]);
 106:	ad b7       	in	r26, 0x3d	; 61
 108:	be b7       	in	r27, 0x3e	; 62
 10a:	1e 97       	sbiw	r26, 0x0e	; 14
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	be bf       	out	0x3e, r27	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	ad bf       	out	0x3d, r26	; 61
 116:	ed b7       	in	r30, 0x3d	; 61
 118:	fe b7       	in	r31, 0x3e	; 62
 11a:	31 96       	adiw	r30, 0x01	; 1
 11c:	88 e7       	ldi	r24, 0x78	; 120
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	12 96       	adiw	r26, 0x02	; 2
 122:	9c 93       	st	X, r25
 124:	8e 93       	st	-X, r24
 126:	11 97       	sbiw	r26, 0x01	; 1
 128:	f2 82       	std	Z+2, r15	; 0x02
 12a:	13 82       	std	Z+3, r1	; 0x03
 12c:	80 91 d1 00 	lds	r24, 0x00D1
 130:	84 83       	std	Z+4, r24	; 0x04
 132:	15 82       	std	Z+5, r1	; 0x05
 134:	80 91 d2 00 	lds	r24, 0x00D2
 138:	86 83       	std	Z+6, r24	; 0x06
 13a:	17 82       	std	Z+7, r1	; 0x07
 13c:	80 91 d3 00 	lds	r24, 0x00D3
 140:	80 87       	std	Z+8, r24	; 0x08
 142:	11 86       	std	Z+9, r1	; 0x09
 144:	80 91 d4 00 	lds	r24, 0x00D4
 148:	82 87       	std	Z+10, r24	; 0x0a
 14a:	13 86       	std	Z+11, r1	; 0x0b
 14c:	80 91 d5 00 	lds	r24, 0x00D5
 150:	84 87       	std	Z+12, r24	; 0x0c
 152:	15 86       	std	Z+13, r1	; 0x0d
 154:	83 d2       	rcall	.+1286   	; 0x65c <printf>
 156:	8d b7       	in	r24, 0x3d	; 61
 158:	9e b7       	in	r25, 0x3e	; 62
 15a:	0e 96       	adiw	r24, 0x0e	; 14
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	9e bf       	out	0x3e, r25	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	8d bf       	out	0x3d, r24	; 61
	}
}
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	df 90       	pop	r13
 170:	08 95       	ret

00000172 <main>:
int main(void)
{
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
	// Khoi tao PORT IN/OUT
	gpioInit();
 17e:	6f df       	rcall	.-290    	; 0x5e <gpioInit>
	// Khoi tao uart
	uartInit();
 180:	73 d1       	rcall	.+742    	; 0x468 <uartInit>
	I_LED(ON);
 182:	c2 98       	cbi	0x18, 2	; 24
	printf("Start\n");
 184:	8d e8       	ldi	r24, 0x8D	; 141
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	81 d2       	rcall	.+1282   	; 0x68c <puts>
	I_LED(OFF);
 18a:	c2 9a       	sbi	0x18, 2	; 24
	getCode();
 18c:	75 df       	rcall	.-278    	; 0x78 <getCode>
		//printf("\n%d",PIND);
		
		if ((sensor_in &&(sensorin == 0)) || ((sensor_in == 0) &&(sensorin)))
		{
			I_LED(ON);
			printf("\nsensor %d",sensorin);
 18e:	03 e9       	ldi	r16, 0x93	; 147
 190:	10 e0       	ldi	r17, 0x00	; 0
			sensorin = sensor_in;
			if(sensorin)
				code[6] = '0';
			else
			{
				code[6] = '9';
 192:	99 e3       	ldi	r25, 0x39	; 57
 194:	e9 2e       	mov	r14, r25
		{
			I_LED(ON);
			printf("\nsensor %d",sensorin);
			sensorin = sensor_in;
			if(sensorin)
				code[6] = '0';
 196:	80 e3       	ldi	r24, 0x30	; 48
 198:	f8 2e       	mov	r15, r24
			M_Sent_Frame(code,7);
			I_LED(OFF);
		}
		if ((sw_1 &&(sw1 == 0)) || ((sw_1 == 0) &&(sw1)))
		{
			printf("\nL1 %d",sw1);
 19a:	ce e9       	ldi	r28, 0x9E	; 158
 19c:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		// Nhan duoc du lieu
		//printf("\n%d",PIND);
		
		if ((sensor_in &&(sensorin == 0)) || ((sensor_in == 0) &&(sensorin)))
 19e:	99 9b       	sbis	0x13, 1	; 19
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <main+0x38>
 1a2:	80 91 b0 00 	lds	r24, 0x00B0
 1a6:	88 23       	and	r24, r24
 1a8:	31 f0       	breq	.+12     	; 0x1b6 <main+0x44>
 1aa:	99 99       	sbic	0x13, 1	; 19
 1ac:	29 c0       	rjmp	.+82     	; 0x200 <main+0x8e>
 1ae:	80 91 b0 00 	lds	r24, 0x00B0
 1b2:	88 23       	and	r24, r24
 1b4:	29 f1       	breq	.+74     	; 0x200 <main+0x8e>
		{
			I_LED(ON);
 1b6:	c2 98       	cbi	0x18, 2	; 24
			printf("\nsensor %d",sensorin);
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <main+0x48>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <main+0x4a>
 1bc:	ed b7       	in	r30, 0x3d	; 61
 1be:	fe b7       	in	r31, 0x3e	; 62
 1c0:	31 96       	adiw	r30, 0x01	; 1
 1c2:	ad b7       	in	r26, 0x3d	; 61
 1c4:	be b7       	in	r27, 0x3e	; 62
 1c6:	12 96       	adiw	r26, 0x02	; 2
 1c8:	1c 93       	st	X, r17
 1ca:	0e 93       	st	-X, r16
 1cc:	11 97       	sbiw	r26, 0x01	; 1
 1ce:	80 91 b0 00 	lds	r24, 0x00B0
 1d2:	82 83       	std	Z+2, r24	; 0x02
 1d4:	13 82       	std	Z+3, r1	; 0x03
 1d6:	42 d2       	rcall	.+1156   	; 0x65c <printf>
			sensorin = sensor_in;
 1d8:	83 b3       	in	r24, 0x13	; 19
 1da:	82 70       	andi	r24, 0x02	; 2
 1dc:	80 93 b0 00 	sts	0x00B0, r24
			if(sensorin)
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	88 23       	and	r24, r24
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <main+0x80>
				code[6] = '0';
 1ec:	f0 92 d6 00 	sts	0x00D6, r15
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <main+0x84>
			else
			{
				code[6] = '9';
 1f2:	e0 92 d6 00 	sts	0x00D6, r14
			}
			M_Sent_Frame(code,7);
 1f6:	80 ed       	ldi	r24, 0xD0	; 208
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	67 e0       	ldi	r22, 0x07	; 7
 1fc:	0b d1       	rcall	.+534    	; 0x414 <M_Sent_Frame>
			I_LED(OFF);
 1fe:	c2 9a       	sbi	0x18, 2	; 24
		}
		if ((sw_1 &&(sw1 == 0)) || ((sw_1 == 0) &&(sw1)))
 200:	98 9b       	sbis	0x13, 0	; 19
 202:	04 c0       	rjmp	.+8      	; 0x20c <main+0x9a>
 204:	80 91 aa 00 	lds	r24, 0x00AA
 208:	88 23       	and	r24, r24
 20a:	31 f0       	breq	.+12     	; 0x218 <main+0xa6>
 20c:	98 99       	sbic	0x13, 0	; 19
 20e:	c7 cf       	rjmp	.-114    	; 0x19e <main+0x2c>
 210:	80 91 aa 00 	lds	r24, 0x00AA
 214:	88 23       	and	r24, r24
 216:	19 f2       	breq	.-122    	; 0x19e <main+0x2c>
		{
			printf("\nL1 %d",sw1);
 218:	00 d0       	rcall	.+0      	; 0x21a <main+0xa8>
 21a:	00 d0       	rcall	.+0      	; 0x21c <main+0xaa>
 21c:	ed b7       	in	r30, 0x3d	; 61
 21e:	fe b7       	in	r31, 0x3e	; 62
 220:	31 96       	adiw	r30, 0x01	; 1
 222:	ad b7       	in	r26, 0x3d	; 61
 224:	be b7       	in	r27, 0x3e	; 62
 226:	12 96       	adiw	r26, 0x02	; 2
 228:	dc 93       	st	X, r29
 22a:	ce 93       	st	-X, r28
 22c:	11 97       	sbiw	r26, 0x01	; 1
 22e:	80 91 aa 00 	lds	r24, 0x00AA
 232:	82 83       	std	Z+2, r24	; 0x02
 234:	13 82       	std	Z+3, r1	; 0x03
 236:	12 d2       	rcall	.+1060   	; 0x65c <printf>
			sw1 = sw_1;
 238:	83 b3       	in	r24, 0x13	; 19
 23a:	81 70       	andi	r24, 0x01	; 1
 23c:	80 93 aa 00 	sts	0x00AA, r24
			P_TURN (LIGHT1);
 240:	92 b3       	in	r25, 0x12	; 18
 242:	82 b3       	in	r24, 0x12	; 18
 244:	80 95       	com	r24
 246:	84 70       	andi	r24, 0x04	; 4
 248:	9b 7f       	andi	r25, 0xFB	; 251
 24a:	89 2b       	or	r24, r25
 24c:	82 bb       	out	0x12, r24	; 18
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	a3 cf       	rjmp	.-186    	; 0x19e <main+0x2c>

00000258 <uart_received>:
unsigned char sw5 = 1;
unsigned char sw6 = 1;
unsigned char sensorin = 1;

int uart_received (unsigned char * uart_command, unsigned int ilent)
{
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
 262:	16 2f       	mov	r17, r22
 264:	07 2f       	mov	r16, r23
	if(findstr("rf ",3,uart_command,ilent)!=(-1))
 266:	85 ea       	ldi	r24, 0xA5	; 165
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	63 e0       	ldi	r22, 0x03	; 3
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	ae 01       	movw	r20, r28
 270:	21 2f       	mov	r18, r17
 272:	30 2f       	mov	r19, r16
 274:	2d d1       	rcall	.+602    	; 0x4d0 <findstr>
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	79 f0       	breq	.+30     	; 0x29a <uart_received+0x42>
	{
		int i = findstr("rf ",3,uart_command,ilent);
 27c:	85 ea       	ldi	r24, 0xA5	; 165
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	63 e0       	ldi	r22, 0x03	; 3
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	ae 01       	movw	r20, r28
 286:	21 2f       	mov	r18, r17
 288:	30 2f       	mov	r19, r16
 28a:	22 d1       	rcall	.+580    	; 0x4d0 <findstr>
		//printf("\n");
		//printptr(uart_command + 3 + i,ilent - 3 - i);
		M_Sent_Frame(uart_command + 3 + i,ilent - 3 - i);
 28c:	13 50       	subi	r17, 0x03	; 3
 28e:	18 1b       	sub	r17, r24
 290:	03 96       	adiw	r24, 0x03	; 3
 292:	8c 0f       	add	r24, r28
 294:	9d 1f       	adc	r25, r29
 296:	61 2f       	mov	r22, r17
 298:	bd d0       	rcall	.+378    	; 0x414 <M_Sent_Frame>
	}
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	08 95       	ret

000002a4 <M_Get_Pulsestart>:
//==============================================================================
unsigned char M_Get_Pulsestart()
{
     unsigned int i;
//	 printf("\n%d",i);
	 if(Data_In)
 2a4:	b1 9b       	sbis	0x16, 1	; 22
 2a6:	18 c0       	rjmp	.+48     	; 0x2d8 <M_Get_Pulsestart+0x34>
	 {	
  	   if((Data_In));
 2a8:	86 b3       	in	r24, 0x16	; 22
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ae:	26 e2       	ldi	r18, 0x26	; 38
 2b0:	32 e0       	ldi	r19, 0x02	; 2
 2b2:	f9 01       	movw	r30, r18
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <M_Get_Pulsestart+0x10>
  		   for(i=0;i<35;i++)
 	 	   {
			  _delay_us(TIME);
 	         if((Data_In)==0) break;        
 2b8:	b1 9b       	sbis	0x16, 1	; 22
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <M_Get_Pulsestart+0x22>
     unsigned int i;
//	 printf("\n%d",i);
	 if(Data_In)
	 {	
  	   if((Data_In));
  		   for(i=0;i<35;i++)
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	83 32       	cpi	r24, 0x23	; 35
 2c0:	91 05       	cpc	r25, r1
 2c2:	b9 f7       	brne	.-18     	; 0x2b2 <M_Get_Pulsestart+0xe>
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <M_Get_Pulsestart+0x34>
 	 	   {
			  _delay_us(TIME);
 	         if((Data_In)==0) break;        
 		    }
			//printf("\n%d",i);
  	   if((i<29)&&(i>=0)) {return 0;}
 2c6:	8d 31       	cpi	r24, 0x1D	; 29
 2c8:	91 05       	cpc	r25, r1
 2ca:	30 f0       	brcs	.+12     	; 0x2d8 <M_Get_Pulsestart+0x34>
   		  else if (i>30) {return 0;}
 2cc:	4f 97       	sbiw	r24, 0x1f	; 31
 2ce:	20 f4       	brcc	.+8      	; 0x2d8 <M_Get_Pulsestart+0x34>
  	   else { while((Data_In)==0); return 1;}
 2d0:	b1 9b       	sbis	0x16, 1	; 22
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <M_Get_Pulsestart+0x2c>
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	08 95       	ret
 2d8:	80 e0       	ldi	r24, 0x00	; 0
	}
	else return 0;

}
 2da:	08 95       	ret

000002dc <M_Get_Byte>:


//==============================================================================
unsigned char M_Get_Byte()
{
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	27 e0       	ldi	r18, 0x07	; 7
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	ec e4       	ldi	r30, 0x4C	; 76
 2e4:	f4 e0       	ldi	r31, 0x04	; 4
     for(i=0;i<8;i++)
     {       
		_delay_us(2*TIME);
		if ((Data_In))
		{
		  	data|=(1<<(7-i));	// nhan bit cao truoc
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	cf 01       	movw	r24, r30
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <M_Get_Byte+0x10>
     data=0;
	 
     for(i=0;i<8;i++)
     {       
		_delay_us(2*TIME);
		if ((Data_In))
 2f0:	b1 9b       	sbis	0x16, 1	; 22
 2f2:	0a c0       	rjmp	.+20     	; 0x308 <M_Get_Byte+0x2c>
		{
		  	data|=(1<<(7-i));	// nhan bit cao truoc
			while (Data_In);
 2f4:	b1 99       	sbic	0x16, 1	; 22
 2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <M_Get_Byte+0x18>
     for(i=0;i<8;i++)
     {       
		_delay_us(2*TIME);
		if ((Data_In))
		{
		  	data|=(1<<(7-i));	// nhan bit cao truoc
 2f8:	cb 01       	movw	r24, r22
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <M_Get_Byte+0x26>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <M_Get_Byte+0x22>
 306:	48 2b       	or	r20, r24
			while (Data_In);
		}
		while ((Data_In)==0);
 308:	b1 9b       	sbis	0x16, 1	; 22
 30a:	fe cf       	rjmp	.-4      	; 0x308 <M_Get_Byte+0x2c>
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	30 40       	sbci	r19, 0x00	; 0
unsigned char M_Get_Byte()
{
     unsigned char data,i;
     data=0;
	 
     for(i=0;i<8;i++)
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	2f 3f       	cpi	r18, 0xFF	; 255
 314:	38 07       	cpc	r19, r24
 316:	49 f7       	brne	.-46     	; 0x2ea <M_Get_Byte+0xe>
			while (Data_In);
		}
		while ((Data_In)==0);
      }                  
     return data;
}
 318:	84 2f       	mov	r24, r20
 31a:	08 95       	ret

0000031c <M_Get_Array>:

//==============================================================================
unsigned int M_Get_Array(unsigned char *array,unsigned char length)
{
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	06 2f       	mov	r16, r22
 326:	ec 01       	movw	r28, r24
 328:	10 e0       	ldi	r17, 0x00	; 0
 32a:	05 c0       	rjmp	.+10     	; 0x336 <M_Get_Array+0x1a>
     unsigned char i;
     for(i=0;i<length;i++)
     {
          array[i]=M_Get_Byte();
 32c:	d7 df       	rcall	.-82     	; 0x2dc <M_Get_Byte>
 32e:	89 93       	st	Y+, r24
		  if (array[i] == '\r')
 330:	8d 30       	cpi	r24, 0x0D	; 13
 332:	19 f0       	breq	.+6      	; 0x33a <M_Get_Array+0x1e>

//==============================================================================
unsigned int M_Get_Array(unsigned char *array,unsigned char length)
{
     unsigned char i;
     for(i=0;i<length;i++)
 334:	1f 5f       	subi	r17, 0xFF	; 255
 336:	10 17       	cp	r17, r16
 338:	c8 f3       	brcs	.-14     	; 0x32c <M_Get_Array+0x10>
          array[i]=M_Get_Byte();
		  if (array[i] == '\r')
		  	return (i);
     }
	 return i;
}
 33a:	81 2f       	mov	r24, r17
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	08 95       	ret

00000348 <M_Get_Frame>:

//==============================================================================
unsigned int M_Get_Frame(unsigned char *data, unsigned int length)
{
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	ec 01       	movw	r28, r24
 350:	16 2f       	mov	r17, r22
	 if (M_Get_Pulsestart())
 352:	a8 df       	rcall	.-176    	; 0x2a4 <M_Get_Pulsestart>
 354:	88 23       	and	r24, r24
 356:	19 f4       	brne	.+6      	; 0x35e <M_Get_Frame+0x16>
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	04 c0       	rjmp	.+8      	; 0x366 <M_Get_Frame+0x1e>
	 {
	 	
		unsigned int i = M_Get_Array(data,length);
 35e:	ce 01       	movw	r24, r28
 360:	61 2f       	mov	r22, r17
 362:	dc df       	rcall	.-72     	; 0x31c <M_Get_Array>
 364:	9c 01       	movw	r18, r24
		return i;
	}	
	return 0;
	 	       
}
 366:	c9 01       	movw	r24, r18
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	08 95       	ret

00000370 <M_Sent_Bit>:
/*
     Ma hoa Manchester:
     Bit 1 --> 10
     Bit 0 --> 01
*/
        if(i)  // toc do truyen 1K
 370:	88 23       	and	r24, r24
 372:	49 f0       	breq	.+18     	; 0x386 <M_Sent_Bit+0x16>
        {
                M_Data_Out(1);
 374:	c0 9a       	sbi	0x18, 0	; 24
 376:	82 e7       	ldi	r24, 0x72	; 114
 378:	96 e0       	ldi	r25, 0x06	; 6
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <M_Sent_Bit+0xa>
                _delay_us(TIME*3);  
                M_Data_Out(0);
 37e:	c0 98       	cbi	0x18, 0	; 24
 380:	86 e2       	ldi	r24, 0x26	; 38
 382:	92 e0       	ldi	r25, 0x02	; 2
 384:	08 c0       	rjmp	.+16     	; 0x396 <M_Sent_Bit+0x26>
                _delay_us(TIME);
        }                     
        else   // toc do truyen 1K
        {
                M_Data_Out(1);
 386:	c0 9a       	sbi	0x18, 0	; 24
 388:	86 e2       	ldi	r24, 0x26	; 38
 38a:	92 e0       	ldi	r25, 0x02	; 2
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <M_Sent_Bit+0x1c>
                _delay_us(TIME);    
                M_Data_Out(0);
 390:	c0 98       	cbi	0x18, 0	; 24
 392:	82 e7       	ldi	r24, 0x72	; 114
 394:	96 e0       	ldi	r25, 0x06	; 6
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <M_Sent_Bit+0x26>
 39a:	08 95       	ret

0000039c <M_Pulse_Start>:
        
}  
// ================================================
void M_Pulse_Start()    // Truyen bit 1 co toc do 4ms de bat dau khung truyen
{
 	M_Data_Out(1);
 39c:	c0 9a       	sbi	0x18, 0	; 24
 39e:	84 e7       	ldi	r24, 0x74	; 116
 3a0:	90 e4       	ldi	r25, 0x40	; 64
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <M_Pulse_Start+0x6>
	_delay_us(TIME*30);    
	M_Data_Out(0);
 3a6:	c0 98       	cbi	0x18, 0	; 24
 3a8:	86 e2       	ldi	r24, 0x26	; 38
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <M_Pulse_Start+0x10>
	_delay_us(TIME);
}                     
 3b0:	08 95       	ret

000003b2 <M_Sent_Byte>:
 
// ================================================
void M_Sent_Byte(unsigned char byte)
{
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	f8 2e       	mov	r15, r24
 3be:	c0 e0       	ldi	r28, 0x00	; 0
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
        unsigned char temp,i;
        temp=byte;
        for(i=0;i<8;i++)
        {
               // M_Sent_Bit((temp>>i)&0x01);      truyen tu bit thap den bit cao
               M_Sent_Bit(temp&(0x80>>i));      // truyen tu bit cao den bit thap
 3c2:	00 e8       	ldi	r16, 0x80	; 128
 3c4:	10 e0       	ldi	r17, 0x00	; 0
 3c6:	c8 01       	movw	r24, r16
 3c8:	0c 2e       	mov	r0, r28
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <M_Sent_Byte+0x1e>
 3cc:	95 95       	asr	r25
 3ce:	87 95       	ror	r24
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <M_Sent_Byte+0x1a>
 3d4:	8f 21       	and	r24, r15
 3d6:	cc df       	rcall	.-104    	; 0x370 <M_Sent_Bit>
 3d8:	21 96       	adiw	r28, 0x01	; 1
// ================================================
void M_Sent_Byte(unsigned char byte)
{
        unsigned char temp,i;
        temp=byte;
        for(i=0;i<8;i++)
 3da:	c8 30       	cpi	r28, 0x08	; 8
 3dc:	d1 05       	cpc	r29, r1
 3de:	99 f7       	brne	.-26     	; 0x3c6 <M_Sent_Byte+0x14>
        {
               // M_Sent_Bit((temp>>i)&0x01);      truyen tu bit thap den bit cao
               M_Sent_Bit(temp&(0x80>>i));      // truyen tu bit cao den bit thap
        }
}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	ff 90       	pop	r15
 3ea:	08 95       	ret

000003ec <M_Sent_Array>:

// ================================================
void M_Sent_Array(unsigned char *array,unsigned char length)
{
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	06 2f       	mov	r16, r22
 3f6:	ec 01       	movw	r28, r24
 3f8:	10 e0       	ldi	r17, 0x00	; 0
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <M_Sent_Array+0x16>
        unsigned char i;
        for(i=0;i<length;i++)
        {
                M_Sent_Byte(array[i]);
 3fc:	89 91       	ld	r24, Y+
 3fe:	d9 df       	rcall	.-78     	; 0x3b2 <M_Sent_Byte>

// ================================================
void M_Sent_Array(unsigned char *array,unsigned char length)
{
        unsigned char i;
        for(i=0;i<length;i++)
 400:	1f 5f       	subi	r17, 0xFF	; 255
 402:	10 17       	cp	r17, r16
 404:	d8 f3       	brcs	.-10     	; 0x3fc <M_Sent_Array+0x10>
        {
                M_Sent_Byte(array[i]);
        }
		M_Sent_Byte(13);
 406:	8d e0       	ldi	r24, 0x0D	; 13
 408:	d4 df       	rcall	.-88     	; 0x3b2 <M_Sent_Byte>
}
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	08 95       	ret

00000414 <M_Sent_Frame>:

// ================================================
void M_Sent_Frame(unsigned char *data,unsigned char length)
{  
 414:	df 92       	push	r13
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	8c 01       	movw	r16, r24
 420:	d6 2e       	mov	r13, r22
//        M_Data_Start();
        M_Pulse_Start();
 422:	bc df       	rcall	.-136    	; 0x39c <M_Pulse_Start>
       M_Sent_Array(data,length);
 424:	c8 01       	movw	r24, r16
 426:	6d 2d       	mov	r22, r13
 428:	e1 df       	rcall	.-62     	; 0x3ec <M_Sent_Array>
 42a:	82 e3       	ldi	r24, 0x32	; 50
 42c:	e8 2e       	mov	r14, r24
 42e:	8b e4       	ldi	r24, 0x4B	; 75
 430:	f8 2e       	mov	r15, r24
 432:	c7 01       	movw	r24, r14
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <M_Sent_Frame+0x20>
		_delay_us(TIME*35);

		M_Pulse_Start();
 438:	b1 df       	rcall	.-158    	; 0x39c <M_Pulse_Start>
       M_Sent_Array(data,length);
 43a:	c8 01       	movw	r24, r16
 43c:	6d 2d       	mov	r22, r13
 43e:	d6 df       	rcall	.-84     	; 0x3ec <M_Sent_Array>
 440:	c7 01       	movw	r24, r14
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <M_Sent_Frame+0x2e>
	   _delay_ms(10);


		M_Pulse_Start();
        M_Sent_Array(data,length);*/
}
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	df 90       	pop	r13
 450:	08 95       	ret

00000452 <uart_char_tx>:
unsigned int count;
unsigned char command[30];
//unsigned int bl;

//chuong trinh con phat du lieu 
void uart_char_tx(unsigned char chr){ 
 452:	1f 93       	push	r17
 454:	18 2f       	mov	r17, r24
    if(chr == '\n') uart_char_tx('\r');
 456:	8a 30       	cpi	r24, 0x0A	; 10
 458:	11 f4       	brne	.+4      	; 0x45e <uart_char_tx+0xc>
 45a:	8d e0       	ldi	r24, 0x0D	; 13
 45c:	fa df       	rcall	.-12     	; 0x452 <uart_char_tx>
	while (bit_is_clear(UCSRA,UDRE)) {}; //cho den khi bit UDRE=1     
 45e:	5d 9b       	sbis	0x0b, 5	; 11
 460:	fe cf       	rjmp	.-4      	; 0x45e <uart_char_tx+0xc>
            UDR=chr;
 462:	1c b9       	out	0x0c, r17	; 12
}
 464:	1f 91       	pop	r17
 466:	08 95       	ret

00000468 <uartInit>:

static FILE uartstd = FDEV_SETUP_STREAM(uart_char_tx, NULL, _FDEV_SETUP_WRITE);
void uartInit(void)
	{     
	//set baud, 9600 ung voi f=16Mhz, xem bang 70 trang 165, Atmega32 datasheet 
    UBRRH=0;     
 468:	10 bc       	out	0x20, r1	; 32
    UBRRL=51;
 46a:	83 e3       	ldi	r24, 0x33	; 51
 46c:	89 b9       	out	0x09, r24	; 9
     
    //set khung truyen va kich hoat bo nhan du lieu 
    UCSRA=0x00; 
 46e:	1b b8       	out	0x0b, r1	; 11
    UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); 
 470:	86 e8       	ldi	r24, 0x86	; 134
 472:	80 bd       	out	0x20, r24	; 32
    UCSRB= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 474:	88 e9       	ldi	r24, 0x98	; 152
 476:	8a b9       	out	0x0a, r24	; 10
	stdout = &uartstd;
 478:	82 ec       	ldi	r24, 0xC2	; 194
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	90 93 01 01 	sts	0x0101, r25
 480:	80 93 00 01 	sts	0x0100, r24
	sei();
 484:	78 94       	sei
}
 486:	08 95       	ret

00000488 <printptr>:

void printptr ( unsigned char * pbuff, int ilent)
{
 488:	ef 92       	push	r14
 48a:	ff 92       	push	r15
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	7c 01       	movw	r14, r24
 496:	8b 01       	movw	r16, r22
 498:	c0 e0       	ldi	r28, 0x00	; 0
 49a:	d0 e0       	ldi	r29, 0x00	; 0
 49c:	06 c0       	rjmp	.+12     	; 0x4aa <printptr+0x22>
 	int i = 0;
	while (i<ilent)
	{
		uart_char_tx(pbuff[i]);
 49e:	f7 01       	movw	r30, r14
 4a0:	ec 0f       	add	r30, r28
 4a2:	fd 1f       	adc	r31, r29
 4a4:	80 81       	ld	r24, Z
 4a6:	d5 df       	rcall	.-86     	; 0x452 <uart_char_tx>
		i++;
 4a8:	21 96       	adiw	r28, 0x01	; 1
}

void printptr ( unsigned char * pbuff, int ilent)
{
 	int i = 0;
	while (i<ilent)
 4aa:	c0 17       	cp	r28, r16
 4ac:	d1 07       	cpc	r29, r17
 4ae:	bc f3       	brlt	.-18     	; 0x49e <printptr+0x16>
	{
		uart_char_tx(pbuff[i]);
		i++;
	}

}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	08 95       	ret

000004be <proc>:
}

void proc()
{
		
}
 4be:	08 95       	ret

000004c0 <clear>:

void clear()
{
 4c0:	ee ed       	ldi	r30, 0xDE	; 222
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i = 0; i < 30; i++)
		command[i]= 0;
 4c4:	11 92       	st	Z+, r1
		
}

void clear()
{
	for (int i = 0; i < 30; i++)
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	ec 3f       	cpi	r30, 0xFC	; 252
 4ca:	f8 07       	cpc	r31, r24
 4cc:	d9 f7       	brne	.-10     	; 0x4c4 <clear+0x4>
		command[i]= 0;
}
 4ce:	08 95       	ret

000004d0 <findstr>:

unsigned int findstr(unsigned char * str,unsigned int lens, unsigned char * buffer, unsigned int lenb)
{
 4d0:	8f 92       	push	r8
 4d2:	9f 92       	push	r9
 4d4:	af 92       	push	r10
 4d6:	bf 92       	push	r11
 4d8:	cf 92       	push	r12
 4da:	df 92       	push	r13
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	4c 01       	movw	r8, r24
 4ea:	eb 01       	movw	r28, r22
 4ec:	5a 01       	movw	r10, r20
 4ee:	69 01       	movw	r12, r18
 4f0:	40 e0       	ldi	r20, 0x00	; 0
 4f2:	50 e0       	ldi	r21, 0x00	; 0
	for(int i = 0; i <= lenb;i++)
	{
		for (int j = 0; j <= lens; j++)
		{
			if (str[j] != buffer[i+j])
				j = lens+1;
 4f4:	7b 01       	movw	r14, r22
 4f6:	08 94       	sec
 4f8:	e1 1c       	adc	r14, r1
 4fa:	f1 1c       	adc	r15, r1
			//printf("\n%u",j);
			if (j == lens - 1)
 4fc:	8b 01       	movw	r16, r22
 4fe:	01 50       	subi	r16, 0x01	; 1
 500:	10 40       	sbci	r17, 0x00	; 0
 502:	16 c0       	rjmp	.+44     	; 0x530 <findstr+0x60>
{
	for(int i = 0; i <= lenb;i++)
	{
		for (int j = 0; j <= lens; j++)
		{
			if (str[j] != buffer[i+j])
 504:	d4 01       	movw	r26, r8
 506:	a2 0f       	add	r26, r18
 508:	b3 1f       	adc	r27, r19
 50a:	f5 01       	movw	r30, r10
 50c:	e2 0f       	add	r30, r18
 50e:	f3 1f       	adc	r31, r19
 510:	e4 0f       	add	r30, r20
 512:	f5 1f       	adc	r31, r21
 514:	9c 91       	ld	r25, X
 516:	80 81       	ld	r24, Z
 518:	98 13       	cpse	r25, r24
				j = lens+1;
 51a:	97 01       	movw	r18, r14
			//printf("\n%u",j);
			if (j == lens - 1)
 51c:	20 17       	cp	r18, r16
 51e:	31 07       	cpc	r19, r17
 520:	81 f0       	breq	.+32     	; 0x542 <findstr+0x72>

unsigned int findstr(unsigned char * str,unsigned int lens, unsigned char * buffer, unsigned int lenb)
{
	for(int i = 0; i <= lenb;i++)
	{
		for (int j = 0; j <= lens; j++)
 522:	2f 5f       	subi	r18, 0xFF	; 255
 524:	3f 4f       	sbci	r19, 0xFF	; 255
 526:	c2 17       	cp	r28, r18
 528:	d3 07       	cpc	r29, r19
 52a:	60 f7       	brcc	.-40     	; 0x504 <findstr+0x34>
		command[i]= 0;
}

unsigned int findstr(unsigned char * str,unsigned int lens, unsigned char * buffer, unsigned int lenb)
{
	for(int i = 0; i <= lenb;i++)
 52c:	4f 5f       	subi	r20, 0xFF	; 255
 52e:	5f 4f       	sbci	r21, 0xFF	; 255
 530:	ba 01       	movw	r22, r20
 532:	c4 16       	cp	r12, r20
 534:	d5 06       	cpc	r13, r21
 536:	18 f0       	brcs	.+6      	; 0x53e <findstr+0x6e>
 538:	20 e0       	ldi	r18, 0x00	; 0
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	f4 cf       	rjmp	.-24     	; 0x526 <findstr+0x56>
 53e:	6f ef       	ldi	r22, 0xFF	; 255
 540:	7f ef       	ldi	r23, 0xFF	; 255
				return i;
		}
		
	}
	return (-1);
}
 542:	cb 01       	movw	r24, r22
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	ff 90       	pop	r15
 54e:	ef 90       	pop	r14
 550:	df 90       	pop	r13
 552:	cf 90       	pop	r12
 554:	bf 90       	pop	r11
 556:	af 90       	pop	r10
 558:	9f 90       	pop	r9
 55a:	8f 90       	pop	r8
 55c:	08 95       	ret

0000055e <is_command>:

int is_command(unsigned char * str)
{
 55e:	fc 01       	movw	r30, r24
 560:	a1 ee       	ldi	r26, 0xE1	; 225
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	07 c0       	rjmp	.+14     	; 0x574 <is_command+0x16>
	int i = 0;
	while (str[i] != 0) {
		if (str[i] != command[i + 3])
 566:	8d 91       	ld	r24, X+
 568:	31 96       	adiw	r30, 0x01	; 1
 56a:	98 17       	cp	r25, r24
 56c:	19 f0       	breq	.+6      	; 0x574 <is_command+0x16>
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	05 c0       	rjmp	.+10     	; 0x57e <is_command+0x20>
}

int is_command(unsigned char * str)
{
	int i = 0;
	while (str[i] != 0) {
 574:	90 81       	ld	r25, Z
 576:	99 23       	and	r25, r25
 578:	b1 f7       	brne	.-20     	; 0x566 <is_command+0x8>
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	30 e0       	ldi	r19, 0x00	; 0
		if (str[i] != command[i + 3])
			return 0;
		i++;
	}
	return 1;
}
 57e:	c9 01       	movw	r24, r18
 580:	08 95       	ret

00000582 <__vector_11>:
	}

}
		
ISR(SIG_UART_RECV)
{ //trinh phuc vu ngat USART hoan tat nhan  
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	2f 93       	push	r18
 58e:	3f 93       	push	r19
 590:	4f 93       	push	r20
 592:	5f 93       	push	r21
 594:	6f 93       	push	r22
 596:	7f 93       	push	r23
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	af 93       	push	r26
 59e:	bf 93       	push	r27
 5a0:	ef 93       	push	r30
 5a2:	ff 93       	push	r31
command [count+3] = UDR;
 5a4:	60 91 fc 00 	lds	r22, 0x00FC
 5a8:	70 91 fd 00 	lds	r23, 0x00FD
 5ac:	8c b1       	in	r24, 0x0c	; 12
 5ae:	fb 01       	movw	r30, r22
 5b0:	e2 52       	subi	r30, 0x22	; 34
 5b2:	ff 4f       	sbci	r31, 0xFF	; 255
 5b4:	83 83       	std	Z+3, r24	; 0x03
//	printf("%u\r\n",command[count+3]);
	
	if (command [count+3]==13)
 5b6:	8d 30       	cpi	r24, 0x0D	; 13
 5b8:	f9 f4       	brne	.+62     	; 0x5f8 <__vector_11+0x76>
		{
			int er = uart_received(command +3,count);
 5ba:	81 ee       	ldi	r24, 0xE1	; 225
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	4c de       	rcall	.-872    	; 0x258 <uart_received>
			if (er) printf("\nBad Command\n-> ");
 5c0:	89 2b       	or	r24, r25
 5c2:	59 f0       	breq	.+22     	; 0x5da <__vector_11+0x58>
 5c4:	00 d0       	rcall	.+0      	; 0x5c6 <__vector_11+0x44>
 5c6:	81 eb       	ldi	r24, 0xB1	; 177
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	ed b7       	in	r30, 0x3d	; 61
 5cc:	fe b7       	in	r31, 0x3e	; 62
 5ce:	92 83       	std	Z+2, r25	; 0x02
 5d0:	81 83       	std	Z+1, r24	; 0x01
 5d2:	44 d0       	rcall	.+136    	; 0x65c <printf>
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <__vector_11+0x5e>
			else printf("\n");//printf("\n-> ");
 5da:	8a e0       	ldi	r24, 0x0A	; 10
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	50 d0       	rcall	.+160    	; 0x680 <putchar>
			count = 0;
 5e0:	10 92 fd 00 	sts	0x00FD, r1
 5e4:	10 92 fc 00 	sts	0x00FC, r1
 5e8:	ee ed       	ldi	r30, 0xDE	; 222
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
}

void clear()
{
	for (int i = 0; i < 30; i++)
		command[i]= 0;
 5ec:	11 92       	st	Z+, r1
		
}

void clear()
{
	for (int i = 0; i < 30; i++)
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	ec 3f       	cpi	r30, 0xFC	; 252
 5f2:	f8 07       	cpc	r31, r24
 5f4:	d9 f7       	brne	.-10     	; 0x5ec <__vector_11+0x6a>
 5f6:	0d c0       	rjmp	.+26     	; 0x612 <__vector_11+0x90>
			count = 0;
			clear();
		}
	else 
	{
		uart_char_tx(command [count+3]);
 5f8:	2c df       	rcall	.-424    	; 0x452 <uart_char_tx>
		count = (count + 1) %29;
 5fa:	80 91 fc 00 	lds	r24, 0x00FC
 5fe:	90 91 fd 00 	lds	r25, 0x00FD
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	6d e1       	ldi	r22, 0x1D	; 29
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	15 d0       	rcall	.+42     	; 0x634 <__udivmodhi4>
 60a:	90 93 fd 00 	sts	0x00FD, r25
 60e:	80 93 fc 00 	sts	0x00FC, r24
	}
}
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	7f 91       	pop	r23
 620:	6f 91       	pop	r22
 622:	5f 91       	pop	r21
 624:	4f 91       	pop	r20
 626:	3f 91       	pop	r19
 628:	2f 91       	pop	r18
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <__udivmodhi4>:
 634:	aa 1b       	sub	r26, r26
 636:	bb 1b       	sub	r27, r27
 638:	51 e1       	ldi	r21, 0x11	; 17
 63a:	07 c0       	rjmp	.+14     	; 0x64a <__udivmodhi4_ep>

0000063c <__udivmodhi4_loop>:
 63c:	aa 1f       	adc	r26, r26
 63e:	bb 1f       	adc	r27, r27
 640:	a6 17       	cp	r26, r22
 642:	b7 07       	cpc	r27, r23
 644:	10 f0       	brcs	.+4      	; 0x64a <__udivmodhi4_ep>
 646:	a6 1b       	sub	r26, r22
 648:	b7 0b       	sbc	r27, r23

0000064a <__udivmodhi4_ep>:
 64a:	88 1f       	adc	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	5a 95       	dec	r21
 650:	a9 f7       	brne	.-22     	; 0x63c <__udivmodhi4_loop>
 652:	80 95       	com	r24
 654:	90 95       	com	r25
 656:	bc 01       	movw	r22, r24
 658:	cd 01       	movw	r24, r26
 65a:	08 95       	ret

0000065c <printf>:
 65c:	a0 e0       	ldi	r26, 0x00	; 0
 65e:	b0 e0       	ldi	r27, 0x00	; 0
 660:	e3 e3       	ldi	r30, 0x33	; 51
 662:	f3 e0       	ldi	r31, 0x03	; 3
 664:	ce c2       	rjmp	.+1436   	; 0xc02 <__prologue_saves__+0x20>
 666:	fe 01       	movw	r30, r28
 668:	35 96       	adiw	r30, 0x05	; 5
 66a:	61 91       	ld	r22, Z+
 66c:	71 91       	ld	r23, Z+
 66e:	80 91 00 01 	lds	r24, 0x0100
 672:	90 91 01 01 	lds	r25, 0x0101
 676:	af 01       	movw	r20, r30
 678:	3e d0       	rcall	.+124    	; 0x6f6 <vfprintf>
 67a:	20 96       	adiw	r28, 0x00	; 0
 67c:	e2 e0       	ldi	r30, 0x02	; 2
 67e:	dd c2       	rjmp	.+1466   	; 0xc3a <__epilogue_restores__+0x20>

00000680 <putchar>:
 680:	60 91 00 01 	lds	r22, 0x0100
 684:	70 91 01 01 	lds	r23, 0x0101
 688:	22 d2       	rcall	.+1092   	; 0xace <fputc>
 68a:	08 95       	ret

0000068c <puts>:
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	8c 01       	movw	r16, r24
 696:	e0 91 00 01 	lds	r30, 0x0100
 69a:	f0 91 01 01 	lds	r31, 0x0101
 69e:	83 81       	ldd	r24, Z+3	; 0x03
 6a0:	81 ff       	sbrs	r24, 1
 6a2:	21 c0       	rjmp	.+66     	; 0x6e6 <puts+0x5a>
 6a4:	c0 e0       	ldi	r28, 0x00	; 0
 6a6:	d0 e0       	ldi	r29, 0x00	; 0
 6a8:	0d c0       	rjmp	.+26     	; 0x6c4 <puts+0x38>
 6aa:	e0 91 00 01 	lds	r30, 0x0100
 6ae:	f0 91 01 01 	lds	r31, 0x0101
 6b2:	20 85       	ldd	r18, Z+8	; 0x08
 6b4:	31 85       	ldd	r19, Z+9	; 0x09
 6b6:	bf 01       	movw	r22, r30
 6b8:	f9 01       	movw	r30, r18
 6ba:	09 95       	icall
 6bc:	89 2b       	or	r24, r25
 6be:	11 f0       	breq	.+4      	; 0x6c4 <puts+0x38>
 6c0:	cf ef       	ldi	r28, 0xFF	; 255
 6c2:	df ef       	ldi	r29, 0xFF	; 255
 6c4:	f8 01       	movw	r30, r16
 6c6:	81 91       	ld	r24, Z+
 6c8:	8f 01       	movw	r16, r30
 6ca:	88 23       	and	r24, r24
 6cc:	71 f7       	brne	.-36     	; 0x6aa <puts+0x1e>
 6ce:	e0 91 00 01 	lds	r30, 0x0100
 6d2:	f0 91 01 01 	lds	r31, 0x0101
 6d6:	20 85       	ldd	r18, Z+8	; 0x08
 6d8:	31 85       	ldd	r19, Z+9	; 0x09
 6da:	8a e0       	ldi	r24, 0x0A	; 10
 6dc:	bf 01       	movw	r22, r30
 6de:	f9 01       	movw	r30, r18
 6e0:	09 95       	icall
 6e2:	89 2b       	or	r24, r25
 6e4:	11 f0       	breq	.+4      	; 0x6ea <puts+0x5e>
 6e6:	cf ef       	ldi	r28, 0xFF	; 255
 6e8:	df ef       	ldi	r29, 0xFF	; 255
 6ea:	ce 01       	movw	r24, r28
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	1f 91       	pop	r17
 6f2:	0f 91       	pop	r16
 6f4:	08 95       	ret

000006f6 <vfprintf>:
 6f6:	ab e0       	ldi	r26, 0x0B	; 11
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
 6fa:	e0 e8       	ldi	r30, 0x80	; 128
 6fc:	f3 e0       	ldi	r31, 0x03	; 3
 6fe:	71 c2       	rjmp	.+1250   	; 0xbe2 <__prologue_saves__>
 700:	3c 01       	movw	r6, r24
 702:	2b 01       	movw	r4, r22
 704:	5a 01       	movw	r10, r20
 706:	fc 01       	movw	r30, r24
 708:	17 82       	std	Z+7, r1	; 0x07
 70a:	16 82       	std	Z+6, r1	; 0x06
 70c:	83 81       	ldd	r24, Z+3	; 0x03
 70e:	81 fd       	sbrc	r24, 1
 710:	03 c0       	rjmp	.+6      	; 0x718 <vfprintf+0x22>
 712:	6f ef       	ldi	r22, 0xFF	; 255
 714:	7f ef       	ldi	r23, 0xFF	; 255
 716:	b9 c1       	rjmp	.+882    	; 0xa8a <vfprintf+0x394>
 718:	9a e0       	ldi	r25, 0x0A	; 10
 71a:	89 2e       	mov	r8, r25
 71c:	1e 01       	movw	r2, r28
 71e:	08 94       	sec
 720:	21 1c       	adc	r2, r1
 722:	31 1c       	adc	r3, r1
 724:	f3 01       	movw	r30, r6
 726:	23 81       	ldd	r18, Z+3	; 0x03
 728:	f2 01       	movw	r30, r4
 72a:	23 fd       	sbrc	r18, 3
 72c:	85 91       	lpm	r24, Z+
 72e:	23 ff       	sbrs	r18, 3
 730:	81 91       	ld	r24, Z+
 732:	2f 01       	movw	r4, r30
 734:	88 23       	and	r24, r24
 736:	09 f4       	brne	.+2      	; 0x73a <vfprintf+0x44>
 738:	a5 c1       	rjmp	.+842    	; 0xa84 <vfprintf+0x38e>
 73a:	85 32       	cpi	r24, 0x25	; 37
 73c:	39 f4       	brne	.+14     	; 0x74c <vfprintf+0x56>
 73e:	23 fd       	sbrc	r18, 3
 740:	85 91       	lpm	r24, Z+
 742:	23 ff       	sbrs	r18, 3
 744:	81 91       	ld	r24, Z+
 746:	2f 01       	movw	r4, r30
 748:	85 32       	cpi	r24, 0x25	; 37
 74a:	21 f4       	brne	.+8      	; 0x754 <vfprintf+0x5e>
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	b3 01       	movw	r22, r6
 750:	be d1       	rcall	.+892    	; 0xace <fputc>
 752:	e8 cf       	rjmp	.-48     	; 0x724 <vfprintf+0x2e>
 754:	98 2f       	mov	r25, r24
 756:	ff 24       	eor	r15, r15
 758:	ee 24       	eor	r14, r14
 75a:	99 24       	eor	r9, r9
 75c:	ff e1       	ldi	r31, 0x1F	; 31
 75e:	ff 15       	cp	r31, r15
 760:	d0 f0       	brcs	.+52     	; 0x796 <vfprintf+0xa0>
 762:	9b 32       	cpi	r25, 0x2B	; 43
 764:	69 f0       	breq	.+26     	; 0x780 <vfprintf+0x8a>
 766:	9c 32       	cpi	r25, 0x2C	; 44
 768:	28 f4       	brcc	.+10     	; 0x774 <vfprintf+0x7e>
 76a:	90 32       	cpi	r25, 0x20	; 32
 76c:	59 f0       	breq	.+22     	; 0x784 <vfprintf+0x8e>
 76e:	93 32       	cpi	r25, 0x23	; 35
 770:	91 f4       	brne	.+36     	; 0x796 <vfprintf+0xa0>
 772:	0e c0       	rjmp	.+28     	; 0x790 <vfprintf+0x9a>
 774:	9d 32       	cpi	r25, 0x2D	; 45
 776:	49 f0       	breq	.+18     	; 0x78a <vfprintf+0x94>
 778:	90 33       	cpi	r25, 0x30	; 48
 77a:	69 f4       	brne	.+26     	; 0x796 <vfprintf+0xa0>
 77c:	41 e0       	ldi	r20, 0x01	; 1
 77e:	24 c0       	rjmp	.+72     	; 0x7c8 <vfprintf+0xd2>
 780:	52 e0       	ldi	r21, 0x02	; 2
 782:	f5 2a       	or	r15, r21
 784:	84 e0       	ldi	r24, 0x04	; 4
 786:	f8 2a       	or	r15, r24
 788:	28 c0       	rjmp	.+80     	; 0x7da <vfprintf+0xe4>
 78a:	98 e0       	ldi	r25, 0x08	; 8
 78c:	f9 2a       	or	r15, r25
 78e:	25 c0       	rjmp	.+74     	; 0x7da <vfprintf+0xe4>
 790:	e0 e1       	ldi	r30, 0x10	; 16
 792:	fe 2a       	or	r15, r30
 794:	22 c0       	rjmp	.+68     	; 0x7da <vfprintf+0xe4>
 796:	f7 fc       	sbrc	r15, 7
 798:	29 c0       	rjmp	.+82     	; 0x7ec <vfprintf+0xf6>
 79a:	89 2f       	mov	r24, r25
 79c:	80 53       	subi	r24, 0x30	; 48
 79e:	8a 30       	cpi	r24, 0x0A	; 10
 7a0:	70 f4       	brcc	.+28     	; 0x7be <vfprintf+0xc8>
 7a2:	f6 fe       	sbrs	r15, 6
 7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <vfprintf+0xba>
 7a6:	98 9c       	mul	r9, r8
 7a8:	90 2c       	mov	r9, r0
 7aa:	11 24       	eor	r1, r1
 7ac:	98 0e       	add	r9, r24
 7ae:	15 c0       	rjmp	.+42     	; 0x7da <vfprintf+0xe4>
 7b0:	e8 9c       	mul	r14, r8
 7b2:	e0 2c       	mov	r14, r0
 7b4:	11 24       	eor	r1, r1
 7b6:	e8 0e       	add	r14, r24
 7b8:	f0 e2       	ldi	r31, 0x20	; 32
 7ba:	ff 2a       	or	r15, r31
 7bc:	0e c0       	rjmp	.+28     	; 0x7da <vfprintf+0xe4>
 7be:	9e 32       	cpi	r25, 0x2E	; 46
 7c0:	29 f4       	brne	.+10     	; 0x7cc <vfprintf+0xd6>
 7c2:	f6 fc       	sbrc	r15, 6
 7c4:	5f c1       	rjmp	.+702    	; 0xa84 <vfprintf+0x38e>
 7c6:	40 e4       	ldi	r20, 0x40	; 64
 7c8:	f4 2a       	or	r15, r20
 7ca:	07 c0       	rjmp	.+14     	; 0x7da <vfprintf+0xe4>
 7cc:	9c 36       	cpi	r25, 0x6C	; 108
 7ce:	19 f4       	brne	.+6      	; 0x7d6 <vfprintf+0xe0>
 7d0:	50 e8       	ldi	r21, 0x80	; 128
 7d2:	f5 2a       	or	r15, r21
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <vfprintf+0xe4>
 7d6:	98 36       	cpi	r25, 0x68	; 104
 7d8:	49 f4       	brne	.+18     	; 0x7ec <vfprintf+0xf6>
 7da:	f2 01       	movw	r30, r4
 7dc:	23 fd       	sbrc	r18, 3
 7de:	95 91       	lpm	r25, Z+
 7e0:	23 ff       	sbrs	r18, 3
 7e2:	91 91       	ld	r25, Z+
 7e4:	2f 01       	movw	r4, r30
 7e6:	99 23       	and	r25, r25
 7e8:	09 f0       	breq	.+2      	; 0x7ec <vfprintf+0xf6>
 7ea:	b8 cf       	rjmp	.-144    	; 0x75c <vfprintf+0x66>
 7ec:	89 2f       	mov	r24, r25
 7ee:	85 54       	subi	r24, 0x45	; 69
 7f0:	83 30       	cpi	r24, 0x03	; 3
 7f2:	18 f0       	brcs	.+6      	; 0x7fa <vfprintf+0x104>
 7f4:	80 52       	subi	r24, 0x20	; 32
 7f6:	83 30       	cpi	r24, 0x03	; 3
 7f8:	38 f4       	brcc	.+14     	; 0x808 <vfprintf+0x112>
 7fa:	44 e0       	ldi	r20, 0x04	; 4
 7fc:	50 e0       	ldi	r21, 0x00	; 0
 7fe:	a4 0e       	add	r10, r20
 800:	b5 1e       	adc	r11, r21
 802:	5f e3       	ldi	r21, 0x3F	; 63
 804:	59 83       	std	Y+1, r21	; 0x01
 806:	0f c0       	rjmp	.+30     	; 0x826 <vfprintf+0x130>
 808:	93 36       	cpi	r25, 0x63	; 99
 80a:	31 f0       	breq	.+12     	; 0x818 <vfprintf+0x122>
 80c:	93 37       	cpi	r25, 0x73	; 115
 80e:	79 f0       	breq	.+30     	; 0x82e <vfprintf+0x138>
 810:	93 35       	cpi	r25, 0x53	; 83
 812:	09 f0       	breq	.+2      	; 0x816 <vfprintf+0x120>
 814:	52 c0       	rjmp	.+164    	; 0x8ba <vfprintf+0x1c4>
 816:	1f c0       	rjmp	.+62     	; 0x856 <vfprintf+0x160>
 818:	f5 01       	movw	r30, r10
 81a:	80 81       	ld	r24, Z
 81c:	89 83       	std	Y+1, r24	; 0x01
 81e:	42 e0       	ldi	r20, 0x02	; 2
 820:	50 e0       	ldi	r21, 0x00	; 0
 822:	a4 0e       	add	r10, r20
 824:	b5 1e       	adc	r11, r21
 826:	61 01       	movw	r12, r2
 828:	01 e0       	ldi	r16, 0x01	; 1
 82a:	10 e0       	ldi	r17, 0x00	; 0
 82c:	11 c0       	rjmp	.+34     	; 0x850 <vfprintf+0x15a>
 82e:	f5 01       	movw	r30, r10
 830:	c0 80       	ld	r12, Z
 832:	d1 80       	ldd	r13, Z+1	; 0x01
 834:	f6 fc       	sbrc	r15, 6
 836:	03 c0       	rjmp	.+6      	; 0x83e <vfprintf+0x148>
 838:	6f ef       	ldi	r22, 0xFF	; 255
 83a:	7f ef       	ldi	r23, 0xFF	; 255
 83c:	02 c0       	rjmp	.+4      	; 0x842 <vfprintf+0x14c>
 83e:	69 2d       	mov	r22, r9
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	42 e0       	ldi	r20, 0x02	; 2
 844:	50 e0       	ldi	r21, 0x00	; 0
 846:	a4 0e       	add	r10, r20
 848:	b5 1e       	adc	r11, r21
 84a:	c6 01       	movw	r24, r12
 84c:	35 d1       	rcall	.+618    	; 0xab8 <strnlen>
 84e:	8c 01       	movw	r16, r24
 850:	5f e7       	ldi	r21, 0x7F	; 127
 852:	f5 22       	and	r15, r21
 854:	13 c0       	rjmp	.+38     	; 0x87c <vfprintf+0x186>
 856:	f5 01       	movw	r30, r10
 858:	c0 80       	ld	r12, Z
 85a:	d1 80       	ldd	r13, Z+1	; 0x01
 85c:	f6 fc       	sbrc	r15, 6
 85e:	03 c0       	rjmp	.+6      	; 0x866 <vfprintf+0x170>
 860:	6f ef       	ldi	r22, 0xFF	; 255
 862:	7f ef       	ldi	r23, 0xFF	; 255
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0x174>
 866:	69 2d       	mov	r22, r9
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	42 e0       	ldi	r20, 0x02	; 2
 86c:	50 e0       	ldi	r21, 0x00	; 0
 86e:	a4 0e       	add	r10, r20
 870:	b5 1e       	adc	r11, r21
 872:	c6 01       	movw	r24, r12
 874:	16 d1       	rcall	.+556    	; 0xaa2 <strnlen_P>
 876:	8c 01       	movw	r16, r24
 878:	50 e8       	ldi	r21, 0x80	; 128
 87a:	f5 2a       	or	r15, r21
 87c:	f3 fe       	sbrs	r15, 3
 87e:	06 c0       	rjmp	.+12     	; 0x88c <vfprintf+0x196>
 880:	18 c0       	rjmp	.+48     	; 0x8b2 <vfprintf+0x1bc>
 882:	80 e2       	ldi	r24, 0x20	; 32
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	b3 01       	movw	r22, r6
 888:	22 d1       	rcall	.+580    	; 0xace <fputc>
 88a:	ea 94       	dec	r14
 88c:	8e 2d       	mov	r24, r14
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	08 17       	cp	r16, r24
 892:	19 07       	cpc	r17, r25
 894:	b0 f3       	brcs	.-20     	; 0x882 <vfprintf+0x18c>
 896:	0d c0       	rjmp	.+26     	; 0x8b2 <vfprintf+0x1bc>
 898:	f6 01       	movw	r30, r12
 89a:	f7 fc       	sbrc	r15, 7
 89c:	85 91       	lpm	r24, Z+
 89e:	f7 fe       	sbrs	r15, 7
 8a0:	81 91       	ld	r24, Z+
 8a2:	6f 01       	movw	r12, r30
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	b3 01       	movw	r22, r6
 8a8:	12 d1       	rcall	.+548    	; 0xace <fputc>
 8aa:	e1 10       	cpse	r14, r1
 8ac:	ea 94       	dec	r14
 8ae:	01 50       	subi	r16, 0x01	; 1
 8b0:	10 40       	sbci	r17, 0x00	; 0
 8b2:	01 15       	cp	r16, r1
 8b4:	11 05       	cpc	r17, r1
 8b6:	81 f7       	brne	.-32     	; 0x898 <vfprintf+0x1a2>
 8b8:	e2 c0       	rjmp	.+452    	; 0xa7e <vfprintf+0x388>
 8ba:	94 36       	cpi	r25, 0x64	; 100
 8bc:	11 f0       	breq	.+4      	; 0x8c2 <vfprintf+0x1cc>
 8be:	99 36       	cpi	r25, 0x69	; 105
 8c0:	61 f5       	brne	.+88     	; 0x91a <vfprintf+0x224>
 8c2:	f7 fe       	sbrs	r15, 7
 8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <vfprintf+0x1e0>
 8c6:	f5 01       	movw	r30, r10
 8c8:	20 81       	ld	r18, Z
 8ca:	31 81       	ldd	r19, Z+1	; 0x01
 8cc:	42 81       	ldd	r20, Z+2	; 0x02
 8ce:	53 81       	ldd	r21, Z+3	; 0x03
 8d0:	84 e0       	ldi	r24, 0x04	; 4
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0a c0       	rjmp	.+20     	; 0x8ea <vfprintf+0x1f4>
 8d6:	f5 01       	movw	r30, r10
 8d8:	80 81       	ld	r24, Z
 8da:	91 81       	ldd	r25, Z+1	; 0x01
 8dc:	9c 01       	movw	r18, r24
 8de:	44 27       	eor	r20, r20
 8e0:	37 fd       	sbrc	r19, 7
 8e2:	40 95       	com	r20
 8e4:	54 2f       	mov	r21, r20
 8e6:	82 e0       	ldi	r24, 0x02	; 2
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	a8 0e       	add	r10, r24
 8ec:	b9 1e       	adc	r11, r25
 8ee:	9f e6       	ldi	r25, 0x6F	; 111
 8f0:	f9 22       	and	r15, r25
 8f2:	57 ff       	sbrs	r21, 7
 8f4:	09 c0       	rjmp	.+18     	; 0x908 <vfprintf+0x212>
 8f6:	50 95       	com	r21
 8f8:	40 95       	com	r20
 8fa:	30 95       	com	r19
 8fc:	21 95       	neg	r18
 8fe:	3f 4f       	sbci	r19, 0xFF	; 255
 900:	4f 4f       	sbci	r20, 0xFF	; 255
 902:	5f 4f       	sbci	r21, 0xFF	; 255
 904:	e0 e8       	ldi	r30, 0x80	; 128
 906:	fe 2a       	or	r15, r30
 908:	ca 01       	movw	r24, r20
 90a:	b9 01       	movw	r22, r18
 90c:	a1 01       	movw	r20, r2
 90e:	2a e0       	ldi	r18, 0x0A	; 10
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	09 d1       	rcall	.+530    	; 0xb26 <__ultoa_invert>
 914:	d8 2e       	mov	r13, r24
 916:	d2 18       	sub	r13, r2
 918:	3f c0       	rjmp	.+126    	; 0x998 <vfprintf+0x2a2>
 91a:	95 37       	cpi	r25, 0x75	; 117
 91c:	29 f4       	brne	.+10     	; 0x928 <vfprintf+0x232>
 91e:	1f 2d       	mov	r17, r15
 920:	1f 7e       	andi	r17, 0xEF	; 239
 922:	2a e0       	ldi	r18, 0x0A	; 10
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	1d c0       	rjmp	.+58     	; 0x962 <vfprintf+0x26c>
 928:	1f 2d       	mov	r17, r15
 92a:	19 7f       	andi	r17, 0xF9	; 249
 92c:	9f 36       	cpi	r25, 0x6F	; 111
 92e:	61 f0       	breq	.+24     	; 0x948 <vfprintf+0x252>
 930:	90 37       	cpi	r25, 0x70	; 112
 932:	20 f4       	brcc	.+8      	; 0x93c <vfprintf+0x246>
 934:	98 35       	cpi	r25, 0x58	; 88
 936:	09 f0       	breq	.+2      	; 0x93a <vfprintf+0x244>
 938:	a5 c0       	rjmp	.+330    	; 0xa84 <vfprintf+0x38e>
 93a:	0f c0       	rjmp	.+30     	; 0x95a <vfprintf+0x264>
 93c:	90 37       	cpi	r25, 0x70	; 112
 93e:	39 f0       	breq	.+14     	; 0x94e <vfprintf+0x258>
 940:	98 37       	cpi	r25, 0x78	; 120
 942:	09 f0       	breq	.+2      	; 0x946 <vfprintf+0x250>
 944:	9f c0       	rjmp	.+318    	; 0xa84 <vfprintf+0x38e>
 946:	04 c0       	rjmp	.+8      	; 0x950 <vfprintf+0x25a>
 948:	28 e0       	ldi	r18, 0x08	; 8
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	0a c0       	rjmp	.+20     	; 0x962 <vfprintf+0x26c>
 94e:	10 61       	ori	r17, 0x10	; 16
 950:	14 fd       	sbrc	r17, 4
 952:	14 60       	ori	r17, 0x04	; 4
 954:	20 e1       	ldi	r18, 0x10	; 16
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	04 c0       	rjmp	.+8      	; 0x962 <vfprintf+0x26c>
 95a:	14 fd       	sbrc	r17, 4
 95c:	16 60       	ori	r17, 0x06	; 6
 95e:	20 e1       	ldi	r18, 0x10	; 16
 960:	32 e0       	ldi	r19, 0x02	; 2
 962:	17 ff       	sbrs	r17, 7
 964:	08 c0       	rjmp	.+16     	; 0x976 <vfprintf+0x280>
 966:	f5 01       	movw	r30, r10
 968:	60 81       	ld	r22, Z
 96a:	71 81       	ldd	r23, Z+1	; 0x01
 96c:	82 81       	ldd	r24, Z+2	; 0x02
 96e:	93 81       	ldd	r25, Z+3	; 0x03
 970:	44 e0       	ldi	r20, 0x04	; 4
 972:	50 e0       	ldi	r21, 0x00	; 0
 974:	08 c0       	rjmp	.+16     	; 0x986 <vfprintf+0x290>
 976:	f5 01       	movw	r30, r10
 978:	80 81       	ld	r24, Z
 97a:	91 81       	ldd	r25, Z+1	; 0x01
 97c:	bc 01       	movw	r22, r24
 97e:	80 e0       	ldi	r24, 0x00	; 0
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	42 e0       	ldi	r20, 0x02	; 2
 984:	50 e0       	ldi	r21, 0x00	; 0
 986:	a4 0e       	add	r10, r20
 988:	b5 1e       	adc	r11, r21
 98a:	a1 01       	movw	r20, r2
 98c:	cc d0       	rcall	.+408    	; 0xb26 <__ultoa_invert>
 98e:	d8 2e       	mov	r13, r24
 990:	d2 18       	sub	r13, r2
 992:	8f e7       	ldi	r24, 0x7F	; 127
 994:	f8 2e       	mov	r15, r24
 996:	f1 22       	and	r15, r17
 998:	f6 fe       	sbrs	r15, 6
 99a:	0b c0       	rjmp	.+22     	; 0x9b2 <vfprintf+0x2bc>
 99c:	5e ef       	ldi	r21, 0xFE	; 254
 99e:	f5 22       	and	r15, r21
 9a0:	d9 14       	cp	r13, r9
 9a2:	38 f4       	brcc	.+14     	; 0x9b2 <vfprintf+0x2bc>
 9a4:	f4 fe       	sbrs	r15, 4
 9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <vfprintf+0x2c0>
 9a8:	f2 fc       	sbrc	r15, 2
 9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <vfprintf+0x2c0>
 9ac:	8f ee       	ldi	r24, 0xEF	; 239
 9ae:	f8 22       	and	r15, r24
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <vfprintf+0x2c0>
 9b2:	1d 2d       	mov	r17, r13
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <vfprintf+0x2c2>
 9b6:	19 2d       	mov	r17, r9
 9b8:	f4 fe       	sbrs	r15, 4
 9ba:	0d c0       	rjmp	.+26     	; 0x9d6 <vfprintf+0x2e0>
 9bc:	fe 01       	movw	r30, r28
 9be:	ed 0d       	add	r30, r13
 9c0:	f1 1d       	adc	r31, r1
 9c2:	80 81       	ld	r24, Z
 9c4:	80 33       	cpi	r24, 0x30	; 48
 9c6:	19 f4       	brne	.+6      	; 0x9ce <vfprintf+0x2d8>
 9c8:	99 ee       	ldi	r25, 0xE9	; 233
 9ca:	f9 22       	and	r15, r25
 9cc:	08 c0       	rjmp	.+16     	; 0x9de <vfprintf+0x2e8>
 9ce:	1f 5f       	subi	r17, 0xFF	; 255
 9d0:	f2 fe       	sbrs	r15, 2
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <vfprintf+0x2e8>
 9d4:	03 c0       	rjmp	.+6      	; 0x9dc <vfprintf+0x2e6>
 9d6:	8f 2d       	mov	r24, r15
 9d8:	86 78       	andi	r24, 0x86	; 134
 9da:	09 f0       	breq	.+2      	; 0x9de <vfprintf+0x2e8>
 9dc:	1f 5f       	subi	r17, 0xFF	; 255
 9de:	0f 2d       	mov	r16, r15
 9e0:	f3 fc       	sbrc	r15, 3
 9e2:	13 c0       	rjmp	.+38     	; 0xa0a <vfprintf+0x314>
 9e4:	f0 fe       	sbrs	r15, 0
 9e6:	0e c0       	rjmp	.+28     	; 0xa04 <vfprintf+0x30e>
 9e8:	1e 15       	cp	r17, r14
 9ea:	10 f0       	brcs	.+4      	; 0x9f0 <vfprintf+0x2fa>
 9ec:	9d 2c       	mov	r9, r13
 9ee:	0a c0       	rjmp	.+20     	; 0xa04 <vfprintf+0x30e>
 9f0:	9d 2c       	mov	r9, r13
 9f2:	9e 0c       	add	r9, r14
 9f4:	91 1a       	sub	r9, r17
 9f6:	1e 2d       	mov	r17, r14
 9f8:	05 c0       	rjmp	.+10     	; 0xa04 <vfprintf+0x30e>
 9fa:	80 e2       	ldi	r24, 0x20	; 32
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	b3 01       	movw	r22, r6
 a00:	66 d0       	rcall	.+204    	; 0xace <fputc>
 a02:	1f 5f       	subi	r17, 0xFF	; 255
 a04:	1e 15       	cp	r17, r14
 a06:	c8 f3       	brcs	.-14     	; 0x9fa <vfprintf+0x304>
 a08:	04 c0       	rjmp	.+8      	; 0xa12 <vfprintf+0x31c>
 a0a:	1e 15       	cp	r17, r14
 a0c:	10 f4       	brcc	.+4      	; 0xa12 <vfprintf+0x31c>
 a0e:	e1 1a       	sub	r14, r17
 a10:	01 c0       	rjmp	.+2      	; 0xa14 <vfprintf+0x31e>
 a12:	ee 24       	eor	r14, r14
 a14:	04 ff       	sbrs	r16, 4
 a16:	0e c0       	rjmp	.+28     	; 0xa34 <vfprintf+0x33e>
 a18:	80 e3       	ldi	r24, 0x30	; 48
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	b3 01       	movw	r22, r6
 a1e:	57 d0       	rcall	.+174    	; 0xace <fputc>
 a20:	02 ff       	sbrs	r16, 2
 a22:	1b c0       	rjmp	.+54     	; 0xa5a <vfprintf+0x364>
 a24:	01 fd       	sbrc	r16, 1
 a26:	03 c0       	rjmp	.+6      	; 0xa2e <vfprintf+0x338>
 a28:	88 e7       	ldi	r24, 0x78	; 120
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e c0       	rjmp	.+28     	; 0xa4a <vfprintf+0x354>
 a2e:	88 e5       	ldi	r24, 0x58	; 88
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	0b c0       	rjmp	.+22     	; 0xa4a <vfprintf+0x354>
 a34:	80 2f       	mov	r24, r16
 a36:	86 78       	andi	r24, 0x86	; 134
 a38:	81 f0       	breq	.+32     	; 0xa5a <vfprintf+0x364>
 a3a:	01 ff       	sbrs	r16, 1
 a3c:	02 c0       	rjmp	.+4      	; 0xa42 <vfprintf+0x34c>
 a3e:	8b e2       	ldi	r24, 0x2B	; 43
 a40:	01 c0       	rjmp	.+2      	; 0xa44 <vfprintf+0x34e>
 a42:	80 e2       	ldi	r24, 0x20	; 32
 a44:	f7 fc       	sbrc	r15, 7
 a46:	8d e2       	ldi	r24, 0x2D	; 45
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	b3 01       	movw	r22, r6
 a4c:	40 d0       	rcall	.+128    	; 0xace <fputc>
 a4e:	05 c0       	rjmp	.+10     	; 0xa5a <vfprintf+0x364>
 a50:	80 e3       	ldi	r24, 0x30	; 48
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	b3 01       	movw	r22, r6
 a56:	3b d0       	rcall	.+118    	; 0xace <fputc>
 a58:	9a 94       	dec	r9
 a5a:	d9 14       	cp	r13, r9
 a5c:	c8 f3       	brcs	.-14     	; 0xa50 <vfprintf+0x35a>
 a5e:	da 94       	dec	r13
 a60:	f1 01       	movw	r30, r2
 a62:	ed 0d       	add	r30, r13
 a64:	f1 1d       	adc	r31, r1
 a66:	80 81       	ld	r24, Z
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	b3 01       	movw	r22, r6
 a6c:	30 d0       	rcall	.+96     	; 0xace <fputc>
 a6e:	dd 20       	and	r13, r13
 a70:	b1 f7       	brne	.-20     	; 0xa5e <vfprintf+0x368>
 a72:	05 c0       	rjmp	.+10     	; 0xa7e <vfprintf+0x388>
 a74:	80 e2       	ldi	r24, 0x20	; 32
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	b3 01       	movw	r22, r6
 a7a:	29 d0       	rcall	.+82     	; 0xace <fputc>
 a7c:	ea 94       	dec	r14
 a7e:	ee 20       	and	r14, r14
 a80:	c9 f7       	brne	.-14     	; 0xa74 <vfprintf+0x37e>
 a82:	50 ce       	rjmp	.-864    	; 0x724 <vfprintf+0x2e>
 a84:	f3 01       	movw	r30, r6
 a86:	66 81       	ldd	r22, Z+6	; 0x06
 a88:	77 81       	ldd	r23, Z+7	; 0x07
 a8a:	cb 01       	movw	r24, r22
 a8c:	2b 96       	adiw	r28, 0x0b	; 11
 a8e:	e2 e1       	ldi	r30, 0x12	; 18
 a90:	c4 c0       	rjmp	.+392    	; 0xc1a <__epilogue_restores__>

00000a92 <__eerd_byte_m8>:
 a92:	e1 99       	sbic	0x1c, 1	; 28
 a94:	fe cf       	rjmp	.-4      	; 0xa92 <__eerd_byte_m8>
 a96:	9f bb       	out	0x1f, r25	; 31
 a98:	8e bb       	out	0x1e, r24	; 30
 a9a:	e0 9a       	sbi	0x1c, 0	; 28
 a9c:	99 27       	eor	r25, r25
 a9e:	8d b3       	in	r24, 0x1d	; 29
 aa0:	08 95       	ret

00000aa2 <strnlen_P>:
 aa2:	fc 01       	movw	r30, r24
 aa4:	05 90       	lpm	r0, Z+
 aa6:	61 50       	subi	r22, 0x01	; 1
 aa8:	70 40       	sbci	r23, 0x00	; 0
 aaa:	01 10       	cpse	r0, r1
 aac:	d8 f7       	brcc	.-10     	; 0xaa4 <strnlen_P+0x2>
 aae:	80 95       	com	r24
 ab0:	90 95       	com	r25
 ab2:	8e 0f       	add	r24, r30
 ab4:	9f 1f       	adc	r25, r31
 ab6:	08 95       	ret

00000ab8 <strnlen>:
 ab8:	fc 01       	movw	r30, r24
 aba:	61 50       	subi	r22, 0x01	; 1
 abc:	70 40       	sbci	r23, 0x00	; 0
 abe:	01 90       	ld	r0, Z+
 ac0:	01 10       	cpse	r0, r1
 ac2:	d8 f7       	brcc	.-10     	; 0xaba <strnlen+0x2>
 ac4:	80 95       	com	r24
 ac6:	90 95       	com	r25
 ac8:	8e 0f       	add	r24, r30
 aca:	9f 1f       	adc	r25, r31
 acc:	08 95       	ret

00000ace <fputc>:
 ace:	0f 93       	push	r16
 ad0:	1f 93       	push	r17
 ad2:	cf 93       	push	r28
 ad4:	df 93       	push	r29
 ad6:	8c 01       	movw	r16, r24
 ad8:	eb 01       	movw	r28, r22
 ada:	8b 81       	ldd	r24, Y+3	; 0x03
 adc:	81 ff       	sbrs	r24, 1
 ade:	1b c0       	rjmp	.+54     	; 0xb16 <fputc+0x48>
 ae0:	82 ff       	sbrs	r24, 2
 ae2:	0d c0       	rjmp	.+26     	; 0xafe <fputc+0x30>
 ae4:	2e 81       	ldd	r18, Y+6	; 0x06
 ae6:	3f 81       	ldd	r19, Y+7	; 0x07
 ae8:	8c 81       	ldd	r24, Y+4	; 0x04
 aea:	9d 81       	ldd	r25, Y+5	; 0x05
 aec:	28 17       	cp	r18, r24
 aee:	39 07       	cpc	r19, r25
 af0:	64 f4       	brge	.+24     	; 0xb0a <fputc+0x3c>
 af2:	e8 81       	ld	r30, Y
 af4:	f9 81       	ldd	r31, Y+1	; 0x01
 af6:	01 93       	st	Z+, r16
 af8:	f9 83       	std	Y+1, r31	; 0x01
 afa:	e8 83       	st	Y, r30
 afc:	06 c0       	rjmp	.+12     	; 0xb0a <fputc+0x3c>
 afe:	e8 85       	ldd	r30, Y+8	; 0x08
 b00:	f9 85       	ldd	r31, Y+9	; 0x09
 b02:	80 2f       	mov	r24, r16
 b04:	09 95       	icall
 b06:	89 2b       	or	r24, r25
 b08:	31 f4       	brne	.+12     	; 0xb16 <fputc+0x48>
 b0a:	8e 81       	ldd	r24, Y+6	; 0x06
 b0c:	9f 81       	ldd	r25, Y+7	; 0x07
 b0e:	01 96       	adiw	r24, 0x01	; 1
 b10:	9f 83       	std	Y+7, r25	; 0x07
 b12:	8e 83       	std	Y+6, r24	; 0x06
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <fputc+0x4c>
 b16:	0f ef       	ldi	r16, 0xFF	; 255
 b18:	1f ef       	ldi	r17, 0xFF	; 255
 b1a:	c8 01       	movw	r24, r16
 b1c:	df 91       	pop	r29
 b1e:	cf 91       	pop	r28
 b20:	1f 91       	pop	r17
 b22:	0f 91       	pop	r16
 b24:	08 95       	ret

00000b26 <__ultoa_invert>:
 b26:	fa 01       	movw	r30, r20
 b28:	aa 27       	eor	r26, r26
 b2a:	28 30       	cpi	r18, 0x08	; 8
 b2c:	51 f1       	breq	.+84     	; 0xb82 <__ultoa_invert+0x5c>
 b2e:	20 31       	cpi	r18, 0x10	; 16
 b30:	81 f1       	breq	.+96     	; 0xb92 <__ultoa_invert+0x6c>
 b32:	e8 94       	clt
 b34:	6f 93       	push	r22
 b36:	6e 7f       	andi	r22, 0xFE	; 254
 b38:	6e 5f       	subi	r22, 0xFE	; 254
 b3a:	7f 4f       	sbci	r23, 0xFF	; 255
 b3c:	8f 4f       	sbci	r24, 0xFF	; 255
 b3e:	9f 4f       	sbci	r25, 0xFF	; 255
 b40:	af 4f       	sbci	r26, 0xFF	; 255
 b42:	b1 e0       	ldi	r27, 0x01	; 1
 b44:	3e d0       	rcall	.+124    	; 0xbc2 <__ultoa_invert+0x9c>
 b46:	b4 e0       	ldi	r27, 0x04	; 4
 b48:	3c d0       	rcall	.+120    	; 0xbc2 <__ultoa_invert+0x9c>
 b4a:	67 0f       	add	r22, r23
 b4c:	78 1f       	adc	r23, r24
 b4e:	89 1f       	adc	r24, r25
 b50:	9a 1f       	adc	r25, r26
 b52:	a1 1d       	adc	r26, r1
 b54:	68 0f       	add	r22, r24
 b56:	79 1f       	adc	r23, r25
 b58:	8a 1f       	adc	r24, r26
 b5a:	91 1d       	adc	r25, r1
 b5c:	a1 1d       	adc	r26, r1
 b5e:	6a 0f       	add	r22, r26
 b60:	71 1d       	adc	r23, r1
 b62:	81 1d       	adc	r24, r1
 b64:	91 1d       	adc	r25, r1
 b66:	a1 1d       	adc	r26, r1
 b68:	20 d0       	rcall	.+64     	; 0xbaa <__ultoa_invert+0x84>
 b6a:	09 f4       	brne	.+2      	; 0xb6e <__ultoa_invert+0x48>
 b6c:	68 94       	set
 b6e:	3f 91       	pop	r19
 b70:	2a e0       	ldi	r18, 0x0A	; 10
 b72:	26 9f       	mul	r18, r22
 b74:	11 24       	eor	r1, r1
 b76:	30 19       	sub	r19, r0
 b78:	30 5d       	subi	r19, 0xD0	; 208
 b7a:	31 93       	st	Z+, r19
 b7c:	de f6       	brtc	.-74     	; 0xb34 <__ultoa_invert+0xe>
 b7e:	cf 01       	movw	r24, r30
 b80:	08 95       	ret
 b82:	46 2f       	mov	r20, r22
 b84:	47 70       	andi	r20, 0x07	; 7
 b86:	40 5d       	subi	r20, 0xD0	; 208
 b88:	41 93       	st	Z+, r20
 b8a:	b3 e0       	ldi	r27, 0x03	; 3
 b8c:	0f d0       	rcall	.+30     	; 0xbac <__ultoa_invert+0x86>
 b8e:	c9 f7       	brne	.-14     	; 0xb82 <__ultoa_invert+0x5c>
 b90:	f6 cf       	rjmp	.-20     	; 0xb7e <__ultoa_invert+0x58>
 b92:	46 2f       	mov	r20, r22
 b94:	4f 70       	andi	r20, 0x0F	; 15
 b96:	40 5d       	subi	r20, 0xD0	; 208
 b98:	4a 33       	cpi	r20, 0x3A	; 58
 b9a:	18 f0       	brcs	.+6      	; 0xba2 <__ultoa_invert+0x7c>
 b9c:	49 5d       	subi	r20, 0xD9	; 217
 b9e:	31 fd       	sbrc	r19, 1
 ba0:	40 52       	subi	r20, 0x20	; 32
 ba2:	41 93       	st	Z+, r20
 ba4:	02 d0       	rcall	.+4      	; 0xbaa <__ultoa_invert+0x84>
 ba6:	a9 f7       	brne	.-22     	; 0xb92 <__ultoa_invert+0x6c>
 ba8:	ea cf       	rjmp	.-44     	; 0xb7e <__ultoa_invert+0x58>
 baa:	b4 e0       	ldi	r27, 0x04	; 4
 bac:	a6 95       	lsr	r26
 bae:	97 95       	ror	r25
 bb0:	87 95       	ror	r24
 bb2:	77 95       	ror	r23
 bb4:	67 95       	ror	r22
 bb6:	ba 95       	dec	r27
 bb8:	c9 f7       	brne	.-14     	; 0xbac <__ultoa_invert+0x86>
 bba:	00 97       	sbiw	r24, 0x00	; 0
 bbc:	61 05       	cpc	r22, r1
 bbe:	71 05       	cpc	r23, r1
 bc0:	08 95       	ret
 bc2:	9b 01       	movw	r18, r22
 bc4:	ac 01       	movw	r20, r24
 bc6:	0a 2e       	mov	r0, r26
 bc8:	06 94       	lsr	r0
 bca:	57 95       	ror	r21
 bcc:	47 95       	ror	r20
 bce:	37 95       	ror	r19
 bd0:	27 95       	ror	r18
 bd2:	ba 95       	dec	r27
 bd4:	c9 f7       	brne	.-14     	; 0xbc8 <__ultoa_invert+0xa2>
 bd6:	62 0f       	add	r22, r18
 bd8:	73 1f       	adc	r23, r19
 bda:	84 1f       	adc	r24, r20
 bdc:	95 1f       	adc	r25, r21
 bde:	a0 1d       	adc	r26, r0
 be0:	08 95       	ret

00000be2 <__prologue_saves__>:
 be2:	2f 92       	push	r2
 be4:	3f 92       	push	r3
 be6:	4f 92       	push	r4
 be8:	5f 92       	push	r5
 bea:	6f 92       	push	r6
 bec:	7f 92       	push	r7
 bee:	8f 92       	push	r8
 bf0:	9f 92       	push	r9
 bf2:	af 92       	push	r10
 bf4:	bf 92       	push	r11
 bf6:	cf 92       	push	r12
 bf8:	df 92       	push	r13
 bfa:	ef 92       	push	r14
 bfc:	ff 92       	push	r15
 bfe:	0f 93       	push	r16
 c00:	1f 93       	push	r17
 c02:	cf 93       	push	r28
 c04:	df 93       	push	r29
 c06:	cd b7       	in	r28, 0x3d	; 61
 c08:	de b7       	in	r29, 0x3e	; 62
 c0a:	ca 1b       	sub	r28, r26
 c0c:	db 0b       	sbc	r29, r27
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	de bf       	out	0x3e, r29	; 62
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	cd bf       	out	0x3d, r28	; 61
 c18:	09 94       	ijmp

00000c1a <__epilogue_restores__>:
 c1a:	2a 88       	ldd	r2, Y+18	; 0x12
 c1c:	39 88       	ldd	r3, Y+17	; 0x11
 c1e:	48 88       	ldd	r4, Y+16	; 0x10
 c20:	5f 84       	ldd	r5, Y+15	; 0x0f
 c22:	6e 84       	ldd	r6, Y+14	; 0x0e
 c24:	7d 84       	ldd	r7, Y+13	; 0x0d
 c26:	8c 84       	ldd	r8, Y+12	; 0x0c
 c28:	9b 84       	ldd	r9, Y+11	; 0x0b
 c2a:	aa 84       	ldd	r10, Y+10	; 0x0a
 c2c:	b9 84       	ldd	r11, Y+9	; 0x09
 c2e:	c8 84       	ldd	r12, Y+8	; 0x08
 c30:	df 80       	ldd	r13, Y+7	; 0x07
 c32:	ee 80       	ldd	r14, Y+6	; 0x06
 c34:	fd 80       	ldd	r15, Y+5	; 0x05
 c36:	0c 81       	ldd	r16, Y+4	; 0x04
 c38:	1b 81       	ldd	r17, Y+3	; 0x03
 c3a:	aa 81       	ldd	r26, Y+2	; 0x02
 c3c:	b9 81       	ldd	r27, Y+1	; 0x01
 c3e:	ce 0f       	add	r28, r30
 c40:	d1 1d       	adc	r29, r1
 c42:	0f b6       	in	r0, 0x3f	; 63
 c44:	f8 94       	cli
 c46:	de bf       	out	0x3e, r29	; 62
 c48:	0f be       	out	0x3f, r0	; 63
 c4a:	cd bf       	out	0x3d, r28	; 61
 c4c:	ed 01       	movw	r28, r26
 c4e:	08 95       	ret

00000c50 <_exit>:
 c50:	f8 94       	cli

00000c52 <__stop_program>:
 c52:	ff cf       	rjmp	.-2      	; 0xc52 <__stop_program>
