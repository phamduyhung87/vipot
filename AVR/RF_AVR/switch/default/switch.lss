
switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  000012f0  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  0080016a  0080016a  0000148e  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  0000148e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ea  00000000  00000000  0000150e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015d1  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000644  00000000  00000000  00002cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010bb  00000000  00000000  0000330d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000043c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000273  00000000  00000000  00004568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002473  00000000  00000000  000047db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00006c4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	f6 c5       	rjmp	.+3052   	; 0xc04 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 ef       	ldi	r30, 0xF0	; 240
      3a:	f2 e1       	ldi	r31, 0x12	; 18
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	aa 36       	cpi	r26, 0x6A	; 106
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	11 e0       	ldi	r17, 0x01	; 1
      4a:	aa e6       	ldi	r26, 0x6A	; 106
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	ae 39       	cpi	r26, 0x9E	; 158
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	e0 d0       	rcall	.+448    	; 0x21a <main>
      5a:	48 c9       	rjmp	.-3440   	; 0xfffff2ec <__eeprom_end+0xff7ef2ec>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <gpioInit>:
	return 0;
}

void gpioInit(void){
	//set ouput pin
	DDRB = (1<<LED)|(1<<RF_OUT);
      5e:	85 e0       	ldi	r24, 0x05	; 5
      60:	87 bb       	out	0x17, r24	; 23
	DDRD = (1<<LIGHT1)|(1<<LIGHT2)|(1<<LIGHT3)|(1<<LIGHT4)|(1<<LIGHT5)|(1<<LIGHT6);
      62:	8c ef       	ldi	r24, 0xFC	; 252
      64:	81 bb       	out	0x11, r24	; 17
	I_LED(0);
      66:	c2 98       	cbi	0x18, 2	; 24
	//initial input pin to High
	PORTC = (1<<SW1)|(1<<SW2)|(1<<SW3)|(1<<SW4)|(1<<SW5)|(1<<SW6); // Light
      68:	8f e3       	ldi	r24, 0x3F	; 63
      6a:	85 bb       	out	0x15, r24	; 21
	PORTB = (1<<LED); //User button
      6c:	84 e0       	ldi	r24, 0x04	; 4
      6e:	88 bb       	out	0x18, r24	; 24
	PORTD |= (1<<0); // get code button
      70:	90 9a       	sbi	0x12, 0	; 18
}
      72:	08 95       	ret

00000074 <scene>:
	else
	{
		printf("code = %c%c%c%c%c%c\n", code[0], code[1], code[2], code[3], code[4], code[5]);
	}
}
void scene(unsigned char * str, uint8_t len){
      74:	ef 92       	push	r14
      76:	ff 92       	push	r15
      78:	0f 93       	push	r16
      7a:	1f 93       	push	r17
      7c:	cf 93       	push	r28
      7e:	df 93       	push	r29
      80:	7c 01       	movw	r14, r24
      82:	16 2f       	mov	r17, r22
	uint8_t port = 0;
	printf("scene: ");
      84:	00 d0       	rcall	.+0      	; 0x86 <scene+0x12>
      86:	80 e6       	ldi	r24, 0x60	; 96
      88:	90 e0       	ldi	r25, 0x00	; 0
      8a:	ed b7       	in	r30, 0x3d	; 61
      8c:	fe b7       	in	r31, 0x3e	; 62
      8e:	92 83       	std	Z+2, r25	; 0x02
      90:	81 83       	std	Z+1, r24	; 0x01
      92:	25 d6       	rcall	.+3146   	; 0xcde <printf>
	printptr(str,len);
      94:	c1 2f       	mov	r28, r17
      96:	d0 e0       	ldi	r29, 0x00	; 0
      98:	0f 90       	pop	r0
      9a:	0f 90       	pop	r0
      9c:	c7 01       	movw	r24, r14
      9e:	be 01       	movw	r22, r28
      a0:	34 d5       	rcall	.+2664   	; 0xb0a <printptr>
	printf("\n");
      a2:	8a e0       	ldi	r24, 0x0A	; 10
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	2d d6       	rcall	.+3162   	; 0xd02 <putchar>
      a8:	10 e0       	ldi	r17, 0x00	; 0
      aa:	20 e0       	ldi	r18, 0x00	; 0
      ac:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < len; i++){
		port = 10*port + (str[i] - '0');
      ae:	9a e0       	ldi	r25, 0x0A	; 10
      b0:	0b c0       	rjmp	.+22     	; 0xc8 <scene+0x54>
      b2:	19 9f       	mul	r17, r25
      b4:	80 2d       	mov	r24, r0
      b6:	11 24       	eor	r1, r1
      b8:	f7 01       	movw	r30, r14
      ba:	e2 0f       	add	r30, r18
      bc:	f3 1f       	adc	r31, r19
      be:	10 81       	ld	r17, Z
      c0:	10 53       	subi	r17, 0x30	; 48
      c2:	18 0f       	add	r17, r24
void scene(unsigned char * str, uint8_t len){
	uint8_t port = 0;
	printf("scene: ");
	printptr(str,len);
	printf("\n");
	for (int i = 0; i < len; i++){
      c4:	2f 5f       	subi	r18, 0xFF	; 255
      c6:	3f 4f       	sbci	r19, 0xFF	; 255
      c8:	2c 17       	cp	r18, r28
      ca:	3d 07       	cpc	r19, r29
      cc:	94 f3       	brlt	.-28     	; 0xb2 <scene+0x3e>
		port = 10*port + (str[i] - '0');
	}
	printf("%d\n",port);
      ce:	01 2f       	mov	r16, r17
      d0:	00 d0       	rcall	.+0      	; 0xd2 <scene+0x5e>
      d2:	00 d0       	rcall	.+0      	; 0xd4 <scene+0x60>
      d4:	88 e6       	ldi	r24, 0x68	; 104
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	ed b7       	in	r30, 0x3d	; 61
      da:	fe b7       	in	r31, 0x3e	; 62
      dc:	92 83       	std	Z+2, r25	; 0x02
      de:	81 83       	std	Z+1, r24	; 0x01
      e0:	13 83       	std	Z+3, r17	; 0x03
      e2:	14 82       	std	Z+4, r1	; 0x04
      e4:	fc d5       	rcall	.+3064   	; 0xcde <printf>
	if (port&(1<<7))
      e6:	0f 90       	pop	r0
      e8:	0f 90       	pop	r0
      ea:	0f 90       	pop	r0
      ec:	0f 90       	pop	r0
      ee:	17 ff       	sbrs	r17, 7
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <scene+0x82>
		{P_OUT (LIGHT1,1);}
      f2:	92 9a       	sbi	0x12, 2	; 18
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <scene+0x84>
	else
		{P_OUT (LIGHT1,0);}
      f6:	92 98       	cbi	0x12, 2	; 18
	
	if (port&(1<<6))
      f8:	06 ff       	sbrs	r16, 6
      fa:	02 c0       	rjmp	.+4      	; 0x100 <scene+0x8c>
		P_OUT (LIGHT2,1);
      fc:	93 9a       	sbi	0x12, 3	; 18
      fe:	01 c0       	rjmp	.+2      	; 0x102 <scene+0x8e>
	else
		P_OUT (LIGHT2,0);
     100:	93 98       	cbi	0x12, 3	; 18
	
	if (port&(1<<5))
     102:	05 ff       	sbrs	r16, 5
     104:	02 c0       	rjmp	.+4      	; 0x10a <scene+0x96>
		P_OUT (LIGHT3,1);
     106:	94 9a       	sbi	0x12, 4	; 18
     108:	01 c0       	rjmp	.+2      	; 0x10c <scene+0x98>
	else
		P_OUT (LIGHT3,0);
     10a:	94 98       	cbi	0x12, 4	; 18
	
	if (port&(1<<4))
     10c:	04 ff       	sbrs	r16, 4
     10e:	02 c0       	rjmp	.+4      	; 0x114 <scene+0xa0>
		P_OUT (LIGHT4,1);
     110:	95 9a       	sbi	0x12, 5	; 18
     112:	01 c0       	rjmp	.+2      	; 0x116 <scene+0xa2>
	else
		P_OUT (LIGHT4,0);
     114:	95 98       	cbi	0x12, 5	; 18
	
	if (port&(1<<3))
     116:	03 ff       	sbrs	r16, 3
     118:	02 c0       	rjmp	.+4      	; 0x11e <scene+0xaa>
		P_OUT (LIGHT5,1);
     11a:	96 9a       	sbi	0x12, 6	; 18
     11c:	01 c0       	rjmp	.+2      	; 0x120 <scene+0xac>
	else
		P_OUT (LIGHT5,0);
     11e:	96 98       	cbi	0x12, 6	; 18
	
	if (port&(1<<2))
     120:	02 ff       	sbrs	r16, 2
     122:	02 c0       	rjmp	.+4      	; 0x128 <scene+0xb4>
		P_OUT (LIGHT6,1);
     124:	97 9a       	sbi	0x12, 7	; 18
     126:	01 c0       	rjmp	.+2      	; 0x12a <scene+0xb6>
	else
		P_OUT (LIGHT6,0);
     128:	97 98       	cbi	0x12, 7	; 18
}
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	1f 91       	pop	r17
     130:	0f 91       	pop	r16
     132:	ff 90       	pop	r15
     134:	ef 90       	pop	r14
     136:	08 95       	ret

00000138 <getCode>:
	//initial input pin to High
	PORTC = (1<<SW1)|(1<<SW2)|(1<<SW3)|(1<<SW4)|(1<<SW5)|(1<<SW6); // Light
	PORTB = (1<<LED); //User button
	PORTD |= (1<<0); // get code button
}
void getCode(void){
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
	// Khai bao cac mang chua du lieu can truyen di
//	char str[COMMAND + 1];

	// Nhan code tu bo nho EPPROM
	for (int i = 0; i < COMMAND; i++){
		code [i] = (unsigned char) eeprom_read_byte (Mcode + i);
     140:	80 91 43 01 	lds	r24, 0x0143
     144:	c0 e0       	ldi	r28, 0x00	; 0
     146:	d0 e0       	ldi	r29, 0x00	; 0
     148:	08 2f       	mov	r16, r24
     14a:	10 e0       	ldi	r17, 0x00	; 0
     14c:	ce 01       	movw	r24, r28
     14e:	80 0f       	add	r24, r16
     150:	91 1f       	adc	r25, r17
     152:	e0 d7       	rcall	.+4032   	; 0x1114 <__eerd_byte_m8>
     154:	fe 01       	movw	r30, r28
     156:	e6 59       	subi	r30, 0x96	; 150
     158:	fe 4f       	sbci	r31, 0xFE	; 254
     15a:	80 83       	st	Z, r24
void getCode(void){
	// Khai bao cac mang chua du lieu can truyen di
//	char str[COMMAND + 1];

	// Nhan code tu bo nho EPPROM
	for (int i = 0; i < COMMAND; i++){
     15c:	21 96       	adiw	r28, 0x01	; 1
     15e:	c6 30       	cpi	r28, 0x06	; 6
     160:	d1 05       	cpc	r29, r1
     162:	a1 f7       	brne	.-24     	; 0x14c <getCode+0x14>
		code [i] = (unsigned char) eeprom_read_byte (Mcode + i);
	}
	code [6] = 0;
     164:	10 92 70 01 	sts	0x0170, r1

	if ((code [0] == 0xFF)&&(code [1] == 0xFF)&&(code [2] == 0xFF))
     168:	20 91 6a 01 	lds	r18, 0x016A
     16c:	2f 3f       	cpi	r18, 0xFF	; 255
     16e:	f1 f4       	brne	.+60     	; 0x1ac <getCode+0x74>
     170:	80 91 6b 01 	lds	r24, 0x016B
     174:	8f 3f       	cpi	r24, 0xFF	; 255
     176:	d1 f4       	brne	.+52     	; 0x1ac <getCode+0x74>
     178:	80 91 6c 01 	lds	r24, 0x016C
     17c:	8f 3f       	cpi	r24, 0xFF	; 255
     17e:	b1 f4       	brne	.+44     	; 0x1ac <getCode+0x74>
	{
	//	set_default();
		code [0] = 'a';
     180:	81 e6       	ldi	r24, 0x61	; 97
     182:	80 93 6a 01 	sts	0x016A, r24
		code [1] = 'b'; 
     186:	82 e6       	ldi	r24, 0x62	; 98
     188:	80 93 6b 01 	sts	0x016B, r24
		code [2] = 'c';
     18c:	83 e6       	ldi	r24, 0x63	; 99
     18e:	80 93 6c 01 	sts	0x016C, r24
		code [3] = 'd';
     192:	84 e6       	ldi	r24, 0x64	; 100
     194:	80 93 6d 01 	sts	0x016D, r24
		code [4] = 'e'; 
     198:	85 e6       	ldi	r24, 0x65	; 101
     19a:	80 93 6e 01 	sts	0x016E, r24
		code [5] = 'f';
     19e:	86 e6       	ldi	r24, 0x66	; 102
     1a0:	80 93 6f 01 	sts	0x016F, r24
		printf("code = default = abcdef\n");
     1a4:	8c e6       	ldi	r24, 0x6C	; 108
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	b2 d5       	rcall	.+2916   	; 0xd0e <puts>
     1aa:	32 c0       	rjmp	.+100    	; 0x210 <getCode+0xd8>
	}
	else
	{
		printf("code = %c%c%c%c%c%c\n", code[0], code[1], code[2], code[3], code[4], code[5]);
     1ac:	8d b7       	in	r24, 0x3d	; 61
     1ae:	9e b7       	in	r25, 0x3e	; 62
     1b0:	0e 97       	sbiw	r24, 0x0e	; 14
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	9e bf       	out	0x3e, r25	; 62
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	8d bf       	out	0x3d, r24	; 61
     1bc:	ed b7       	in	r30, 0x3d	; 61
     1be:	fe b7       	in	r31, 0x3e	; 62
     1c0:	31 96       	adiw	r30, 0x01	; 1
     1c2:	84 e8       	ldi	r24, 0x84	; 132
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	ad b7       	in	r26, 0x3d	; 61
     1c8:	be b7       	in	r27, 0x3e	; 62
     1ca:	12 96       	adiw	r26, 0x02	; 2
     1cc:	9c 93       	st	X, r25
     1ce:	8e 93       	st	-X, r24
     1d0:	11 97       	sbiw	r26, 0x01	; 1
     1d2:	22 83       	std	Z+2, r18	; 0x02
     1d4:	13 82       	std	Z+3, r1	; 0x03
     1d6:	80 91 6b 01 	lds	r24, 0x016B
     1da:	84 83       	std	Z+4, r24	; 0x04
     1dc:	15 82       	std	Z+5, r1	; 0x05
     1de:	80 91 6c 01 	lds	r24, 0x016C
     1e2:	86 83       	std	Z+6, r24	; 0x06
     1e4:	17 82       	std	Z+7, r1	; 0x07
     1e6:	80 91 6d 01 	lds	r24, 0x016D
     1ea:	80 87       	std	Z+8, r24	; 0x08
     1ec:	11 86       	std	Z+9, r1	; 0x09
     1ee:	80 91 6e 01 	lds	r24, 0x016E
     1f2:	82 87       	std	Z+10, r24	; 0x0a
     1f4:	13 86       	std	Z+11, r1	; 0x0b
     1f6:	80 91 6f 01 	lds	r24, 0x016F
     1fa:	84 87       	std	Z+12, r24	; 0x0c
     1fc:	15 86       	std	Z+13, r1	; 0x0d
     1fe:	6f d5       	rcall	.+2782   	; 0xcde <printf>
     200:	8d b7       	in	r24, 0x3d	; 61
     202:	9e b7       	in	r25, 0x3e	; 62
     204:	0e 96       	adiw	r24, 0x0e	; 14
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	9e bf       	out	0x3e, r25	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	8d bf       	out	0x3d, r24	; 61
	}
}
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	08 95       	ret

0000021a <main>:
	else
		P_OUT (LIGHT6,0);
}

int main(void)
{
     21a:	2f 92       	push	r2
     21c:	3f 92       	push	r3
     21e:	4f 92       	push	r4
     220:	5f 92       	push	r5
     222:	6f 92       	push	r6
     224:	7f 92       	push	r7
     226:	8f 92       	push	r8
     228:	9f 92       	push	r9
     22a:	af 92       	push	r10
     22c:	bf 92       	push	r11
     22e:	cf 92       	push	r12
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	df 93       	push	r29
     23c:	cf 93       	push	r28
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	2f 97       	sbiw	r28, 0x0f	; 15
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	de bf       	out	0x3e, r29	; 62
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	cd bf       	out	0x3d, r28	; 61
	// Khoi tao PORT IN/OUT
	gpioInit();
     24e:	07 df       	rcall	.-498    	; 0x5e <gpioInit>
	// Khoi tao uart
	uartInit();
     250:	4c d4       	rcall	.+2200   	; 0xaea <uartInit>
	I_LED(ON);
     252:	c2 98       	cbi	0x18, 2	; 24
	printf("Start\n");
     254:	89 e9       	ldi	r24, 0x99	; 153
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	5a d5       	rcall	.+2740   	; 0xd0e <puts>
	I_LED(OFF);
     25a:	c2 9a       	sbi	0x18, 2	; 24
	getCode();
     25c:	6d df       	rcall	.-294    	; 0x138 <getCode>
	sw1 = sw_1;
     25e:	83 b3       	in	r24, 0x13	; 19
     260:	81 70       	andi	r24, 0x01	; 1
     262:	80 93 44 01 	sts	0x0144, r24
	sw2 = sw_2;
     266:	83 b3       	in	r24, 0x13	; 19
     268:	82 70       	andi	r24, 0x02	; 2
     26a:	80 93 45 01 	sts	0x0145, r24
	sw3 = sw_3;
     26e:	83 b3       	in	r24, 0x13	; 19
     270:	84 70       	andi	r24, 0x04	; 4
     272:	80 93 46 01 	sts	0x0146, r24
	sw4 = sw_4;
     276:	83 b3       	in	r24, 0x13	; 19
     278:	88 70       	andi	r24, 0x08	; 8
     27a:	80 93 47 01 	sts	0x0147, r24
	sw5 = sw_5;
     27e:	83 b3       	in	r24, 0x13	; 19
     280:	80 71       	andi	r24, 0x10	; 16
     282:	80 93 48 01 	sts	0x0148, r24
	sw6 = sw_6;
     286:	83 b3       	in	r24, 0x13	; 19
     288:	80 72       	andi	r24, 0x20	; 32
     28a:	80 93 49 01 	sts	0x0149, r24
	
	while (1)
	{
		// Nhan duoc du lieu
		//printf("\n%d",PIND);
		rf_len = M_Get_Frame(str,15);
     28e:	6e 01       	movw	r12, r28
     290:	08 94       	sec
     292:	c1 1c       	adc	r12, r1
     294:	d1 1c       	adc	r13, r1
					coderf[i] = str[i];
					}
					coderf[6]++;
				}
				else{
					if (findstr((char)coderf,COMMAND,str,COMMAND)!=(-1))
     296:	51 e7       	ldi	r21, 0x71	; 113
     298:	a5 2e       	mov	r10, r21
     29a:	51 e0       	ldi	r21, 0x01	; 1
     29c:	b5 2e       	mov	r11, r21
						for (int i = 0 ; i < COMMAND; i++){
							eeprom_write_byte (Mcode + i, str[i]);
						}
						code[6]=0;
						I_LED(OFF);
						printf("new code = %c%c%c%c%c%c\n", str[0],str[1],str[2],str[3],str[4],str[5]);
     29e:	4f e9       	ldi	r20, 0x9F	; 159
     2a0:	84 2e       	mov	r8, r20
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	94 2e       	mov	r9, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2a6:	38 ec       	ldi	r19, 0xC8	; 200
     2a8:	e3 2e       	mov	r14, r19
     2aa:	f1 2c       	mov	r15, r1
			}
			if ((sw_6 &&(sw6 == 0)) || ((sw_6 == 0) &&(sw6)))
			{
				I_LED(ON);
				_delay_ms(100);
				printf("\nL6");
     2ac:	2b e3       	ldi	r18, 0x3B	; 59
     2ae:	62 2e       	mov	r6, r18
     2b0:	21 e0       	ldi	r18, 0x01	; 1
     2b2:	72 2e       	mov	r7, r18

			if ((sw_5 &&(sw5 == 0)) || ((sw_5 == 0) &&(sw5)))
			{
				I_LED(ON);
				_delay_ms(100);
				printf("\nL5");
     2b4:	97 e3       	ldi	r25, 0x37	; 55
     2b6:	49 2e       	mov	r4, r25
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	59 2e       	mov	r5, r25
			}
			if ((sw_4 &&(sw4 == 0)) || ((sw_4 == 0) &&(sw4)))
			{
				I_LED(ON);
				_delay_ms(100);
				printf("\nL4");
     2bc:	83 e3       	ldi	r24, 0x33	; 51
     2be:	28 2e       	mov	r2, r24
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	38 2e       	mov	r3, r24
	
	while (1)
	{
		// Nhan duoc du lieu
		//printf("\n%d",PIND);
		rf_len = M_Get_Frame(str,15);
     2c4:	c6 01       	movw	r24, r12
     2c6:	6f e0       	ldi	r22, 0x0F	; 15
     2c8:	80 d3       	rcall	.+1792   	; 0x9ca <M_Get_Frame>
     2ca:	18 2f       	mov	r17, r24
		
		if(!get_code){
     2cc:	80 99       	sbic	0x10, 0	; 16
     2ce:	87 c0       	rjmp	.+270    	; 0x3de <main+0x1c4>
			I_LED(ON);
     2d0:	c2 98       	cbi	0x18, 2	; 24
			if(rf_len){
     2d2:	88 23       	and	r24, r24
     2d4:	b9 f3       	breq	.-18     	; 0x2c4 <main+0xaa>
				if (coderf[6]==0){
     2d6:	80 91 77 01 	lds	r24, 0x0177
     2da:	88 23       	and	r24, r24
     2dc:	b1 f4       	brne	.+44     	; 0x30a <main+0xf0>
					for (int i = 0; i < COMMAND; i++){
					coderf[i] = str[i];
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	80 93 71 01 	sts	0x0171, r24
     2e4:	8a 81       	ldd	r24, Y+2	; 0x02
     2e6:	80 93 72 01 	sts	0x0172, r24
     2ea:	8b 81       	ldd	r24, Y+3	; 0x03
     2ec:	80 93 73 01 	sts	0x0173, r24
     2f0:	8c 81       	ldd	r24, Y+4	; 0x04
     2f2:	80 93 74 01 	sts	0x0174, r24
     2f6:	8d 81       	ldd	r24, Y+5	; 0x05
     2f8:	80 93 75 01 	sts	0x0175, r24
     2fc:	8e 81       	ldd	r24, Y+6	; 0x06
     2fe:	80 93 76 01 	sts	0x0176, r24
					}
					coderf[6]++;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 93 77 01 	sts	0x0177, r24
     308:	dd cf       	rjmp	.-70     	; 0x2c4 <main+0xaa>
				}
				else{
					if (findstr((char)coderf,COMMAND,str,COMMAND)!=(-1))
     30a:	8a 2d       	mov	r24, r10
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	66 e0       	ldi	r22, 0x06	; 6
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	a6 01       	movw	r20, r12
     314:	26 e0       	ldi	r18, 0x06	; 6
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	1c d4       	rcall	.+2104   	; 0xb52 <findstr>
     31a:	8f 5f       	subi	r24, 0xFF	; 255
     31c:	9f 4f       	sbci	r25, 0xFF	; 255
     31e:	31 f0       	breq	.+12     	; 0x32c <main+0x112>
						coderf[6]++;
     320:	80 91 77 01 	lds	r24, 0x0177
     324:	8f 5f       	subi	r24, 0xFF	; 255
     326:	80 93 77 01 	sts	0x0177, r24
     32a:	02 c0       	rjmp	.+4      	; 0x330 <main+0x116>
					else
						coderf[6]=0;
     32c:	10 92 77 01 	sts	0x0177, r1
					if (coderf[6]==3){
     330:	80 91 77 01 	lds	r24, 0x0177
     334:	83 30       	cpi	r24, 0x03	; 3
     336:	31 f6       	brne	.-116    	; 0x2c4 <main+0xaa>
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
						for (int i = 0 ; i < COMMAND; i++){
							eeprom_write_byte (Mcode + i, str[i]);
     33c:	80 91 43 01 	lds	r24, 0x0143
     340:	f6 01       	movw	r30, r12
     342:	e0 0f       	add	r30, r16
     344:	f1 1f       	adc	r31, r17
     346:	d8 01       	movw	r26, r16
     348:	a8 0f       	add	r26, r24
     34a:	b1 1d       	adc	r27, r1
     34c:	cd 01       	movw	r24, r26
     34e:	60 81       	ld	r22, Z
     350:	e9 d6       	rcall	.+3538   	; 0x1124 <__eewr_byte_m8>
					if (findstr((char)coderf,COMMAND,str,COMMAND)!=(-1))
						coderf[6]++;
					else
						coderf[6]=0;
					if (coderf[6]==3){
						for (int i = 0 ; i < COMMAND; i++){
     352:	0f 5f       	subi	r16, 0xFF	; 255
     354:	1f 4f       	sbci	r17, 0xFF	; 255
     356:	06 30       	cpi	r16, 0x06	; 6
     358:	11 05       	cpc	r17, r1
     35a:	81 f7       	brne	.-32     	; 0x33c <main+0x122>
							eeprom_write_byte (Mcode + i, str[i]);
						}
						code[6]=0;
     35c:	10 92 70 01 	sts	0x0170, r1
						I_LED(OFF);
     360:	c2 9a       	sbi	0x18, 2	; 24
						printf("new code = %c%c%c%c%c%c\n", str[0],str[1],str[2],str[3],str[4],str[5]);
     362:	ed b7       	in	r30, 0x3d	; 61
     364:	fe b7       	in	r31, 0x3e	; 62
     366:	3e 97       	sbiw	r30, 0x0e	; 14
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	fe bf       	out	0x3e, r31	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	ed bf       	out	0x3d, r30	; 61
     372:	31 96       	adiw	r30, 0x01	; 1
     374:	ad b7       	in	r26, 0x3d	; 61
     376:	be b7       	in	r27, 0x3e	; 62
     378:	12 96       	adiw	r26, 0x02	; 2
     37a:	9c 92       	st	X, r9
     37c:	8e 92       	st	-X, r8
     37e:	11 97       	sbiw	r26, 0x01	; 1
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	82 83       	std	Z+2, r24	; 0x02
     384:	13 82       	std	Z+3, r1	; 0x03
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	84 83       	std	Z+4, r24	; 0x04
     38a:	15 82       	std	Z+5, r1	; 0x05
     38c:	8b 81       	ldd	r24, Y+3	; 0x03
     38e:	86 83       	std	Z+6, r24	; 0x06
     390:	17 82       	std	Z+7, r1	; 0x07
     392:	8c 81       	ldd	r24, Y+4	; 0x04
     394:	80 87       	std	Z+8, r24	; 0x08
     396:	11 86       	std	Z+9, r1	; 0x09
     398:	8d 81       	ldd	r24, Y+5	; 0x05
     39a:	82 87       	std	Z+10, r24	; 0x0a
     39c:	13 86       	std	Z+11, r1	; 0x0b
     39e:	8e 81       	ldd	r24, Y+6	; 0x06
     3a0:	84 87       	std	Z+12, r24	; 0x0c
     3a2:	15 86       	std	Z+13, r1	; 0x0d
     3a4:	9c d4       	rcall	.+2360   	; 0xcde <printf>
						printf("reset to apply changesss\n");
     3a6:	ed b7       	in	r30, 0x3d	; 61
     3a8:	fe b7       	in	r31, 0x3e	; 62
     3aa:	3e 96       	adiw	r30, 0x0e	; 14
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	fe bf       	out	0x3e, r31	; 62
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	ed bf       	out	0x3d, r30	; 61
     3b6:	88 eb       	ldi	r24, 0xB8	; 184
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	a9 d4       	rcall	.+2386   	; 0xd0e <puts>
						I_LED(ON);
     3bc:	c2 98       	cbi	0x18, 2	; 24
     3be:	88 ee       	ldi	r24, 0xE8	; 232
     3c0:	93 e0       	ldi	r25, 0x03	; 3
     3c2:	f7 01       	movw	r30, r14
     3c4:	31 97       	sbiw	r30, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <main+0x1aa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ca:	d9 f7       	brne	.-10     	; 0x3c2 <main+0x1a8>
						_delay_ms(100);
						I_LED(OFF);
     3cc:	c2 9a       	sbi	0x18, 2	; 24
     3ce:	80 e1       	ldi	r24, 0x10	; 16
     3d0:	97 e2       	ldi	r25, 0x27	; 39
     3d2:	f7 01       	movw	r30, r14
     3d4:	31 97       	sbiw	r30, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <main+0x1ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3da:	d9 f7       	brne	.-10     	; 0x3d2 <main+0x1b8>
     3dc:	73 cf       	rjmp	.-282    	; 0x2c4 <main+0xaa>
				}
			}
			rf_len = 0;
		}
		else {
			if(rf_len)
     3de:	88 23       	and	r24, r24
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <main+0x1ca>
     3e2:	73 c1       	rjmp	.+742    	; 0x6ca <__stack+0x26b>
			{
				I_LED(ON);
     3e4:	c2 98       	cbi	0x18, 2	; 24
				//printf("rf_len = %d\n",rf_len);
				printf("msg ");
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <main+0x1ce>
     3e8:	e1 ed       	ldi	r30, 0xD1	; 209
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	ad b7       	in	r26, 0x3d	; 61
     3ee:	be b7       	in	r27, 0x3e	; 62
     3f0:	12 96       	adiw	r26, 0x02	; 2
     3f2:	fc 93       	st	X, r31
     3f4:	ee 93       	st	-X, r30
     3f6:	11 97       	sbiw	r26, 0x01	; 1
     3f8:	72 d4       	rcall	.+2276   	; 0xcde <printf>
				printptr(str,rf_len);
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	c6 01       	movw	r24, r12
     400:	61 2f       	mov	r22, r17
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	82 d3       	rcall	.+1796   	; 0xb0a <printptr>
				printf("\r");
     406:	8d e0       	ldi	r24, 0x0D	; 13
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	7b d4       	rcall	.+2294   	; 0xd02 <putchar>
				if (findstr(code,COMMAND,str,COMMAND + 1)!=(-1))
     40c:	8a e6       	ldi	r24, 0x6A	; 106
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	66 e0       	ldi	r22, 0x06	; 6
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	a6 01       	movw	r20, r12
     416:	27 e0       	ldi	r18, 0x07	; 7
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	9b d3       	rcall	.+1846   	; 0xb52 <findstr>
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	9f 4f       	sbci	r25, 0xFF	; 255
     420:	09 f4       	brne	.+2      	; 0x424 <main+0x20a>
     422:	52 c1       	rjmp	.+676    	; 0x6c8 <__stack+0x269>
				{ 
					if (str[COMMAND] == '1')
     424:	8f 81       	ldd	r24, Y+7	; 0x07
     426:	81 33       	cpi	r24, 0x31	; 49
     428:	91 f4       	brne	.+36     	; 0x44e <main+0x234>
					{ P_TURN(LIGHT1);printf("L1\n"); _delay_ms(50);}
     42a:	92 b3       	in	r25, 0x12	; 18
     42c:	82 b3       	in	r24, 0x12	; 18
     42e:	80 95       	com	r24
     430:	84 70       	andi	r24, 0x04	; 4
     432:	9b 7f       	andi	r25, 0xFB	; 251
     434:	89 2b       	or	r24, r25
     436:	82 bb       	out	0x12, r24	; 18
     438:	86 ed       	ldi	r24, 0xD6	; 214
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	68 d4       	rcall	.+2256   	; 0xd0e <puts>
     43e:	84 ef       	ldi	r24, 0xF4	; 244
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	f7 01       	movw	r30, r14
     444:	31 97       	sbiw	r30, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <main+0x22a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     448:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     44a:	d9 f7       	brne	.-10     	; 0x442 <main+0x228>
     44c:	3d c1       	rjmp	.+634    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == '2')
     44e:	82 33       	cpi	r24, 0x32	; 50
     450:	91 f4       	brne	.+36     	; 0x476 <__stack+0x17>
				  	{ P_TURN(LIGHT2);printf("L2\n"); _delay_ms(50);}
     452:	92 b3       	in	r25, 0x12	; 18
     454:	82 b3       	in	r24, 0x12	; 18
     456:	80 95       	com	r24
     458:	88 70       	andi	r24, 0x08	; 8
     45a:	97 7f       	andi	r25, 0xF7	; 247
     45c:	89 2b       	or	r24, r25
     45e:	82 bb       	out	0x12, r24	; 18
     460:	89 ed       	ldi	r24, 0xD9	; 217
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	54 d4       	rcall	.+2216   	; 0xd0e <puts>
     466:	84 ef       	ldi	r24, 0xF4	; 244
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	f7 01       	movw	r30, r14
     46c:	31 97       	sbiw	r30, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <__stack+0xd>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     470:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     472:	d9 f7       	brne	.-10     	; 0x46a <__stack+0xb>
     474:	29 c1       	rjmp	.+594    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == '3')
     476:	83 33       	cpi	r24, 0x33	; 51
     478:	91 f4       	brne	.+36     	; 0x49e <__stack+0x3f>
				  	{ P_TURN(LIGHT3);printf("L3\n"); _delay_ms(50);}
     47a:	92 b3       	in	r25, 0x12	; 18
     47c:	82 b3       	in	r24, 0x12	; 18
     47e:	80 95       	com	r24
     480:	80 71       	andi	r24, 0x10	; 16
     482:	9f 7e       	andi	r25, 0xEF	; 239
     484:	89 2b       	or	r24, r25
     486:	82 bb       	out	0x12, r24	; 18
     488:	8c ed       	ldi	r24, 0xDC	; 220
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	40 d4       	rcall	.+2176   	; 0xd0e <puts>
     48e:	84 ef       	ldi	r24, 0xF4	; 244
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	f7 01       	movw	r30, r14
     494:	31 97       	sbiw	r30, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <__stack+0x35>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     498:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     49a:	d9 f7       	brne	.-10     	; 0x492 <__stack+0x33>
     49c:	15 c1       	rjmp	.+554    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == '4')
     49e:	84 33       	cpi	r24, 0x34	; 52
     4a0:	91 f4       	brne	.+36     	; 0x4c6 <__stack+0x67>
				  	{ P_TURN(LIGHT4);printf("L4\n"); _delay_ms(50);}
     4a2:	92 b3       	in	r25, 0x12	; 18
     4a4:	82 b3       	in	r24, 0x12	; 18
     4a6:	80 95       	com	r24
     4a8:	80 72       	andi	r24, 0x20	; 32
     4aa:	9f 7d       	andi	r25, 0xDF	; 223
     4ac:	89 2b       	or	r24, r25
     4ae:	82 bb       	out	0x12, r24	; 18
     4b0:	8f ed       	ldi	r24, 0xDF	; 223
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	2c d4       	rcall	.+2136   	; 0xd0e <puts>
     4b6:	84 ef       	ldi	r24, 0xF4	; 244
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	f7 01       	movw	r30, r14
     4bc:	31 97       	sbiw	r30, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <__stack+0x5d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4c2:	d9 f7       	brne	.-10     	; 0x4ba <__stack+0x5b>
     4c4:	01 c1       	rjmp	.+514    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == '5')
     4c6:	85 33       	cpi	r24, 0x35	; 53
     4c8:	91 f4       	brne	.+36     	; 0x4ee <__stack+0x8f>
				  	{ P_TURN(LIGHT5);printf("L5\n"); _delay_ms(50);}
     4ca:	92 b3       	in	r25, 0x12	; 18
     4cc:	82 b3       	in	r24, 0x12	; 18
     4ce:	80 95       	com	r24
     4d0:	80 74       	andi	r24, 0x40	; 64
     4d2:	9f 7b       	andi	r25, 0xBF	; 191
     4d4:	89 2b       	or	r24, r25
     4d6:	82 bb       	out	0x12, r24	; 18
     4d8:	82 ee       	ldi	r24, 0xE2	; 226
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	18 d4       	rcall	.+2096   	; 0xd0e <puts>
     4de:	84 ef       	ldi	r24, 0xF4	; 244
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	f7 01       	movw	r30, r14
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__stack+0x85>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ea:	d9 f7       	brne	.-10     	; 0x4e2 <__stack+0x83>
     4ec:	ed c0       	rjmp	.+474    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == '6')
     4ee:	86 33       	cpi	r24, 0x36	; 54
     4f0:	91 f4       	brne	.+36     	; 0x516 <__stack+0xb7>
				  	{ P_TURN(LIGHT6);printf("L6\n"); _delay_ms(50);}
     4f2:	92 b3       	in	r25, 0x12	; 18
     4f4:	82 b3       	in	r24, 0x12	; 18
     4f6:	80 95       	com	r24
     4f8:	80 78       	andi	r24, 0x80	; 128
     4fa:	9f 77       	andi	r25, 0x7F	; 127
     4fc:	89 2b       	or	r24, r25
     4fe:	82 bb       	out	0x12, r24	; 18
     500:	85 ee       	ldi	r24, 0xE5	; 229
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	04 d4       	rcall	.+2056   	; 0xd0e <puts>
     506:	84 ef       	ldi	r24, 0xF4	; 244
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	f7 01       	movw	r30, r14
     50c:	31 97       	sbiw	r30, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <__stack+0xad>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     510:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     512:	d9 f7       	brne	.-10     	; 0x50a <__stack+0xab>
     514:	d9 c0       	rjmp	.+434    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'a')
     516:	81 36       	cpi	r24, 0x61	; 97
     518:	61 f4       	brne	.+24     	; 0x532 <__stack+0xd3>
					{P_OUT (LIGHT1,0);printf("L10\n"); _delay_ms(50);}
     51a:	92 98       	cbi	0x12, 2	; 18
     51c:	88 ee       	ldi	r24, 0xE8	; 232
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	f6 d3       	rcall	.+2028   	; 0xd0e <puts>
     522:	84 ef       	ldi	r24, 0xF4	; 244
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	f7 01       	movw	r30, r14
     528:	31 97       	sbiw	r30, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <__stack+0xc9>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     52c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     52e:	d9 f7       	brne	.-10     	; 0x526 <__stack+0xc7>
     530:	cb c0       	rjmp	.+406    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'b')
     532:	82 36       	cpi	r24, 0x62	; 98
     534:	61 f4       	brne	.+24     	; 0x54e <__stack+0xef>
				  	{P_OUT (LIGHT2,0);printf("L20\n"); _delay_ms(50);}
     536:	93 98       	cbi	0x12, 3	; 18
     538:	8c ee       	ldi	r24, 0xEC	; 236
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	e8 d3       	rcall	.+2000   	; 0xd0e <puts>
     53e:	84 ef       	ldi	r24, 0xF4	; 244
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	f7 01       	movw	r30, r14
     544:	31 97       	sbiw	r30, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <__stack+0xe5>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     548:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     54a:	d9 f7       	brne	.-10     	; 0x542 <__stack+0xe3>
     54c:	bd c0       	rjmp	.+378    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'c')
     54e:	83 36       	cpi	r24, 0x63	; 99
     550:	61 f4       	brne	.+24     	; 0x56a <__stack+0x10b>
				  	{P_OUT (LIGHT3,0);printf("L30\n"); _delay_ms(50);}
     552:	94 98       	cbi	0x12, 4	; 18
     554:	80 ef       	ldi	r24, 0xF0	; 240
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	da d3       	rcall	.+1972   	; 0xd0e <puts>
     55a:	84 ef       	ldi	r24, 0xF4	; 244
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	f7 01       	movw	r30, r14
     560:	31 97       	sbiw	r30, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <__stack+0x101>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     564:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     566:	d9 f7       	brne	.-10     	; 0x55e <__stack+0xff>
     568:	af c0       	rjmp	.+350    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'd')
     56a:	84 36       	cpi	r24, 0x64	; 100
     56c:	61 f4       	brne	.+24     	; 0x586 <__stack+0x127>
				  	{P_OUT (LIGHT4,0);printf("L40\n"); _delay_ms(50);}
     56e:	95 98       	cbi	0x12, 5	; 18
     570:	84 ef       	ldi	r24, 0xF4	; 244
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	cc d3       	rcall	.+1944   	; 0xd0e <puts>
     576:	84 ef       	ldi	r24, 0xF4	; 244
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	f7 01       	movw	r30, r14
     57c:	31 97       	sbiw	r30, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <__stack+0x11d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     580:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     582:	d9 f7       	brne	.-10     	; 0x57a <__stack+0x11b>
     584:	a1 c0       	rjmp	.+322    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'e')
     586:	85 36       	cpi	r24, 0x65	; 101
     588:	61 f4       	brne	.+24     	; 0x5a2 <__stack+0x143>
				  	{P_OUT (LIGHT5,0);printf("L50\n"); _delay_ms(50);}
     58a:	96 98       	cbi	0x12, 6	; 18
     58c:	88 ef       	ldi	r24, 0xF8	; 248
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	be d3       	rcall	.+1916   	; 0xd0e <puts>
     592:	84 ef       	ldi	r24, 0xF4	; 244
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	f7 01       	movw	r30, r14
     598:	31 97       	sbiw	r30, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <__stack+0x139>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     59c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     59e:	d9 f7       	brne	.-10     	; 0x596 <__stack+0x137>
     5a0:	93 c0       	rjmp	.+294    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'f')
     5a2:	86 36       	cpi	r24, 0x66	; 102
     5a4:	61 f4       	brne	.+24     	; 0x5be <__stack+0x15f>
				  	{P_OUT (LIGHT6,0);printf("L60\n"); _delay_ms(50);}
     5a6:	97 98       	cbi	0x12, 7	; 18
     5a8:	8c ef       	ldi	r24, 0xFC	; 252
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	b0 d3       	rcall	.+1888   	; 0xd0e <puts>
     5ae:	84 ef       	ldi	r24, 0xF4	; 244
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	f7 01       	movw	r30, r14
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <__stack+0x155>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <__stack+0x153>
     5bc:	85 c0       	rjmp	.+266    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'A')
     5be:	81 34       	cpi	r24, 0x41	; 65
     5c0:	61 f4       	brne	.+24     	; 0x5da <__stack+0x17b>
					{P_OUT (LIGHT1,1);printf("L11\n"); _delay_ms(50);}
     5c2:	92 9a       	sbi	0x12, 2	; 18
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	a2 d3       	rcall	.+1860   	; 0xd0e <puts>
     5ca:	84 ef       	ldi	r24, 0xF4	; 244
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	f7 01       	movw	r30, r14
     5d0:	31 97       	sbiw	r30, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <__stack+0x171>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5d6:	d9 f7       	brne	.-10     	; 0x5ce <__stack+0x16f>
     5d8:	77 c0       	rjmp	.+238    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'B')
     5da:	82 34       	cpi	r24, 0x42	; 66
     5dc:	61 f4       	brne	.+24     	; 0x5f6 <__stack+0x197>
				  	{P_OUT (LIGHT2,1);printf("L21\n"); _delay_ms(50);}
     5de:	93 9a       	sbi	0x12, 3	; 18
     5e0:	84 e0       	ldi	r24, 0x04	; 4
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	94 d3       	rcall	.+1832   	; 0xd0e <puts>
     5e6:	84 ef       	ldi	r24, 0xF4	; 244
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	f7 01       	movw	r30, r14
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <__stack+0x18d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f2:	d9 f7       	brne	.-10     	; 0x5ea <__stack+0x18b>
     5f4:	69 c0       	rjmp	.+210    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'C')
     5f6:	83 34       	cpi	r24, 0x43	; 67
     5f8:	61 f4       	brne	.+24     	; 0x612 <__stack+0x1b3>
				  	{P_OUT (LIGHT3,1);printf("L31\n"); _delay_ms(50);}
     5fa:	94 9a       	sbi	0x12, 4	; 18
     5fc:	88 e0       	ldi	r24, 0x08	; 8
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	86 d3       	rcall	.+1804   	; 0xd0e <puts>
     602:	84 ef       	ldi	r24, 0xF4	; 244
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	f7 01       	movw	r30, r14
     608:	31 97       	sbiw	r30, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <__stack+0x1a9>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     60c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     60e:	d9 f7       	brne	.-10     	; 0x606 <__stack+0x1a7>
     610:	5b c0       	rjmp	.+182    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'D')
     612:	84 34       	cpi	r24, 0x44	; 68
     614:	61 f4       	brne	.+24     	; 0x62e <__stack+0x1cf>
				  	{P_OUT (LIGHT4,1);printf("L41\n"); _delay_ms(50);}
     616:	95 9a       	sbi	0x12, 5	; 18
     618:	8c e0       	ldi	r24, 0x0C	; 12
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	78 d3       	rcall	.+1776   	; 0xd0e <puts>
     61e:	84 ef       	ldi	r24, 0xF4	; 244
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	f7 01       	movw	r30, r14
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <__stack+0x1c5>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     628:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     62a:	d9 f7       	brne	.-10     	; 0x622 <__stack+0x1c3>
     62c:	4d c0       	rjmp	.+154    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'E')
     62e:	85 34       	cpi	r24, 0x45	; 69
     630:	61 f4       	brne	.+24     	; 0x64a <__stack+0x1eb>
				  	{P_OUT (LIGHT5,1);printf("L51\n"); _delay_ms(50);}
     632:	96 9a       	sbi	0x12, 6	; 18
     634:	80 e1       	ldi	r24, 0x10	; 16
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	6a d3       	rcall	.+1748   	; 0xd0e <puts>
     63a:	84 ef       	ldi	r24, 0xF4	; 244
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	f7 01       	movw	r30, r14
     640:	31 97       	sbiw	r30, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <__stack+0x1e1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     644:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     646:	d9 f7       	brne	.-10     	; 0x63e <__stack+0x1df>
     648:	3f c0       	rjmp	.+126    	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == 'F')
     64a:	86 34       	cpi	r24, 0x46	; 70
     64c:	61 f4       	brne	.+24     	; 0x666 <__stack+0x207>
				  	{P_OUT (LIGHT6,1);printf("L61\n"); _delay_ms(50);}
     64e:	97 9a       	sbi	0x12, 7	; 18
     650:	84 e1       	ldi	r24, 0x14	; 20
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	5c d3       	rcall	.+1720   	; 0xd0e <puts>
     656:	84 ef       	ldi	r24, 0xF4	; 244
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	f7 01       	movw	r30, r14
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <__stack+0x1fd>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     660:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     662:	d9 f7       	brne	.-10     	; 0x65a <__stack+0x1fb>
     664:	31 c0       	rjmp	.+98     	; 0x6c8 <__stack+0x269>
					else
					if (str[COMMAND] == '0'){
     666:	80 33       	cpi	r24, 0x30	; 48
     668:	89 f4       	brne	.+34     	; 0x68c <__stack+0x22d>
						printf("ALL-0\n");
     66a:	88 e1       	ldi	r24, 0x18	; 24
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	4f d3       	rcall	.+1694   	; 0xd0e <puts>
						P_OUT (LIGHT1,0);
     670:	92 98       	cbi	0x12, 2	; 18
						P_OUT (LIGHT2,0);
     672:	93 98       	cbi	0x12, 3	; 18
						P_OUT (LIGHT3,0);
     674:	94 98       	cbi	0x12, 4	; 18
						P_OUT (LIGHT4,0);
     676:	95 98       	cbi	0x12, 5	; 18
						P_OUT (LIGHT5,0);
     678:	96 98       	cbi	0x12, 6	; 18
						P_OUT (LIGHT6,0); 					
     67a:	97 98       	cbi	0x12, 7	; 18
     67c:	84 ef       	ldi	r24, 0xF4	; 244
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	f7 01       	movw	r30, r14
     682:	31 97       	sbiw	r30, 0x01	; 1
     684:	f1 f7       	brne	.-4      	; 0x682 <__stack+0x223>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     686:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     688:	d9 f7       	brne	.-10     	; 0x680 <__stack+0x221>
     68a:	12 c0       	rjmp	.+36     	; 0x6b0 <__stack+0x251>
						_delay_ms(50);
						sw2 = sw_2;
					}
					else
					if (str[COMMAND] == '9'){
     68c:	89 33       	cpi	r24, 0x39	; 57
     68e:	a9 f4       	brne	.+42     	; 0x6ba <__stack+0x25b>
						printf("ALL-1\n");
     690:	8e e1       	ldi	r24, 0x1E	; 30
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	3c d3       	rcall	.+1656   	; 0xd0e <puts>
						P_OUT (LIGHT1,1);
     696:	92 9a       	sbi	0x12, 2	; 18
						P_OUT (LIGHT2,1);
     698:	93 9a       	sbi	0x12, 3	; 18
						P_OUT (LIGHT3,1);
     69a:	94 9a       	sbi	0x12, 4	; 18
						P_OUT (LIGHT4,1);
     69c:	95 9a       	sbi	0x12, 5	; 18
						P_OUT (LIGHT5,1);
     69e:	96 9a       	sbi	0x12, 6	; 18
						P_OUT (LIGHT6,1); 
     6a0:	97 9a       	sbi	0x12, 7	; 18
     6a2:	84 ef       	ldi	r24, 0xF4	; 244
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	f7 01       	movw	r30, r14
     6a8:	31 97       	sbiw	r30, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <__stack+0x249>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6ae:	d9 f7       	brne	.-10     	; 0x6a6 <__stack+0x247>
						_delay_ms(50);
						sw2 = sw_2;
     6b0:	83 b3       	in	r24, 0x13	; 19
     6b2:	82 70       	andi	r24, 0x02	; 2
     6b4:	80 93 45 01 	sts	0x0145, r24
     6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <__stack+0x269>
					}
					else
					if (str[COMMAND] == '-'){
     6ba:	8d 32       	cpi	r24, 0x2D	; 45
     6bc:	29 f4       	brne	.+10     	; 0x6c8 <__stack+0x269>
						scene(str + COMMAND + 1,rf_len - COMMAND - 1);
     6be:	17 50       	subi	r17, 0x07	; 7
     6c0:	ce 01       	movw	r24, r28
     6c2:	08 96       	adiw	r24, 0x08	; 8
     6c4:	61 2f       	mov	r22, r17
     6c6:	d6 dc       	rcall	.-1620   	; 0x74 <scene>
					}
				}
				I_LED(OFF);
     6c8:	c2 9a       	sbi	0x18, 2	; 24
			}
			//printf("rf_len = %d\n",rf_len);
			//printf("sw 1 = %u\n",sw_1);
			//printf("sw 2 = %u\n",sw_2);
			if ((sw_1 &&(sw1 == 0)) || ((sw_1 == 0) &&(sw1)))
     6ca:	98 9b       	sbis	0x13, 0	; 19
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__stack+0x277>
     6ce:	80 91 44 01 	lds	r24, 0x0144
     6d2:	88 23       	and	r24, r24
     6d4:	31 f0       	breq	.+12     	; 0x6e2 <__stack+0x283>
     6d6:	98 99       	sbic	0x13, 0	; 19
     6d8:	2d c0       	rjmp	.+90     	; 0x734 <__stack+0x2d5>
     6da:	80 91 44 01 	lds	r24, 0x0144
     6de:	88 23       	and	r24, r24
     6e0:	49 f1       	breq	.+82     	; 0x734 <__stack+0x2d5>
			{
				I_LED(ON);
     6e2:	c2 98       	cbi	0x18, 2	; 24
     6e4:	88 ee       	ldi	r24, 0xE8	; 232
     6e6:	93 e0       	ldi	r25, 0x03	; 3
     6e8:	f7 01       	movw	r30, r14
     6ea:	31 97       	sbiw	r30, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <__stack+0x28b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6f0:	d9 f7       	brne	.-10     	; 0x6e8 <__stack+0x289>
				_delay_ms(100);
				printf("\nL1 %u", sw1);
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <__stack+0x295>
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <__stack+0x297>
     6f6:	ed b7       	in	r30, 0x3d	; 61
     6f8:	fe b7       	in	r31, 0x3e	; 62
     6fa:	31 96       	adiw	r30, 0x01	; 1
     6fc:	24 e2       	ldi	r18, 0x24	; 36
     6fe:	31 e0       	ldi	r19, 0x01	; 1
     700:	ad b7       	in	r26, 0x3d	; 61
     702:	be b7       	in	r27, 0x3e	; 62
     704:	12 96       	adiw	r26, 0x02	; 2
     706:	3c 93       	st	X, r19
     708:	2e 93       	st	-X, r18
     70a:	11 97       	sbiw	r26, 0x01	; 1
     70c:	80 91 44 01 	lds	r24, 0x0144
     710:	82 83       	std	Z+2, r24	; 0x02
     712:	13 82       	std	Z+3, r1	; 0x03
     714:	e4 d2       	rcall	.+1480   	; 0xcde <printf>
				sw1 = sw_1;
     716:	83 b3       	in	r24, 0x13	; 19
     718:	81 70       	andi	r24, 0x01	; 1
     71a:	80 93 44 01 	sts	0x0144, r24
				P_TURN(LIGHT1);
     71e:	92 b3       	in	r25, 0x12	; 18
     720:	82 b3       	in	r24, 0x12	; 18
     722:	80 95       	com	r24
     724:	84 70       	andi	r24, 0x04	; 4
     726:	9b 7f       	andi	r25, 0xFB	; 251
     728:	89 2b       	or	r24, r25
     72a:	82 bb       	out	0x12, r24	; 18
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
			}

			if ((sw_2 &&(sw2 == 0)) || ((sw_2 == 0) &&(sw2)))
     734:	99 9b       	sbis	0x13, 1	; 19
     736:	04 c0       	rjmp	.+8      	; 0x740 <__stack+0x2e1>
     738:	80 91 45 01 	lds	r24, 0x0145
     73c:	88 23       	and	r24, r24
     73e:	31 f0       	breq	.+12     	; 0x74c <__stack+0x2ed>
     740:	99 99       	sbic	0x13, 1	; 19
     742:	23 c0       	rjmp	.+70     	; 0x78a <__stack+0x32b>
     744:	80 91 45 01 	lds	r24, 0x0145
     748:	88 23       	and	r24, r24
     74a:	f9 f0       	breq	.+62     	; 0x78a <__stack+0x32b>
			{
				I_LED(ON);
     74c:	c2 98       	cbi	0x18, 2	; 24
     74e:	88 ee       	ldi	r24, 0xE8	; 232
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	f7 01       	movw	r30, r14
     754:	31 97       	sbiw	r30, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <__stack+0x2f5>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     758:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     75a:	d9 f7       	brne	.-10     	; 0x752 <__stack+0x2f3>
				_delay_ms(100);
				printf("\nL2");
     75c:	00 d0       	rcall	.+0      	; 0x75e <__stack+0x2ff>
     75e:	eb e2       	ldi	r30, 0x2B	; 43
     760:	f1 e0       	ldi	r31, 0x01	; 1
     762:	ad b7       	in	r26, 0x3d	; 61
     764:	be b7       	in	r27, 0x3e	; 62
     766:	12 96       	adiw	r26, 0x02	; 2
     768:	fc 93       	st	X, r31
     76a:	ee 93       	st	-X, r30
     76c:	11 97       	sbiw	r26, 0x01	; 1
     76e:	b7 d2       	rcall	.+1390   	; 0xcde <printf>
				sw2 = sw_2;
     770:	83 b3       	in	r24, 0x13	; 19
     772:	82 70       	andi	r24, 0x02	; 2
     774:	80 93 45 01 	sts	0x0145, r24
				P_TURN(LIGHT2);
     778:	92 b3       	in	r25, 0x12	; 18
     77a:	82 b3       	in	r24, 0x12	; 18
     77c:	80 95       	com	r24
     77e:	88 70       	andi	r24, 0x08	; 8
     780:	97 7f       	andi	r25, 0xF7	; 247
     782:	89 2b       	or	r24, r25
     784:	82 bb       	out	0x12, r24	; 18
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
			}
			if ((sw_3 &&(sw3 == 0)) || ((sw_3 == 0) &&(sw3)))
     78a:	9a 9b       	sbis	0x13, 2	; 19
     78c:	04 c0       	rjmp	.+8      	; 0x796 <__stack+0x337>
     78e:	80 91 46 01 	lds	r24, 0x0146
     792:	88 23       	and	r24, r24
     794:	31 f0       	breq	.+12     	; 0x7a2 <__stack+0x343>
     796:	9a 99       	sbic	0x13, 2	; 19
     798:	23 c0       	rjmp	.+70     	; 0x7e0 <__stack+0x381>
     79a:	80 91 46 01 	lds	r24, 0x0146
     79e:	88 23       	and	r24, r24
     7a0:	f9 f0       	breq	.+62     	; 0x7e0 <__stack+0x381>
			{
				I_LED(ON);
     7a2:	c2 98       	cbi	0x18, 2	; 24
     7a4:	88 ee       	ldi	r24, 0xE8	; 232
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	f7 01       	movw	r30, r14
     7aa:	31 97       	sbiw	r30, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <__stack+0x34b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b0:	d9 f7       	brne	.-10     	; 0x7a8 <__stack+0x349>
				_delay_ms(100);
				printf("\nL3");
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <__stack+0x355>
     7b4:	ef e2       	ldi	r30, 0x2F	; 47
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	ad b7       	in	r26, 0x3d	; 61
     7ba:	be b7       	in	r27, 0x3e	; 62
     7bc:	12 96       	adiw	r26, 0x02	; 2
     7be:	fc 93       	st	X, r31
     7c0:	ee 93       	st	-X, r30
     7c2:	11 97       	sbiw	r26, 0x01	; 1
     7c4:	8c d2       	rcall	.+1304   	; 0xcde <printf>
				sw3 = sw_3;
     7c6:	83 b3       	in	r24, 0x13	; 19
     7c8:	84 70       	andi	r24, 0x04	; 4
     7ca:	80 93 46 01 	sts	0x0146, r24
				P_TURN(LIGHT3);
     7ce:	92 b3       	in	r25, 0x12	; 18
     7d0:	82 b3       	in	r24, 0x12	; 18
     7d2:	80 95       	com	r24
     7d4:	80 71       	andi	r24, 0x10	; 16
     7d6:	9f 7e       	andi	r25, 0xEF	; 239
     7d8:	89 2b       	or	r24, r25
     7da:	82 bb       	out	0x12, r24	; 18
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
			}
			if ((sw_4 &&(sw4 == 0)) || ((sw_4 == 0) &&(sw4)))
     7e0:	9b 9b       	sbis	0x13, 3	; 19
     7e2:	04 c0       	rjmp	.+8      	; 0x7ec <__stack+0x38d>
     7e4:	80 91 47 01 	lds	r24, 0x0147
     7e8:	88 23       	and	r24, r24
     7ea:	31 f0       	breq	.+12     	; 0x7f8 <__stack+0x399>
     7ec:	9b 99       	sbic	0x13, 3	; 19
     7ee:	21 c0       	rjmp	.+66     	; 0x832 <__stack+0x3d3>
     7f0:	80 91 47 01 	lds	r24, 0x0147
     7f4:	88 23       	and	r24, r24
     7f6:	e9 f0       	breq	.+58     	; 0x832 <__stack+0x3d3>
			{
				I_LED(ON);
     7f8:	c2 98       	cbi	0x18, 2	; 24
     7fa:	88 ee       	ldi	r24, 0xE8	; 232
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	f7 01       	movw	r30, r14
     800:	31 97       	sbiw	r30, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <__stack+0x3a1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     804:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     806:	d9 f7       	brne	.-10     	; 0x7fe <__stack+0x39f>
				_delay_ms(100);
				printf("\nL4");
     808:	00 d0       	rcall	.+0      	; 0x80a <__stack+0x3ab>
     80a:	ad b7       	in	r26, 0x3d	; 61
     80c:	be b7       	in	r27, 0x3e	; 62
     80e:	12 96       	adiw	r26, 0x02	; 2
     810:	3c 92       	st	X, r3
     812:	2e 92       	st	-X, r2
     814:	11 97       	sbiw	r26, 0x01	; 1
     816:	63 d2       	rcall	.+1222   	; 0xcde <printf>
				sw4 = sw_4;
     818:	83 b3       	in	r24, 0x13	; 19
     81a:	88 70       	andi	r24, 0x08	; 8
     81c:	80 93 47 01 	sts	0x0147, r24
				P_TURN(LIGHT4);
     820:	92 b3       	in	r25, 0x12	; 18
     822:	82 b3       	in	r24, 0x12	; 18
     824:	80 95       	com	r24
     826:	80 72       	andi	r24, 0x20	; 32
     828:	9f 7d       	andi	r25, 0xDF	; 223
     82a:	89 2b       	or	r24, r25
     82c:	82 bb       	out	0x12, r24	; 18
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
			}

			if ((sw_5 &&(sw5 == 0)) || ((sw_5 == 0) &&(sw5)))
     832:	9c 9b       	sbis	0x13, 4	; 19
     834:	04 c0       	rjmp	.+8      	; 0x83e <__stack+0x3df>
     836:	80 91 48 01 	lds	r24, 0x0148
     83a:	88 23       	and	r24, r24
     83c:	31 f0       	breq	.+12     	; 0x84a <__stack+0x3eb>
     83e:	9c 99       	sbic	0x13, 4	; 19
     840:	1f c0       	rjmp	.+62     	; 0x880 <__stack+0x421>
     842:	80 91 48 01 	lds	r24, 0x0148
     846:	88 23       	and	r24, r24
     848:	d9 f0       	breq	.+54     	; 0x880 <__stack+0x421>
			{
				I_LED(ON);
     84a:	c2 98       	cbi	0x18, 2	; 24
     84c:	88 ee       	ldi	r24, 0xE8	; 232
     84e:	93 e0       	ldi	r25, 0x03	; 3
     850:	f7 01       	movw	r30, r14
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <__stack+0x3f3>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     856:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     858:	d9 f7       	brne	.-10     	; 0x850 <__stack+0x3f1>
				_delay_ms(100);
				printf("\nL5");
     85a:	00 d0       	rcall	.+0      	; 0x85c <__stack+0x3fd>
     85c:	ed b7       	in	r30, 0x3d	; 61
     85e:	fe b7       	in	r31, 0x3e	; 62
     860:	52 82       	std	Z+2, r5	; 0x02
     862:	41 82       	std	Z+1, r4	; 0x01
     864:	3c d2       	rcall	.+1144   	; 0xcde <printf>
				sw5 = sw_5;
     866:	83 b3       	in	r24, 0x13	; 19
     868:	80 71       	andi	r24, 0x10	; 16
     86a:	80 93 48 01 	sts	0x0148, r24
				P_TURN(LIGHT5);
     86e:	92 b3       	in	r25, 0x12	; 18
     870:	82 b3       	in	r24, 0x12	; 18
     872:	80 95       	com	r24
     874:	80 74       	andi	r24, 0x40	; 64
     876:	9f 7b       	andi	r25, 0xBF	; 191
     878:	89 2b       	or	r24, r25
     87a:	82 bb       	out	0x12, r24	; 18
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
			}
			if ((sw_6 &&(sw6 == 0)) || ((sw_6 == 0) &&(sw6)))
     880:	9d 9b       	sbis	0x13, 5	; 19
     882:	04 c0       	rjmp	.+8      	; 0x88c <__stack+0x42d>
     884:	80 91 49 01 	lds	r24, 0x0149
     888:	88 23       	and	r24, r24
     88a:	31 f0       	breq	.+12     	; 0x898 <__stack+0x439>
     88c:	9d 99       	sbic	0x13, 5	; 19
     88e:	21 c0       	rjmp	.+66     	; 0x8d2 <__stack+0x473>
     890:	80 91 49 01 	lds	r24, 0x0149
     894:	88 23       	and	r24, r24
     896:	e9 f0       	breq	.+58     	; 0x8d2 <__stack+0x473>
			{
				I_LED(ON);
     898:	c2 98       	cbi	0x18, 2	; 24
     89a:	88 ee       	ldi	r24, 0xE8	; 232
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	f7 01       	movw	r30, r14
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__stack+0x441>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8a6:	d9 f7       	brne	.-10     	; 0x89e <__stack+0x43f>
				_delay_ms(100);
				printf("\nL6");
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <__stack+0x44b>
     8aa:	ad b7       	in	r26, 0x3d	; 61
     8ac:	be b7       	in	r27, 0x3e	; 62
     8ae:	12 96       	adiw	r26, 0x02	; 2
     8b0:	7c 92       	st	X, r7
     8b2:	6e 92       	st	-X, r6
     8b4:	11 97       	sbiw	r26, 0x01	; 1
     8b6:	13 d2       	rcall	.+1062   	; 0xcde <printf>
				P_TURN(LIGHT6);
     8b8:	82 b3       	in	r24, 0x12	; 18
     8ba:	92 b3       	in	r25, 0x12	; 18
     8bc:	90 95       	com	r25
     8be:	90 78       	andi	r25, 0x80	; 128
     8c0:	8f 77       	andi	r24, 0x7F	; 127
     8c2:	98 2b       	or	r25, r24
     8c4:	92 bb       	out	0x12, r25	; 18
				sw6 = sw_6;
     8c6:	83 b3       	in	r24, 0x13	; 19
     8c8:	80 72       	andi	r24, 0x20	; 32
     8ca:	80 93 49 01 	sts	0x0149, r24
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
			}
			I_LED(OFF);
     8d2:	c2 9a       	sbi	0x18, 2	; 24
     8d4:	f7 cc       	rjmp	.-1554   	; 0x2c4 <main+0xaa>

000008d6 <uart_received>:
unsigned char sw4 = 1;
unsigned char sw5 = 1;
unsigned char sw6 = 1;

int uart_received (unsigned char * uart_command, unsigned int ilent)
{
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
     8e0:	16 2f       	mov	r17, r22
     8e2:	07 2f       	mov	r16, r23
	if(findstr("rf ",3,uart_command,ilent)!=(-1))
     8e4:	8f e3       	ldi	r24, 0x3F	; 63
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	63 e0       	ldi	r22, 0x03	; 3
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	ae 01       	movw	r20, r28
     8ee:	21 2f       	mov	r18, r17
     8f0:	30 2f       	mov	r19, r16
     8f2:	2f d1       	rcall	.+606    	; 0xb52 <findstr>
     8f4:	8f 5f       	subi	r24, 0xFF	; 255
     8f6:	9f 4f       	sbci	r25, 0xFF	; 255
     8f8:	79 f0       	breq	.+30     	; 0x918 <uart_received+0x42>
	{
		int i = findstr("rf ",3,uart_command,ilent);
     8fa:	8f e3       	ldi	r24, 0x3F	; 63
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	63 e0       	ldi	r22, 0x03	; 3
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	ae 01       	movw	r20, r28
     904:	21 2f       	mov	r18, r17
     906:	30 2f       	mov	r19, r16
     908:	24 d1       	rcall	.+584    	; 0xb52 <findstr>
		//printf("\n");
		//printptr(uart_command + 3 + i,ilent - 3 - i);
		M_Sent_Frame(uart_command + 3 + i,ilent - 3 - i);
     90a:	13 50       	subi	r17, 0x03	; 3
     90c:	18 1b       	sub	r17, r24
     90e:	03 96       	adiw	r24, 0x03	; 3
     910:	8c 0f       	add	r24, r28
     912:	9d 1f       	adc	r25, r29
     914:	61 2f       	mov	r22, r17
     916:	bf d0       	rcall	.+382    	; 0xa96 <M_Sent_Frame>
	}
	return 0;
}
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	08 95       	ret

00000926 <M_Get_Pulsestart>:
//==============================================================================
unsigned char M_Get_Pulsestart()
{
     unsigned int i;
//	 printf("\n%d",i);
	 if(Data_In)
     926:	b1 9b       	sbis	0x16, 1	; 22
     928:	18 c0       	rjmp	.+48     	; 0x95a <M_Get_Pulsestart+0x34>
	 {	
  	   if((Data_In));
     92a:	86 b3       	in	r24, 0x16	; 22
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	26 e2       	ldi	r18, 0x26	; 38
     932:	32 e0       	ldi	r19, 0x02	; 2
     934:	f9 01       	movw	r30, r18
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <M_Get_Pulsestart+0x10>
  		   for(i=0;i<35;i++)
 	 	   {
			  _delay_us(TIME);
 	         if((Data_In)==0) break;        
     93a:	b1 9b       	sbis	0x16, 1	; 22
     93c:	05 c0       	rjmp	.+10     	; 0x948 <M_Get_Pulsestart+0x22>
     unsigned int i;
//	 printf("\n%d",i);
	 if(Data_In)
	 {	
  	   if((Data_In));
  		   for(i=0;i<35;i++)
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	83 32       	cpi	r24, 0x23	; 35
     942:	91 05       	cpc	r25, r1
     944:	b9 f7       	brne	.-18     	; 0x934 <M_Get_Pulsestart+0xe>
     946:	09 c0       	rjmp	.+18     	; 0x95a <M_Get_Pulsestart+0x34>
 	 	   {
			  _delay_us(TIME);
 	         if((Data_In)==0) break;        
 		    }
			//printf("\n%d",i);
  	   if((i<29)&&(i>=0)) {return 0;}
     948:	8d 31       	cpi	r24, 0x1D	; 29
     94a:	91 05       	cpc	r25, r1
     94c:	30 f0       	brcs	.+12     	; 0x95a <M_Get_Pulsestart+0x34>
   		  else if (i>30) {return 0;}
     94e:	4f 97       	sbiw	r24, 0x1f	; 31
     950:	20 f4       	brcc	.+8      	; 0x95a <M_Get_Pulsestart+0x34>
  	   else { while((Data_In)==0); return 1;}
     952:	b1 9b       	sbis	0x16, 1	; 22
     954:	fe cf       	rjmp	.-4      	; 0x952 <M_Get_Pulsestart+0x2c>
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	08 95       	ret
     95a:	80 e0       	ldi	r24, 0x00	; 0
	}
	else return 0;

}
     95c:	08 95       	ret

0000095e <M_Get_Byte>:


//==============================================================================
unsigned char M_Get_Byte()
{
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	27 e0       	ldi	r18, 0x07	; 7
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	ec e4       	ldi	r30, 0x4C	; 76
     966:	f4 e0       	ldi	r31, 0x04	; 4
     for(i=0;i<8;i++)
     {       
		_delay_us(2*TIME);
		if ((Data_In))
		{
		  	data|=(1<<(7-i));	// nhan bit cao truoc
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	cf 01       	movw	r24, r30
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <M_Get_Byte+0x10>
     data=0;
	 
     for(i=0;i<8;i++)
     {       
		_delay_us(2*TIME);
		if ((Data_In))
     972:	b1 9b       	sbis	0x16, 1	; 22
     974:	0a c0       	rjmp	.+20     	; 0x98a <M_Get_Byte+0x2c>
		{
		  	data|=(1<<(7-i));	// nhan bit cao truoc
			while (Data_In);
     976:	b1 99       	sbic	0x16, 1	; 22
     978:	fe cf       	rjmp	.-4      	; 0x976 <M_Get_Byte+0x18>
     for(i=0;i<8;i++)
     {       
		_delay_us(2*TIME);
		if ((Data_In))
		{
		  	data|=(1<<(7-i));	// nhan bit cao truoc
     97a:	cb 01       	movw	r24, r22
     97c:	02 2e       	mov	r0, r18
     97e:	02 c0       	rjmp	.+4      	; 0x984 <M_Get_Byte+0x26>
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	0a 94       	dec	r0
     986:	e2 f7       	brpl	.-8      	; 0x980 <M_Get_Byte+0x22>
     988:	48 2b       	or	r20, r24
			while (Data_In);
		}
		while ((Data_In)==0);
     98a:	b1 9b       	sbis	0x16, 1	; 22
     98c:	fe cf       	rjmp	.-4      	; 0x98a <M_Get_Byte+0x2c>
     98e:	21 50       	subi	r18, 0x01	; 1
     990:	30 40       	sbci	r19, 0x00	; 0
unsigned char M_Get_Byte()
{
     unsigned char data,i;
     data=0;
	 
     for(i=0;i<8;i++)
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	2f 3f       	cpi	r18, 0xFF	; 255
     996:	38 07       	cpc	r19, r24
     998:	49 f7       	brne	.-46     	; 0x96c <M_Get_Byte+0xe>
			while (Data_In);
		}
		while ((Data_In)==0);
      }                  
     return data;
}
     99a:	84 2f       	mov	r24, r20
     99c:	08 95       	ret

0000099e <M_Get_Array>:

//==============================================================================
unsigned int M_Get_Array(unsigned char *array,unsigned char length)
{
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	06 2f       	mov	r16, r22
     9a8:	ec 01       	movw	r28, r24
     9aa:	10 e0       	ldi	r17, 0x00	; 0
     9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <M_Get_Array+0x1a>
     unsigned char i;
     for(i=0;i<length;i++)
     {
          array[i]=M_Get_Byte();
     9ae:	d7 df       	rcall	.-82     	; 0x95e <M_Get_Byte>
     9b0:	89 93       	st	Y+, r24
		  if (array[i] == '\r')
     9b2:	8d 30       	cpi	r24, 0x0D	; 13
     9b4:	19 f0       	breq	.+6      	; 0x9bc <M_Get_Array+0x1e>

//==============================================================================
unsigned int M_Get_Array(unsigned char *array,unsigned char length)
{
     unsigned char i;
     for(i=0;i<length;i++)
     9b6:	1f 5f       	subi	r17, 0xFF	; 255
     9b8:	10 17       	cp	r17, r16
     9ba:	c8 f3       	brcs	.-14     	; 0x9ae <M_Get_Array+0x10>
          array[i]=M_Get_Byte();
		  if (array[i] == '\r')
		  	return (i);
     }
	 return i;
}
     9bc:	81 2f       	mov	r24, r17
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	08 95       	ret

000009ca <M_Get_Frame>:

//==============================================================================
unsigned int M_Get_Frame(unsigned char *data, unsigned int length)
{
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	ec 01       	movw	r28, r24
     9d2:	16 2f       	mov	r17, r22
	 if (M_Get_Pulsestart())
     9d4:	a8 df       	rcall	.-176    	; 0x926 <M_Get_Pulsestart>
     9d6:	88 23       	and	r24, r24
     9d8:	19 f4       	brne	.+6      	; 0x9e0 <M_Get_Frame+0x16>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <M_Get_Frame+0x1e>
	 {
	 	
		unsigned int i = M_Get_Array(data,length);
     9e0:	ce 01       	movw	r24, r28
     9e2:	61 2f       	mov	r22, r17
     9e4:	dc df       	rcall	.-72     	; 0x99e <M_Get_Array>
     9e6:	9c 01       	movw	r18, r24
		return i;
	}	
	return 0;
	 	       
}
     9e8:	c9 01       	movw	r24, r18
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	08 95       	ret

000009f2 <M_Sent_Bit>:
/*
     Ma hoa Manchester:
     Bit 1 --> 10
     Bit 0 --> 01
*/
        if(i)  // toc do truyen 1K
     9f2:	88 23       	and	r24, r24
     9f4:	49 f0       	breq	.+18     	; 0xa08 <M_Sent_Bit+0x16>
        {
                M_Data_Out(1);
     9f6:	c0 9a       	sbi	0x18, 0	; 24
     9f8:	82 e7       	ldi	r24, 0x72	; 114
     9fa:	96 e0       	ldi	r25, 0x06	; 6
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <M_Sent_Bit+0xa>
                _delay_us(TIME*3);  
                M_Data_Out(0);
     a00:	c0 98       	cbi	0x18, 0	; 24
     a02:	86 e2       	ldi	r24, 0x26	; 38
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	08 c0       	rjmp	.+16     	; 0xa18 <M_Sent_Bit+0x26>
                _delay_us(TIME);
        }                     
        else   // toc do truyen 1K
        {
                M_Data_Out(1);
     a08:	c0 9a       	sbi	0x18, 0	; 24
     a0a:	86 e2       	ldi	r24, 0x26	; 38
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <M_Sent_Bit+0x1c>
                _delay_us(TIME);    
                M_Data_Out(0);
     a12:	c0 98       	cbi	0x18, 0	; 24
     a14:	82 e7       	ldi	r24, 0x72	; 114
     a16:	96 e0       	ldi	r25, 0x06	; 6
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <M_Sent_Bit+0x26>
     a1c:	08 95       	ret

00000a1e <M_Pulse_Start>:
        
}  
// ================================================
void M_Pulse_Start()    // Truyen bit 1 co toc do 4ms de bat dau khung truyen
{
 	M_Data_Out(1);
     a1e:	c0 9a       	sbi	0x18, 0	; 24
     a20:	84 e7       	ldi	r24, 0x74	; 116
     a22:	90 e4       	ldi	r25, 0x40	; 64
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <M_Pulse_Start+0x6>
	_delay_us(TIME*30);    
	M_Data_Out(0);
     a28:	c0 98       	cbi	0x18, 0	; 24
     a2a:	86 e2       	ldi	r24, 0x26	; 38
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	f1 f7       	brne	.-4      	; 0xa2e <M_Pulse_Start+0x10>
	_delay_us(TIME);
}                     
     a32:	08 95       	ret

00000a34 <M_Sent_Byte>:
 
// ================================================
void M_Sent_Byte(unsigned char byte)
{
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	f8 2e       	mov	r15, r24
     a40:	c0 e0       	ldi	r28, 0x00	; 0
     a42:	d0 e0       	ldi	r29, 0x00	; 0
        unsigned char temp,i;
        temp=byte;
        for(i=0;i<8;i++)
        {
               // M_Sent_Bit((temp>>i)&0x01);      truyen tu bit thap den bit cao
               M_Sent_Bit(temp&(0x80>>i));      // truyen tu bit cao den bit thap
     a44:	00 e8       	ldi	r16, 0x80	; 128
     a46:	10 e0       	ldi	r17, 0x00	; 0
     a48:	c8 01       	movw	r24, r16
     a4a:	0c 2e       	mov	r0, r28
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <M_Sent_Byte+0x1e>
     a4e:	95 95       	asr	r25
     a50:	87 95       	ror	r24
     a52:	0a 94       	dec	r0
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <M_Sent_Byte+0x1a>
     a56:	8f 21       	and	r24, r15
     a58:	cc df       	rcall	.-104    	; 0x9f2 <M_Sent_Bit>
     a5a:	21 96       	adiw	r28, 0x01	; 1
// ================================================
void M_Sent_Byte(unsigned char byte)
{
        unsigned char temp,i;
        temp=byte;
        for(i=0;i<8;i++)
     a5c:	c8 30       	cpi	r28, 0x08	; 8
     a5e:	d1 05       	cpc	r29, r1
     a60:	99 f7       	brne	.-26     	; 0xa48 <M_Sent_Byte+0x14>
        {
               // M_Sent_Bit((temp>>i)&0x01);      truyen tu bit thap den bit cao
               M_Sent_Bit(temp&(0x80>>i));      // truyen tu bit cao den bit thap
        }
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	08 95       	ret

00000a6e <M_Sent_Array>:

// ================================================
void M_Sent_Array(unsigned char *array,unsigned char length)
{
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	06 2f       	mov	r16, r22
     a78:	ec 01       	movw	r28, r24
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <M_Sent_Array+0x16>
        unsigned char i;
        for(i=0;i<length;i++)
        {
                M_Sent_Byte(array[i]);
     a7e:	89 91       	ld	r24, Y+
     a80:	d9 df       	rcall	.-78     	; 0xa34 <M_Sent_Byte>

// ================================================
void M_Sent_Array(unsigned char *array,unsigned char length)
{
        unsigned char i;
        for(i=0;i<length;i++)
     a82:	1f 5f       	subi	r17, 0xFF	; 255
     a84:	10 17       	cp	r17, r16
     a86:	d8 f3       	brcs	.-10     	; 0xa7e <M_Sent_Array+0x10>
        {
                M_Sent_Byte(array[i]);
        }
		M_Sent_Byte(13);
     a88:	8d e0       	ldi	r24, 0x0D	; 13
     a8a:	d4 df       	rcall	.-88     	; 0xa34 <M_Sent_Byte>
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	08 95       	ret

00000a96 <M_Sent_Frame>:

// ================================================
void M_Sent_Frame(unsigned char *data,unsigned char length)
{  
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	8c 01       	movw	r16, r24
     aa2:	d6 2e       	mov	r13, r22
//        M_Data_Start();
        M_Pulse_Start();
     aa4:	bc df       	rcall	.-136    	; 0xa1e <M_Pulse_Start>
       M_Sent_Array(data,length);
     aa6:	c8 01       	movw	r24, r16
     aa8:	6d 2d       	mov	r22, r13
     aaa:	e1 df       	rcall	.-62     	; 0xa6e <M_Sent_Array>
     aac:	82 e3       	ldi	r24, 0x32	; 50
     aae:	e8 2e       	mov	r14, r24
     ab0:	8b e4       	ldi	r24, 0x4B	; 75
     ab2:	f8 2e       	mov	r15, r24
     ab4:	c7 01       	movw	r24, r14
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <M_Sent_Frame+0x20>
		_delay_us(TIME*35);

		M_Pulse_Start();
     aba:	b1 df       	rcall	.-158    	; 0xa1e <M_Pulse_Start>
       M_Sent_Array(data,length);
     abc:	c8 01       	movw	r24, r16
     abe:	6d 2d       	mov	r22, r13
     ac0:	d6 df       	rcall	.-84     	; 0xa6e <M_Sent_Array>
     ac2:	c7 01       	movw	r24, r14
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <M_Sent_Frame+0x2e>
	   _delay_ms(10);


		M_Pulse_Start();
        M_Sent_Array(data,length);*/
}
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	08 95       	ret

00000ad4 <uart_char_tx>:
unsigned int count;
unsigned char command[30];
//unsigned int bl;

//chuong trinh con phat du lieu 
void uart_char_tx(unsigned char chr){ 
     ad4:	1f 93       	push	r17
     ad6:	18 2f       	mov	r17, r24
    if(chr == '\n') uart_char_tx('\r');
     ad8:	8a 30       	cpi	r24, 0x0A	; 10
     ada:	11 f4       	brne	.+4      	; 0xae0 <uart_char_tx+0xc>
     adc:	8d e0       	ldi	r24, 0x0D	; 13
     ade:	fa df       	rcall	.-12     	; 0xad4 <uart_char_tx>
	while (bit_is_clear(UCSRA,UDRE)) {}; //cho den khi bit UDRE=1     
     ae0:	5d 9b       	sbis	0x0b, 5	; 11
     ae2:	fe cf       	rjmp	.-4      	; 0xae0 <uart_char_tx+0xc>
            UDR=chr;
     ae4:	1c b9       	out	0x0c, r17	; 12
}
     ae6:	1f 91       	pop	r17
     ae8:	08 95       	ret

00000aea <uartInit>:

static FILE uartstd = FDEV_SETUP_STREAM(uart_char_tx, NULL, _FDEV_SETUP_WRITE);
void uartInit(void)
	{     
	//set baud, 9600 ung voi f=16Mhz, xem bang 70 trang 165, Atmega32 datasheet 
    UBRRH=0;     
     aea:	10 bc       	out	0x20, r1	; 32
    UBRRL=51;
     aec:	83 e3       	ldi	r24, 0x33	; 51
     aee:	89 b9       	out	0x09, r24	; 9
     
    //set khung truyen va kich hoat bo nhan du lieu 
    UCSRA=0x00; 
     af0:	1b b8       	out	0x0b, r1	; 11
    UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); 
     af2:	86 e8       	ldi	r24, 0x86	; 134
     af4:	80 bd       	out	0x20, r24	; 32
    UCSRB= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
     af6:	88 e9       	ldi	r24, 0x98	; 152
     af8:	8a b9       	out	0x0a, r24	; 10
	stdout = &uartstd;
     afa:	8b e5       	ldi	r24, 0x5B	; 91
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	90 93 9b 01 	sts	0x019B, r25
     b02:	80 93 9a 01 	sts	0x019A, r24
	sei();
     b06:	78 94       	sei
}
     b08:	08 95       	ret

00000b0a <printptr>:

void printptr ( unsigned char * pbuff, int ilent)
{
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	7c 01       	movw	r14, r24
     b18:	8b 01       	movw	r16, r22
     b1a:	c0 e0       	ldi	r28, 0x00	; 0
     b1c:	d0 e0       	ldi	r29, 0x00	; 0
     b1e:	06 c0       	rjmp	.+12     	; 0xb2c <printptr+0x22>
 	int i = 0;
	while (i<ilent)
	{
		uart_char_tx(pbuff[i]);
     b20:	f7 01       	movw	r30, r14
     b22:	ec 0f       	add	r30, r28
     b24:	fd 1f       	adc	r31, r29
     b26:	80 81       	ld	r24, Z
     b28:	d5 df       	rcall	.-86     	; 0xad4 <uart_char_tx>
		i++;
     b2a:	21 96       	adiw	r28, 0x01	; 1
}

void printptr ( unsigned char * pbuff, int ilent)
{
 	int i = 0;
	while (i<ilent)
     b2c:	c0 17       	cp	r28, r16
     b2e:	d1 07       	cpc	r29, r17
     b30:	bc f3       	brlt	.-18     	; 0xb20 <printptr+0x16>
	{
		uart_char_tx(pbuff[i]);
		i++;
	}

}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	08 95       	ret

00000b40 <proc>:
}

void proc()
{
		
}
     b40:	08 95       	ret

00000b42 <clear>:

void clear()
{
     b42:	e8 e7       	ldi	r30, 0x78	; 120
     b44:	f1 e0       	ldi	r31, 0x01	; 1
	for (int i = 0; i < 30; i++)
		command[i]= 0;
     b46:	11 92       	st	Z+, r1
		
}

void clear()
{
	for (int i = 0; i < 30; i++)
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	e6 39       	cpi	r30, 0x96	; 150
     b4c:	f8 07       	cpc	r31, r24
     b4e:	d9 f7       	brne	.-10     	; 0xb46 <clear+0x4>
		command[i]= 0;
}
     b50:	08 95       	ret

00000b52 <findstr>:

unsigned int findstr(char * str,unsigned int lens, unsigned char * buffer, unsigned int lenb)
{
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	4c 01       	movw	r8, r24
     b6c:	eb 01       	movw	r28, r22
     b6e:	5a 01       	movw	r10, r20
     b70:	69 01       	movw	r12, r18
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	50 e0       	ldi	r21, 0x00	; 0
	for(int i = 0; i <= lenb;i++)
	{
		for (int j = 0; j <= lens; j++)
		{
			if (str[j] != buffer[i+j])
				j = lens+1;
     b76:	7b 01       	movw	r14, r22
     b78:	08 94       	sec
     b7a:	e1 1c       	adc	r14, r1
     b7c:	f1 1c       	adc	r15, r1
			//printf("\n%u",j);
			if (j == lens - 1)
     b7e:	8b 01       	movw	r16, r22
     b80:	01 50       	subi	r16, 0x01	; 1
     b82:	10 40       	sbci	r17, 0x00	; 0
     b84:	16 c0       	rjmp	.+44     	; 0xbb2 <findstr+0x60>
{
	for(int i = 0; i <= lenb;i++)
	{
		for (int j = 0; j <= lens; j++)
		{
			if (str[j] != buffer[i+j])
     b86:	d4 01       	movw	r26, r8
     b88:	a2 0f       	add	r26, r18
     b8a:	b3 1f       	adc	r27, r19
     b8c:	f5 01       	movw	r30, r10
     b8e:	e2 0f       	add	r30, r18
     b90:	f3 1f       	adc	r31, r19
     b92:	e4 0f       	add	r30, r20
     b94:	f5 1f       	adc	r31, r21
     b96:	9c 91       	ld	r25, X
     b98:	80 81       	ld	r24, Z
     b9a:	98 13       	cpse	r25, r24
				j = lens+1;
     b9c:	97 01       	movw	r18, r14
			//printf("\n%u",j);
			if (j == lens - 1)
     b9e:	20 17       	cp	r18, r16
     ba0:	31 07       	cpc	r19, r17
     ba2:	81 f0       	breq	.+32     	; 0xbc4 <findstr+0x72>

unsigned int findstr(char * str,unsigned int lens, unsigned char * buffer, unsigned int lenb)
{
	for(int i = 0; i <= lenb;i++)
	{
		for (int j = 0; j <= lens; j++)
     ba4:	2f 5f       	subi	r18, 0xFF	; 255
     ba6:	3f 4f       	sbci	r19, 0xFF	; 255
     ba8:	c2 17       	cp	r28, r18
     baa:	d3 07       	cpc	r29, r19
     bac:	60 f7       	brcc	.-40     	; 0xb86 <findstr+0x34>
		command[i]= 0;
}

unsigned int findstr(char * str,unsigned int lens, unsigned char * buffer, unsigned int lenb)
{
	for(int i = 0; i <= lenb;i++)
     bae:	4f 5f       	subi	r20, 0xFF	; 255
     bb0:	5f 4f       	sbci	r21, 0xFF	; 255
     bb2:	ba 01       	movw	r22, r20
     bb4:	c4 16       	cp	r12, r20
     bb6:	d5 06       	cpc	r13, r21
     bb8:	18 f0       	brcs	.+6      	; 0xbc0 <findstr+0x6e>
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	f4 cf       	rjmp	.-24     	; 0xba8 <findstr+0x56>
     bc0:	6f ef       	ldi	r22, 0xFF	; 255
     bc2:	7f ef       	ldi	r23, 0xFF	; 255
				return i;
		}
		
	}
	return (-1);
}
     bc4:	cb 01       	movw	r24, r22
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	bf 90       	pop	r11
     bd8:	af 90       	pop	r10
     bda:	9f 90       	pop	r9
     bdc:	8f 90       	pop	r8
     bde:	08 95       	ret

00000be0 <is_command>:

int is_command(unsigned char * str)
{
     be0:	fc 01       	movw	r30, r24
     be2:	ab e7       	ldi	r26, 0x7B	; 123
     be4:	b1 e0       	ldi	r27, 0x01	; 1
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <is_command+0x16>
	int i = 0;
	while (str[i] != 0) {
		if (str[i] != command[i + 3])
     be8:	8d 91       	ld	r24, X+
     bea:	31 96       	adiw	r30, 0x01	; 1
     bec:	98 17       	cp	r25, r24
     bee:	19 f0       	breq	.+6      	; 0xbf6 <is_command+0x16>
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <is_command+0x20>
}

int is_command(unsigned char * str)
{
	int i = 0;
	while (str[i] != 0) {
     bf6:	90 81       	ld	r25, Z
     bf8:	99 23       	and	r25, r25
     bfa:	b1 f7       	brne	.-20     	; 0xbe8 <is_command+0x8>
     bfc:	21 e0       	ldi	r18, 0x01	; 1
     bfe:	30 e0       	ldi	r19, 0x00	; 0
		if (str[i] != command[i + 3])
			return 0;
		i++;
	}
	return 1;
}
     c00:	c9 01       	movw	r24, r18
     c02:	08 95       	ret

00000c04 <__vector_11>:
	}

}
		
ISR(SIG_UART_RECV)
{ //trinh phuc vu ngat USART hoan tat nhan  
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	4f 93       	push	r20
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
command [count+3] = UDR;
     c26:	60 91 96 01 	lds	r22, 0x0196
     c2a:	70 91 97 01 	lds	r23, 0x0197
     c2e:	8c b1       	in	r24, 0x0c	; 12
     c30:	fb 01       	movw	r30, r22
     c32:	e8 58       	subi	r30, 0x88	; 136
     c34:	fe 4f       	sbci	r31, 0xFE	; 254
     c36:	83 83       	std	Z+3, r24	; 0x03
//	printf("%u\r\n",command[count+3]);
	
	if (command [count+3]==13)
     c38:	8d 30       	cpi	r24, 0x0D	; 13
     c3a:	f9 f4       	brne	.+62     	; 0xc7a <__vector_11+0x76>
		{
			int er = uart_received(command +3,count);
     c3c:	8b e7       	ldi	r24, 0x7B	; 123
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	4a de       	rcall	.-876    	; 0x8d6 <uart_received>
			if (er) printf("\nBad Command\n-> ");
     c42:	89 2b       	or	r24, r25
     c44:	59 f0       	breq	.+22     	; 0xc5c <__vector_11+0x58>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <__vector_11+0x44>
     c48:	8a e4       	ldi	r24, 0x4A	; 74
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	ed b7       	in	r30, 0x3d	; 61
     c4e:	fe b7       	in	r31, 0x3e	; 62
     c50:	92 83       	std	Z+2, r25	; 0x02
     c52:	81 83       	std	Z+1, r24	; 0x01
     c54:	44 d0       	rcall	.+136    	; 0xcde <printf>
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	03 c0       	rjmp	.+6      	; 0xc62 <__vector_11+0x5e>
			else printf("\n");//printf("\n-> ");
     c5c:	8a e0       	ldi	r24, 0x0A	; 10
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	50 d0       	rcall	.+160    	; 0xd02 <putchar>
			count = 0;
     c62:	10 92 97 01 	sts	0x0197, r1
     c66:	10 92 96 01 	sts	0x0196, r1
     c6a:	e8 e7       	ldi	r30, 0x78	; 120
     c6c:	f1 e0       	ldi	r31, 0x01	; 1
}

void clear()
{
	for (int i = 0; i < 30; i++)
		command[i]= 0;
     c6e:	11 92       	st	Z+, r1
		
}

void clear()
{
	for (int i = 0; i < 30; i++)
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	e6 39       	cpi	r30, 0x96	; 150
     c74:	f8 07       	cpc	r31, r24
     c76:	d9 f7       	brne	.-10     	; 0xc6e <__vector_11+0x6a>
     c78:	0d c0       	rjmp	.+26     	; 0xc94 <__vector_11+0x90>
			count = 0;
			clear();
		}
	else 
	{
		uart_char_tx(command [count+3]);
     c7a:	2c df       	rcall	.-424    	; 0xad4 <uart_char_tx>
		count = (count + 1) %29;
     c7c:	80 91 96 01 	lds	r24, 0x0196
     c80:	90 91 97 01 	lds	r25, 0x0197
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	6d e1       	ldi	r22, 0x1D	; 29
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	15 d0       	rcall	.+42     	; 0xcb6 <__udivmodhi4>
     c8c:	90 93 97 01 	sts	0x0197, r25
     c90:	80 93 96 01 	sts	0x0196, r24
	}
}
     c94:	ff 91       	pop	r31
     c96:	ef 91       	pop	r30
     c98:	bf 91       	pop	r27
     c9a:	af 91       	pop	r26
     c9c:	9f 91       	pop	r25
     c9e:	8f 91       	pop	r24
     ca0:	7f 91       	pop	r23
     ca2:	6f 91       	pop	r22
     ca4:	5f 91       	pop	r21
     ca6:	4f 91       	pop	r20
     ca8:	3f 91       	pop	r19
     caa:	2f 91       	pop	r18
     cac:	0f 90       	pop	r0
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	0f 90       	pop	r0
     cb2:	1f 90       	pop	r1
     cb4:	18 95       	reti

00000cb6 <__udivmodhi4>:
     cb6:	aa 1b       	sub	r26, r26
     cb8:	bb 1b       	sub	r27, r27
     cba:	51 e1       	ldi	r21, 0x11	; 17
     cbc:	07 c0       	rjmp	.+14     	; 0xccc <__udivmodhi4_ep>

00000cbe <__udivmodhi4_loop>:
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	a6 17       	cp	r26, r22
     cc4:	b7 07       	cpc	r27, r23
     cc6:	10 f0       	brcs	.+4      	; 0xccc <__udivmodhi4_ep>
     cc8:	a6 1b       	sub	r26, r22
     cca:	b7 0b       	sbc	r27, r23

00000ccc <__udivmodhi4_ep>:
     ccc:	88 1f       	adc	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	5a 95       	dec	r21
     cd2:	a9 f7       	brne	.-22     	; 0xcbe <__udivmodhi4_loop>
     cd4:	80 95       	com	r24
     cd6:	90 95       	com	r25
     cd8:	bc 01       	movw	r22, r24
     cda:	cd 01       	movw	r24, r26
     cdc:	08 95       	ret

00000cde <printf>:
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e4 e7       	ldi	r30, 0x74	; 116
     ce4:	f6 e0       	ldi	r31, 0x06	; 6
     ce6:	db c2       	rjmp	.+1462   	; 0x129e <__prologue_saves__+0x20>
     ce8:	fe 01       	movw	r30, r28
     cea:	35 96       	adiw	r30, 0x05	; 5
     cec:	61 91       	ld	r22, Z+
     cee:	71 91       	ld	r23, Z+
     cf0:	80 91 9a 01 	lds	r24, 0x019A
     cf4:	90 91 9b 01 	lds	r25, 0x019B
     cf8:	af 01       	movw	r20, r30
     cfa:	3e d0       	rcall	.+124    	; 0xd78 <vfprintf>
     cfc:	20 96       	adiw	r28, 0x00	; 0
     cfe:	e2 e0       	ldi	r30, 0x02	; 2
     d00:	ea c2       	rjmp	.+1492   	; 0x12d6 <__epilogue_restores__+0x20>

00000d02 <putchar>:
     d02:	60 91 9a 01 	lds	r22, 0x019A
     d06:	70 91 9b 01 	lds	r23, 0x019B
     d0a:	2f d2       	rcall	.+1118   	; 0x116a <fputc>
     d0c:	08 95       	ret

00000d0e <puts>:
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	8c 01       	movw	r16, r24
     d18:	e0 91 9a 01 	lds	r30, 0x019A
     d1c:	f0 91 9b 01 	lds	r31, 0x019B
     d20:	83 81       	ldd	r24, Z+3	; 0x03
     d22:	81 ff       	sbrs	r24, 1
     d24:	21 c0       	rjmp	.+66     	; 0xd68 <puts+0x5a>
     d26:	c0 e0       	ldi	r28, 0x00	; 0
     d28:	d0 e0       	ldi	r29, 0x00	; 0
     d2a:	0d c0       	rjmp	.+26     	; 0xd46 <puts+0x38>
     d2c:	e0 91 9a 01 	lds	r30, 0x019A
     d30:	f0 91 9b 01 	lds	r31, 0x019B
     d34:	20 85       	ldd	r18, Z+8	; 0x08
     d36:	31 85       	ldd	r19, Z+9	; 0x09
     d38:	bf 01       	movw	r22, r30
     d3a:	f9 01       	movw	r30, r18
     d3c:	09 95       	icall
     d3e:	89 2b       	or	r24, r25
     d40:	11 f0       	breq	.+4      	; 0xd46 <puts+0x38>
     d42:	cf ef       	ldi	r28, 0xFF	; 255
     d44:	df ef       	ldi	r29, 0xFF	; 255
     d46:	f8 01       	movw	r30, r16
     d48:	81 91       	ld	r24, Z+
     d4a:	8f 01       	movw	r16, r30
     d4c:	88 23       	and	r24, r24
     d4e:	71 f7       	brne	.-36     	; 0xd2c <puts+0x1e>
     d50:	e0 91 9a 01 	lds	r30, 0x019A
     d54:	f0 91 9b 01 	lds	r31, 0x019B
     d58:	20 85       	ldd	r18, Z+8	; 0x08
     d5a:	31 85       	ldd	r19, Z+9	; 0x09
     d5c:	8a e0       	ldi	r24, 0x0A	; 10
     d5e:	bf 01       	movw	r22, r30
     d60:	f9 01       	movw	r30, r18
     d62:	09 95       	icall
     d64:	89 2b       	or	r24, r25
     d66:	11 f0       	breq	.+4      	; 0xd6c <puts+0x5e>
     d68:	cf ef       	ldi	r28, 0xFF	; 255
     d6a:	df ef       	ldi	r29, 0xFF	; 255
     d6c:	ce 01       	movw	r24, r28
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <vfprintf>:
     d78:	ab e0       	ldi	r26, 0x0B	; 11
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e1 ec       	ldi	r30, 0xC1	; 193
     d7e:	f6 e0       	ldi	r31, 0x06	; 6
     d80:	7e c2       	rjmp	.+1276   	; 0x127e <__prologue_saves__>
     d82:	3c 01       	movw	r6, r24
     d84:	2b 01       	movw	r4, r22
     d86:	5a 01       	movw	r10, r20
     d88:	fc 01       	movw	r30, r24
     d8a:	17 82       	std	Z+7, r1	; 0x07
     d8c:	16 82       	std	Z+6, r1	; 0x06
     d8e:	83 81       	ldd	r24, Z+3	; 0x03
     d90:	81 fd       	sbrc	r24, 1
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <vfprintf+0x22>
     d94:	6f ef       	ldi	r22, 0xFF	; 255
     d96:	7f ef       	ldi	r23, 0xFF	; 255
     d98:	b9 c1       	rjmp	.+882    	; 0x110c <vfprintf+0x394>
     d9a:	9a e0       	ldi	r25, 0x0A	; 10
     d9c:	89 2e       	mov	r8, r25
     d9e:	1e 01       	movw	r2, r28
     da0:	08 94       	sec
     da2:	21 1c       	adc	r2, r1
     da4:	31 1c       	adc	r3, r1
     da6:	f3 01       	movw	r30, r6
     da8:	23 81       	ldd	r18, Z+3	; 0x03
     daa:	f2 01       	movw	r30, r4
     dac:	23 fd       	sbrc	r18, 3
     dae:	85 91       	lpm	r24, Z+
     db0:	23 ff       	sbrs	r18, 3
     db2:	81 91       	ld	r24, Z+
     db4:	2f 01       	movw	r4, r30
     db6:	88 23       	and	r24, r24
     db8:	09 f4       	brne	.+2      	; 0xdbc <vfprintf+0x44>
     dba:	a5 c1       	rjmp	.+842    	; 0x1106 <vfprintf+0x38e>
     dbc:	85 32       	cpi	r24, 0x25	; 37
     dbe:	39 f4       	brne	.+14     	; 0xdce <vfprintf+0x56>
     dc0:	23 fd       	sbrc	r18, 3
     dc2:	85 91       	lpm	r24, Z+
     dc4:	23 ff       	sbrs	r18, 3
     dc6:	81 91       	ld	r24, Z+
     dc8:	2f 01       	movw	r4, r30
     dca:	85 32       	cpi	r24, 0x25	; 37
     dcc:	21 f4       	brne	.+8      	; 0xdd6 <vfprintf+0x5e>
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	b3 01       	movw	r22, r6
     dd2:	cb d1       	rcall	.+918    	; 0x116a <fputc>
     dd4:	e8 cf       	rjmp	.-48     	; 0xda6 <vfprintf+0x2e>
     dd6:	98 2f       	mov	r25, r24
     dd8:	ff 24       	eor	r15, r15
     dda:	ee 24       	eor	r14, r14
     ddc:	99 24       	eor	r9, r9
     dde:	ff e1       	ldi	r31, 0x1F	; 31
     de0:	ff 15       	cp	r31, r15
     de2:	d0 f0       	brcs	.+52     	; 0xe18 <vfprintf+0xa0>
     de4:	9b 32       	cpi	r25, 0x2B	; 43
     de6:	69 f0       	breq	.+26     	; 0xe02 <vfprintf+0x8a>
     de8:	9c 32       	cpi	r25, 0x2C	; 44
     dea:	28 f4       	brcc	.+10     	; 0xdf6 <vfprintf+0x7e>
     dec:	90 32       	cpi	r25, 0x20	; 32
     dee:	59 f0       	breq	.+22     	; 0xe06 <vfprintf+0x8e>
     df0:	93 32       	cpi	r25, 0x23	; 35
     df2:	91 f4       	brne	.+36     	; 0xe18 <vfprintf+0xa0>
     df4:	0e c0       	rjmp	.+28     	; 0xe12 <vfprintf+0x9a>
     df6:	9d 32       	cpi	r25, 0x2D	; 45
     df8:	49 f0       	breq	.+18     	; 0xe0c <vfprintf+0x94>
     dfa:	90 33       	cpi	r25, 0x30	; 48
     dfc:	69 f4       	brne	.+26     	; 0xe18 <vfprintf+0xa0>
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	24 c0       	rjmp	.+72     	; 0xe4a <vfprintf+0xd2>
     e02:	52 e0       	ldi	r21, 0x02	; 2
     e04:	f5 2a       	or	r15, r21
     e06:	84 e0       	ldi	r24, 0x04	; 4
     e08:	f8 2a       	or	r15, r24
     e0a:	28 c0       	rjmp	.+80     	; 0xe5c <vfprintf+0xe4>
     e0c:	98 e0       	ldi	r25, 0x08	; 8
     e0e:	f9 2a       	or	r15, r25
     e10:	25 c0       	rjmp	.+74     	; 0xe5c <vfprintf+0xe4>
     e12:	e0 e1       	ldi	r30, 0x10	; 16
     e14:	fe 2a       	or	r15, r30
     e16:	22 c0       	rjmp	.+68     	; 0xe5c <vfprintf+0xe4>
     e18:	f7 fc       	sbrc	r15, 7
     e1a:	29 c0       	rjmp	.+82     	; 0xe6e <vfprintf+0xf6>
     e1c:	89 2f       	mov	r24, r25
     e1e:	80 53       	subi	r24, 0x30	; 48
     e20:	8a 30       	cpi	r24, 0x0A	; 10
     e22:	70 f4       	brcc	.+28     	; 0xe40 <vfprintf+0xc8>
     e24:	f6 fe       	sbrs	r15, 6
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <vfprintf+0xba>
     e28:	98 9c       	mul	r9, r8
     e2a:	90 2c       	mov	r9, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	98 0e       	add	r9, r24
     e30:	15 c0       	rjmp	.+42     	; 0xe5c <vfprintf+0xe4>
     e32:	e8 9c       	mul	r14, r8
     e34:	e0 2c       	mov	r14, r0
     e36:	11 24       	eor	r1, r1
     e38:	e8 0e       	add	r14, r24
     e3a:	f0 e2       	ldi	r31, 0x20	; 32
     e3c:	ff 2a       	or	r15, r31
     e3e:	0e c0       	rjmp	.+28     	; 0xe5c <vfprintf+0xe4>
     e40:	9e 32       	cpi	r25, 0x2E	; 46
     e42:	29 f4       	brne	.+10     	; 0xe4e <vfprintf+0xd6>
     e44:	f6 fc       	sbrc	r15, 6
     e46:	5f c1       	rjmp	.+702    	; 0x1106 <vfprintf+0x38e>
     e48:	40 e4       	ldi	r20, 0x40	; 64
     e4a:	f4 2a       	or	r15, r20
     e4c:	07 c0       	rjmp	.+14     	; 0xe5c <vfprintf+0xe4>
     e4e:	9c 36       	cpi	r25, 0x6C	; 108
     e50:	19 f4       	brne	.+6      	; 0xe58 <vfprintf+0xe0>
     e52:	50 e8       	ldi	r21, 0x80	; 128
     e54:	f5 2a       	or	r15, r21
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <vfprintf+0xe4>
     e58:	98 36       	cpi	r25, 0x68	; 104
     e5a:	49 f4       	brne	.+18     	; 0xe6e <vfprintf+0xf6>
     e5c:	f2 01       	movw	r30, r4
     e5e:	23 fd       	sbrc	r18, 3
     e60:	95 91       	lpm	r25, Z+
     e62:	23 ff       	sbrs	r18, 3
     e64:	91 91       	ld	r25, Z+
     e66:	2f 01       	movw	r4, r30
     e68:	99 23       	and	r25, r25
     e6a:	09 f0       	breq	.+2      	; 0xe6e <vfprintf+0xf6>
     e6c:	b8 cf       	rjmp	.-144    	; 0xdde <vfprintf+0x66>
     e6e:	89 2f       	mov	r24, r25
     e70:	85 54       	subi	r24, 0x45	; 69
     e72:	83 30       	cpi	r24, 0x03	; 3
     e74:	18 f0       	brcs	.+6      	; 0xe7c <vfprintf+0x104>
     e76:	80 52       	subi	r24, 0x20	; 32
     e78:	83 30       	cpi	r24, 0x03	; 3
     e7a:	38 f4       	brcc	.+14     	; 0xe8a <vfprintf+0x112>
     e7c:	44 e0       	ldi	r20, 0x04	; 4
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	a4 0e       	add	r10, r20
     e82:	b5 1e       	adc	r11, r21
     e84:	5f e3       	ldi	r21, 0x3F	; 63
     e86:	59 83       	std	Y+1, r21	; 0x01
     e88:	0f c0       	rjmp	.+30     	; 0xea8 <vfprintf+0x130>
     e8a:	93 36       	cpi	r25, 0x63	; 99
     e8c:	31 f0       	breq	.+12     	; 0xe9a <vfprintf+0x122>
     e8e:	93 37       	cpi	r25, 0x73	; 115
     e90:	79 f0       	breq	.+30     	; 0xeb0 <vfprintf+0x138>
     e92:	93 35       	cpi	r25, 0x53	; 83
     e94:	09 f0       	breq	.+2      	; 0xe98 <vfprintf+0x120>
     e96:	52 c0       	rjmp	.+164    	; 0xf3c <vfprintf+0x1c4>
     e98:	1f c0       	rjmp	.+62     	; 0xed8 <vfprintf+0x160>
     e9a:	f5 01       	movw	r30, r10
     e9c:	80 81       	ld	r24, Z
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	42 e0       	ldi	r20, 0x02	; 2
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	a4 0e       	add	r10, r20
     ea6:	b5 1e       	adc	r11, r21
     ea8:	61 01       	movw	r12, r2
     eaa:	01 e0       	ldi	r16, 0x01	; 1
     eac:	10 e0       	ldi	r17, 0x00	; 0
     eae:	11 c0       	rjmp	.+34     	; 0xed2 <vfprintf+0x15a>
     eb0:	f5 01       	movw	r30, r10
     eb2:	c0 80       	ld	r12, Z
     eb4:	d1 80       	ldd	r13, Z+1	; 0x01
     eb6:	f6 fc       	sbrc	r15, 6
     eb8:	03 c0       	rjmp	.+6      	; 0xec0 <vfprintf+0x148>
     eba:	6f ef       	ldi	r22, 0xFF	; 255
     ebc:	7f ef       	ldi	r23, 0xFF	; 255
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x14c>
     ec0:	69 2d       	mov	r22, r9
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	42 e0       	ldi	r20, 0x02	; 2
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	a4 0e       	add	r10, r20
     eca:	b5 1e       	adc	r11, r21
     ecc:	c6 01       	movw	r24, r12
     ece:	42 d1       	rcall	.+644    	; 0x1154 <strnlen>
     ed0:	8c 01       	movw	r16, r24
     ed2:	5f e7       	ldi	r21, 0x7F	; 127
     ed4:	f5 22       	and	r15, r21
     ed6:	13 c0       	rjmp	.+38     	; 0xefe <vfprintf+0x186>
     ed8:	f5 01       	movw	r30, r10
     eda:	c0 80       	ld	r12, Z
     edc:	d1 80       	ldd	r13, Z+1	; 0x01
     ede:	f6 fc       	sbrc	r15, 6
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <vfprintf+0x170>
     ee2:	6f ef       	ldi	r22, 0xFF	; 255
     ee4:	7f ef       	ldi	r23, 0xFF	; 255
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <vfprintf+0x174>
     ee8:	69 2d       	mov	r22, r9
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	42 e0       	ldi	r20, 0x02	; 2
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	a4 0e       	add	r10, r20
     ef2:	b5 1e       	adc	r11, r21
     ef4:	c6 01       	movw	r24, r12
     ef6:	23 d1       	rcall	.+582    	; 0x113e <strnlen_P>
     ef8:	8c 01       	movw	r16, r24
     efa:	50 e8       	ldi	r21, 0x80	; 128
     efc:	f5 2a       	or	r15, r21
     efe:	f3 fe       	sbrs	r15, 3
     f00:	06 c0       	rjmp	.+12     	; 0xf0e <vfprintf+0x196>
     f02:	18 c0       	rjmp	.+48     	; 0xf34 <vfprintf+0x1bc>
     f04:	80 e2       	ldi	r24, 0x20	; 32
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	b3 01       	movw	r22, r6
     f0a:	2f d1       	rcall	.+606    	; 0x116a <fputc>
     f0c:	ea 94       	dec	r14
     f0e:	8e 2d       	mov	r24, r14
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	08 17       	cp	r16, r24
     f14:	19 07       	cpc	r17, r25
     f16:	b0 f3       	brcs	.-20     	; 0xf04 <vfprintf+0x18c>
     f18:	0d c0       	rjmp	.+26     	; 0xf34 <vfprintf+0x1bc>
     f1a:	f6 01       	movw	r30, r12
     f1c:	f7 fc       	sbrc	r15, 7
     f1e:	85 91       	lpm	r24, Z+
     f20:	f7 fe       	sbrs	r15, 7
     f22:	81 91       	ld	r24, Z+
     f24:	6f 01       	movw	r12, r30
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	b3 01       	movw	r22, r6
     f2a:	1f d1       	rcall	.+574    	; 0x116a <fputc>
     f2c:	e1 10       	cpse	r14, r1
     f2e:	ea 94       	dec	r14
     f30:	01 50       	subi	r16, 0x01	; 1
     f32:	10 40       	sbci	r17, 0x00	; 0
     f34:	01 15       	cp	r16, r1
     f36:	11 05       	cpc	r17, r1
     f38:	81 f7       	brne	.-32     	; 0xf1a <vfprintf+0x1a2>
     f3a:	e2 c0       	rjmp	.+452    	; 0x1100 <vfprintf+0x388>
     f3c:	94 36       	cpi	r25, 0x64	; 100
     f3e:	11 f0       	breq	.+4      	; 0xf44 <vfprintf+0x1cc>
     f40:	99 36       	cpi	r25, 0x69	; 105
     f42:	61 f5       	brne	.+88     	; 0xf9c <vfprintf+0x224>
     f44:	f7 fe       	sbrs	r15, 7
     f46:	08 c0       	rjmp	.+16     	; 0xf58 <vfprintf+0x1e0>
     f48:	f5 01       	movw	r30, r10
     f4a:	20 81       	ld	r18, Z
     f4c:	31 81       	ldd	r19, Z+1	; 0x01
     f4e:	42 81       	ldd	r20, Z+2	; 0x02
     f50:	53 81       	ldd	r21, Z+3	; 0x03
     f52:	84 e0       	ldi	r24, 0x04	; 4
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0a c0       	rjmp	.+20     	; 0xf6c <vfprintf+0x1f4>
     f58:	f5 01       	movw	r30, r10
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	9c 01       	movw	r18, r24
     f60:	44 27       	eor	r20, r20
     f62:	37 fd       	sbrc	r19, 7
     f64:	40 95       	com	r20
     f66:	54 2f       	mov	r21, r20
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a8 0e       	add	r10, r24
     f6e:	b9 1e       	adc	r11, r25
     f70:	9f e6       	ldi	r25, 0x6F	; 111
     f72:	f9 22       	and	r15, r25
     f74:	57 ff       	sbrs	r21, 7
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <vfprintf+0x212>
     f78:	50 95       	com	r21
     f7a:	40 95       	com	r20
     f7c:	30 95       	com	r19
     f7e:	21 95       	neg	r18
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	4f 4f       	sbci	r20, 0xFF	; 255
     f84:	5f 4f       	sbci	r21, 0xFF	; 255
     f86:	e0 e8       	ldi	r30, 0x80	; 128
     f88:	fe 2a       	or	r15, r30
     f8a:	ca 01       	movw	r24, r20
     f8c:	b9 01       	movw	r22, r18
     f8e:	a1 01       	movw	r20, r2
     f90:	2a e0       	ldi	r18, 0x0A	; 10
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	16 d1       	rcall	.+556    	; 0x11c2 <__ultoa_invert>
     f96:	d8 2e       	mov	r13, r24
     f98:	d2 18       	sub	r13, r2
     f9a:	3f c0       	rjmp	.+126    	; 0x101a <vfprintf+0x2a2>
     f9c:	95 37       	cpi	r25, 0x75	; 117
     f9e:	29 f4       	brne	.+10     	; 0xfaa <vfprintf+0x232>
     fa0:	1f 2d       	mov	r17, r15
     fa2:	1f 7e       	andi	r17, 0xEF	; 239
     fa4:	2a e0       	ldi	r18, 0x0A	; 10
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	1d c0       	rjmp	.+58     	; 0xfe4 <vfprintf+0x26c>
     faa:	1f 2d       	mov	r17, r15
     fac:	19 7f       	andi	r17, 0xF9	; 249
     fae:	9f 36       	cpi	r25, 0x6F	; 111
     fb0:	61 f0       	breq	.+24     	; 0xfca <vfprintf+0x252>
     fb2:	90 37       	cpi	r25, 0x70	; 112
     fb4:	20 f4       	brcc	.+8      	; 0xfbe <vfprintf+0x246>
     fb6:	98 35       	cpi	r25, 0x58	; 88
     fb8:	09 f0       	breq	.+2      	; 0xfbc <vfprintf+0x244>
     fba:	a5 c0       	rjmp	.+330    	; 0x1106 <vfprintf+0x38e>
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <vfprintf+0x264>
     fbe:	90 37       	cpi	r25, 0x70	; 112
     fc0:	39 f0       	breq	.+14     	; 0xfd0 <vfprintf+0x258>
     fc2:	98 37       	cpi	r25, 0x78	; 120
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <vfprintf+0x250>
     fc6:	9f c0       	rjmp	.+318    	; 0x1106 <vfprintf+0x38e>
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <vfprintf+0x25a>
     fca:	28 e0       	ldi	r18, 0x08	; 8
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	0a c0       	rjmp	.+20     	; 0xfe4 <vfprintf+0x26c>
     fd0:	10 61       	ori	r17, 0x10	; 16
     fd2:	14 fd       	sbrc	r17, 4
     fd4:	14 60       	ori	r17, 0x04	; 4
     fd6:	20 e1       	ldi	r18, 0x10	; 16
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <vfprintf+0x26c>
     fdc:	14 fd       	sbrc	r17, 4
     fde:	16 60       	ori	r17, 0x06	; 6
     fe0:	20 e1       	ldi	r18, 0x10	; 16
     fe2:	32 e0       	ldi	r19, 0x02	; 2
     fe4:	17 ff       	sbrs	r17, 7
     fe6:	08 c0       	rjmp	.+16     	; 0xff8 <vfprintf+0x280>
     fe8:	f5 01       	movw	r30, r10
     fea:	60 81       	ld	r22, Z
     fec:	71 81       	ldd	r23, Z+1	; 0x01
     fee:	82 81       	ldd	r24, Z+2	; 0x02
     ff0:	93 81       	ldd	r25, Z+3	; 0x03
     ff2:	44 e0       	ldi	r20, 0x04	; 4
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	08 c0       	rjmp	.+16     	; 0x1008 <vfprintf+0x290>
     ff8:	f5 01       	movw	r30, r10
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	bc 01       	movw	r22, r24
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	42 e0       	ldi	r20, 0x02	; 2
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	a4 0e       	add	r10, r20
    100a:	b5 1e       	adc	r11, r21
    100c:	a1 01       	movw	r20, r2
    100e:	d9 d0       	rcall	.+434    	; 0x11c2 <__ultoa_invert>
    1010:	d8 2e       	mov	r13, r24
    1012:	d2 18       	sub	r13, r2
    1014:	8f e7       	ldi	r24, 0x7F	; 127
    1016:	f8 2e       	mov	r15, r24
    1018:	f1 22       	and	r15, r17
    101a:	f6 fe       	sbrs	r15, 6
    101c:	0b c0       	rjmp	.+22     	; 0x1034 <vfprintf+0x2bc>
    101e:	5e ef       	ldi	r21, 0xFE	; 254
    1020:	f5 22       	and	r15, r21
    1022:	d9 14       	cp	r13, r9
    1024:	38 f4       	brcc	.+14     	; 0x1034 <vfprintf+0x2bc>
    1026:	f4 fe       	sbrs	r15, 4
    1028:	07 c0       	rjmp	.+14     	; 0x1038 <vfprintf+0x2c0>
    102a:	f2 fc       	sbrc	r15, 2
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <vfprintf+0x2c0>
    102e:	8f ee       	ldi	r24, 0xEF	; 239
    1030:	f8 22       	and	r15, r24
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <vfprintf+0x2c0>
    1034:	1d 2d       	mov	r17, r13
    1036:	01 c0       	rjmp	.+2      	; 0x103a <vfprintf+0x2c2>
    1038:	19 2d       	mov	r17, r9
    103a:	f4 fe       	sbrs	r15, 4
    103c:	0d c0       	rjmp	.+26     	; 0x1058 <vfprintf+0x2e0>
    103e:	fe 01       	movw	r30, r28
    1040:	ed 0d       	add	r30, r13
    1042:	f1 1d       	adc	r31, r1
    1044:	80 81       	ld	r24, Z
    1046:	80 33       	cpi	r24, 0x30	; 48
    1048:	19 f4       	brne	.+6      	; 0x1050 <vfprintf+0x2d8>
    104a:	99 ee       	ldi	r25, 0xE9	; 233
    104c:	f9 22       	and	r15, r25
    104e:	08 c0       	rjmp	.+16     	; 0x1060 <vfprintf+0x2e8>
    1050:	1f 5f       	subi	r17, 0xFF	; 255
    1052:	f2 fe       	sbrs	r15, 2
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <vfprintf+0x2e8>
    1056:	03 c0       	rjmp	.+6      	; 0x105e <vfprintf+0x2e6>
    1058:	8f 2d       	mov	r24, r15
    105a:	86 78       	andi	r24, 0x86	; 134
    105c:	09 f0       	breq	.+2      	; 0x1060 <vfprintf+0x2e8>
    105e:	1f 5f       	subi	r17, 0xFF	; 255
    1060:	0f 2d       	mov	r16, r15
    1062:	f3 fc       	sbrc	r15, 3
    1064:	13 c0       	rjmp	.+38     	; 0x108c <vfprintf+0x314>
    1066:	f0 fe       	sbrs	r15, 0
    1068:	0e c0       	rjmp	.+28     	; 0x1086 <vfprintf+0x30e>
    106a:	1e 15       	cp	r17, r14
    106c:	10 f0       	brcs	.+4      	; 0x1072 <vfprintf+0x2fa>
    106e:	9d 2c       	mov	r9, r13
    1070:	0a c0       	rjmp	.+20     	; 0x1086 <vfprintf+0x30e>
    1072:	9d 2c       	mov	r9, r13
    1074:	9e 0c       	add	r9, r14
    1076:	91 1a       	sub	r9, r17
    1078:	1e 2d       	mov	r17, r14
    107a:	05 c0       	rjmp	.+10     	; 0x1086 <vfprintf+0x30e>
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	b3 01       	movw	r22, r6
    1082:	73 d0       	rcall	.+230    	; 0x116a <fputc>
    1084:	1f 5f       	subi	r17, 0xFF	; 255
    1086:	1e 15       	cp	r17, r14
    1088:	c8 f3       	brcs	.-14     	; 0x107c <vfprintf+0x304>
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <vfprintf+0x31c>
    108c:	1e 15       	cp	r17, r14
    108e:	10 f4       	brcc	.+4      	; 0x1094 <vfprintf+0x31c>
    1090:	e1 1a       	sub	r14, r17
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <vfprintf+0x31e>
    1094:	ee 24       	eor	r14, r14
    1096:	04 ff       	sbrs	r16, 4
    1098:	0e c0       	rjmp	.+28     	; 0x10b6 <vfprintf+0x33e>
    109a:	80 e3       	ldi	r24, 0x30	; 48
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	b3 01       	movw	r22, r6
    10a0:	64 d0       	rcall	.+200    	; 0x116a <fputc>
    10a2:	02 ff       	sbrs	r16, 2
    10a4:	1b c0       	rjmp	.+54     	; 0x10dc <vfprintf+0x364>
    10a6:	01 fd       	sbrc	r16, 1
    10a8:	03 c0       	rjmp	.+6      	; 0x10b0 <vfprintf+0x338>
    10aa:	88 e7       	ldi	r24, 0x78	; 120
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e c0       	rjmp	.+28     	; 0x10cc <vfprintf+0x354>
    10b0:	88 e5       	ldi	r24, 0x58	; 88
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0b c0       	rjmp	.+22     	; 0x10cc <vfprintf+0x354>
    10b6:	80 2f       	mov	r24, r16
    10b8:	86 78       	andi	r24, 0x86	; 134
    10ba:	81 f0       	breq	.+32     	; 0x10dc <vfprintf+0x364>
    10bc:	01 ff       	sbrs	r16, 1
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <vfprintf+0x34c>
    10c0:	8b e2       	ldi	r24, 0x2B	; 43
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <vfprintf+0x34e>
    10c4:	80 e2       	ldi	r24, 0x20	; 32
    10c6:	f7 fc       	sbrc	r15, 7
    10c8:	8d e2       	ldi	r24, 0x2D	; 45
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	b3 01       	movw	r22, r6
    10ce:	4d d0       	rcall	.+154    	; 0x116a <fputc>
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <vfprintf+0x364>
    10d2:	80 e3       	ldi	r24, 0x30	; 48
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	b3 01       	movw	r22, r6
    10d8:	48 d0       	rcall	.+144    	; 0x116a <fputc>
    10da:	9a 94       	dec	r9
    10dc:	d9 14       	cp	r13, r9
    10de:	c8 f3       	brcs	.-14     	; 0x10d2 <vfprintf+0x35a>
    10e0:	da 94       	dec	r13
    10e2:	f1 01       	movw	r30, r2
    10e4:	ed 0d       	add	r30, r13
    10e6:	f1 1d       	adc	r31, r1
    10e8:	80 81       	ld	r24, Z
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	b3 01       	movw	r22, r6
    10ee:	3d d0       	rcall	.+122    	; 0x116a <fputc>
    10f0:	dd 20       	and	r13, r13
    10f2:	b1 f7       	brne	.-20     	; 0x10e0 <vfprintf+0x368>
    10f4:	05 c0       	rjmp	.+10     	; 0x1100 <vfprintf+0x388>
    10f6:	80 e2       	ldi	r24, 0x20	; 32
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	b3 01       	movw	r22, r6
    10fc:	36 d0       	rcall	.+108    	; 0x116a <fputc>
    10fe:	ea 94       	dec	r14
    1100:	ee 20       	and	r14, r14
    1102:	c9 f7       	brne	.-14     	; 0x10f6 <vfprintf+0x37e>
    1104:	50 ce       	rjmp	.-864    	; 0xda6 <vfprintf+0x2e>
    1106:	f3 01       	movw	r30, r6
    1108:	66 81       	ldd	r22, Z+6	; 0x06
    110a:	77 81       	ldd	r23, Z+7	; 0x07
    110c:	cb 01       	movw	r24, r22
    110e:	2b 96       	adiw	r28, 0x0b	; 11
    1110:	e2 e1       	ldi	r30, 0x12	; 18
    1112:	d1 c0       	rjmp	.+418    	; 0x12b6 <__epilogue_restores__>

00001114 <__eerd_byte_m8>:
    1114:	e1 99       	sbic	0x1c, 1	; 28
    1116:	fe cf       	rjmp	.-4      	; 0x1114 <__eerd_byte_m8>
    1118:	9f bb       	out	0x1f, r25	; 31
    111a:	8e bb       	out	0x1e, r24	; 30
    111c:	e0 9a       	sbi	0x1c, 0	; 28
    111e:	99 27       	eor	r25, r25
    1120:	8d b3       	in	r24, 0x1d	; 29
    1122:	08 95       	ret

00001124 <__eewr_byte_m8>:
    1124:	26 2f       	mov	r18, r22

00001126 <__eewr_r18_m8>:
    1126:	e1 99       	sbic	0x1c, 1	; 28
    1128:	fe cf       	rjmp	.-4      	; 0x1126 <__eewr_r18_m8>
    112a:	9f bb       	out	0x1f, r25	; 31
    112c:	8e bb       	out	0x1e, r24	; 30
    112e:	2d bb       	out	0x1d, r18	; 29
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	e2 9a       	sbi	0x1c, 2	; 28
    1136:	e1 9a       	sbi	0x1c, 1	; 28
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	08 95       	ret

0000113e <strnlen_P>:
    113e:	fc 01       	movw	r30, r24
    1140:	05 90       	lpm	r0, Z+
    1142:	61 50       	subi	r22, 0x01	; 1
    1144:	70 40       	sbci	r23, 0x00	; 0
    1146:	01 10       	cpse	r0, r1
    1148:	d8 f7       	brcc	.-10     	; 0x1140 <strnlen_P+0x2>
    114a:	80 95       	com	r24
    114c:	90 95       	com	r25
    114e:	8e 0f       	add	r24, r30
    1150:	9f 1f       	adc	r25, r31
    1152:	08 95       	ret

00001154 <strnlen>:
    1154:	fc 01       	movw	r30, r24
    1156:	61 50       	subi	r22, 0x01	; 1
    1158:	70 40       	sbci	r23, 0x00	; 0
    115a:	01 90       	ld	r0, Z+
    115c:	01 10       	cpse	r0, r1
    115e:	d8 f7       	brcc	.-10     	; 0x1156 <strnlen+0x2>
    1160:	80 95       	com	r24
    1162:	90 95       	com	r25
    1164:	8e 0f       	add	r24, r30
    1166:	9f 1f       	adc	r25, r31
    1168:	08 95       	ret

0000116a <fputc>:
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	8c 01       	movw	r16, r24
    1174:	eb 01       	movw	r28, r22
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	81 ff       	sbrs	r24, 1
    117a:	1b c0       	rjmp	.+54     	; 0x11b2 <fputc+0x48>
    117c:	82 ff       	sbrs	r24, 2
    117e:	0d c0       	rjmp	.+26     	; 0x119a <fputc+0x30>
    1180:	2e 81       	ldd	r18, Y+6	; 0x06
    1182:	3f 81       	ldd	r19, Y+7	; 0x07
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	9d 81       	ldd	r25, Y+5	; 0x05
    1188:	28 17       	cp	r18, r24
    118a:	39 07       	cpc	r19, r25
    118c:	64 f4       	brge	.+24     	; 0x11a6 <fputc+0x3c>
    118e:	e8 81       	ld	r30, Y
    1190:	f9 81       	ldd	r31, Y+1	; 0x01
    1192:	01 93       	st	Z+, r16
    1194:	f9 83       	std	Y+1, r31	; 0x01
    1196:	e8 83       	st	Y, r30
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <fputc+0x3c>
    119a:	e8 85       	ldd	r30, Y+8	; 0x08
    119c:	f9 85       	ldd	r31, Y+9	; 0x09
    119e:	80 2f       	mov	r24, r16
    11a0:	09 95       	icall
    11a2:	89 2b       	or	r24, r25
    11a4:	31 f4       	brne	.+12     	; 0x11b2 <fputc+0x48>
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	9f 81       	ldd	r25, Y+7	; 0x07
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	9f 83       	std	Y+7, r25	; 0x07
    11ae:	8e 83       	std	Y+6, r24	; 0x06
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <fputc+0x4c>
    11b2:	0f ef       	ldi	r16, 0xFF	; 255
    11b4:	1f ef       	ldi	r17, 0xFF	; 255
    11b6:	c8 01       	movw	r24, r16
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	08 95       	ret

000011c2 <__ultoa_invert>:
    11c2:	fa 01       	movw	r30, r20
    11c4:	aa 27       	eor	r26, r26
    11c6:	28 30       	cpi	r18, 0x08	; 8
    11c8:	51 f1       	breq	.+84     	; 0x121e <__ultoa_invert+0x5c>
    11ca:	20 31       	cpi	r18, 0x10	; 16
    11cc:	81 f1       	breq	.+96     	; 0x122e <__ultoa_invert+0x6c>
    11ce:	e8 94       	clt
    11d0:	6f 93       	push	r22
    11d2:	6e 7f       	andi	r22, 0xFE	; 254
    11d4:	6e 5f       	subi	r22, 0xFE	; 254
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	8f 4f       	sbci	r24, 0xFF	; 255
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	af 4f       	sbci	r26, 0xFF	; 255
    11de:	b1 e0       	ldi	r27, 0x01	; 1
    11e0:	3e d0       	rcall	.+124    	; 0x125e <__ultoa_invert+0x9c>
    11e2:	b4 e0       	ldi	r27, 0x04	; 4
    11e4:	3c d0       	rcall	.+120    	; 0x125e <__ultoa_invert+0x9c>
    11e6:	67 0f       	add	r22, r23
    11e8:	78 1f       	adc	r23, r24
    11ea:	89 1f       	adc	r24, r25
    11ec:	9a 1f       	adc	r25, r26
    11ee:	a1 1d       	adc	r26, r1
    11f0:	68 0f       	add	r22, r24
    11f2:	79 1f       	adc	r23, r25
    11f4:	8a 1f       	adc	r24, r26
    11f6:	91 1d       	adc	r25, r1
    11f8:	a1 1d       	adc	r26, r1
    11fa:	6a 0f       	add	r22, r26
    11fc:	71 1d       	adc	r23, r1
    11fe:	81 1d       	adc	r24, r1
    1200:	91 1d       	adc	r25, r1
    1202:	a1 1d       	adc	r26, r1
    1204:	20 d0       	rcall	.+64     	; 0x1246 <__ultoa_invert+0x84>
    1206:	09 f4       	brne	.+2      	; 0x120a <__ultoa_invert+0x48>
    1208:	68 94       	set
    120a:	3f 91       	pop	r19
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	26 9f       	mul	r18, r22
    1210:	11 24       	eor	r1, r1
    1212:	30 19       	sub	r19, r0
    1214:	30 5d       	subi	r19, 0xD0	; 208
    1216:	31 93       	st	Z+, r19
    1218:	de f6       	brtc	.-74     	; 0x11d0 <__ultoa_invert+0xe>
    121a:	cf 01       	movw	r24, r30
    121c:	08 95       	ret
    121e:	46 2f       	mov	r20, r22
    1220:	47 70       	andi	r20, 0x07	; 7
    1222:	40 5d       	subi	r20, 0xD0	; 208
    1224:	41 93       	st	Z+, r20
    1226:	b3 e0       	ldi	r27, 0x03	; 3
    1228:	0f d0       	rcall	.+30     	; 0x1248 <__ultoa_invert+0x86>
    122a:	c9 f7       	brne	.-14     	; 0x121e <__ultoa_invert+0x5c>
    122c:	f6 cf       	rjmp	.-20     	; 0x121a <__ultoa_invert+0x58>
    122e:	46 2f       	mov	r20, r22
    1230:	4f 70       	andi	r20, 0x0F	; 15
    1232:	40 5d       	subi	r20, 0xD0	; 208
    1234:	4a 33       	cpi	r20, 0x3A	; 58
    1236:	18 f0       	brcs	.+6      	; 0x123e <__ultoa_invert+0x7c>
    1238:	49 5d       	subi	r20, 0xD9	; 217
    123a:	31 fd       	sbrc	r19, 1
    123c:	40 52       	subi	r20, 0x20	; 32
    123e:	41 93       	st	Z+, r20
    1240:	02 d0       	rcall	.+4      	; 0x1246 <__ultoa_invert+0x84>
    1242:	a9 f7       	brne	.-22     	; 0x122e <__ultoa_invert+0x6c>
    1244:	ea cf       	rjmp	.-44     	; 0x121a <__ultoa_invert+0x58>
    1246:	b4 e0       	ldi	r27, 0x04	; 4
    1248:	a6 95       	lsr	r26
    124a:	97 95       	ror	r25
    124c:	87 95       	ror	r24
    124e:	77 95       	ror	r23
    1250:	67 95       	ror	r22
    1252:	ba 95       	dec	r27
    1254:	c9 f7       	brne	.-14     	; 0x1248 <__ultoa_invert+0x86>
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	61 05       	cpc	r22, r1
    125a:	71 05       	cpc	r23, r1
    125c:	08 95       	ret
    125e:	9b 01       	movw	r18, r22
    1260:	ac 01       	movw	r20, r24
    1262:	0a 2e       	mov	r0, r26
    1264:	06 94       	lsr	r0
    1266:	57 95       	ror	r21
    1268:	47 95       	ror	r20
    126a:	37 95       	ror	r19
    126c:	27 95       	ror	r18
    126e:	ba 95       	dec	r27
    1270:	c9 f7       	brne	.-14     	; 0x1264 <__ultoa_invert+0xa2>
    1272:	62 0f       	add	r22, r18
    1274:	73 1f       	adc	r23, r19
    1276:	84 1f       	adc	r24, r20
    1278:	95 1f       	adc	r25, r21
    127a:	a0 1d       	adc	r26, r0
    127c:	08 95       	ret

0000127e <__prologue_saves__>:
    127e:	2f 92       	push	r2
    1280:	3f 92       	push	r3
    1282:	4f 92       	push	r4
    1284:	5f 92       	push	r5
    1286:	6f 92       	push	r6
    1288:	7f 92       	push	r7
    128a:	8f 92       	push	r8
    128c:	9f 92       	push	r9
    128e:	af 92       	push	r10
    1290:	bf 92       	push	r11
    1292:	cf 92       	push	r12
    1294:	df 92       	push	r13
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	ca 1b       	sub	r28, r26
    12a8:	db 0b       	sbc	r29, r27
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	09 94       	ijmp

000012b6 <__epilogue_restores__>:
    12b6:	2a 88       	ldd	r2, Y+18	; 0x12
    12b8:	39 88       	ldd	r3, Y+17	; 0x11
    12ba:	48 88       	ldd	r4, Y+16	; 0x10
    12bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    12be:	6e 84       	ldd	r6, Y+14	; 0x0e
    12c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    12c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    12c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    12c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    12c8:	b9 84       	ldd	r11, Y+9	; 0x09
    12ca:	c8 84       	ldd	r12, Y+8	; 0x08
    12cc:	df 80       	ldd	r13, Y+7	; 0x07
    12ce:	ee 80       	ldd	r14, Y+6	; 0x06
    12d0:	fd 80       	ldd	r15, Y+5	; 0x05
    12d2:	0c 81       	ldd	r16, Y+4	; 0x04
    12d4:	1b 81       	ldd	r17, Y+3	; 0x03
    12d6:	aa 81       	ldd	r26, Y+2	; 0x02
    12d8:	b9 81       	ldd	r27, Y+1	; 0x01
    12da:	ce 0f       	add	r28, r30
    12dc:	d1 1d       	adc	r29, r1
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	ed 01       	movw	r28, r26
    12ea:	08 95       	ret

000012ec <_exit>:
    12ec:	f8 94       	cli

000012ee <__stop_program>:
    12ee:	ff cf       	rjmp	.-2      	; 0x12ee <__stop_program>
