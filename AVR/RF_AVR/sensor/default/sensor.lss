
sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00000e96  00000f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  0080010e  0080010e  00000fd8  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ed  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fde  00000000  00000000  00001245  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000606  00000000  00000000  00002223  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b64  00000000  00000000  00002829  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00003390  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000279  00000000  00000000  00003520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009f0  00000000  00000000  00003799  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004189  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	c9 c3       	rjmp	.+1938   	; 0x7aa <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e9       	ldi	r30, 0x96	; 150
  3a:	fe e0       	ldi	r31, 0x0E	; 14
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 30       	cpi	r26, 0x0E	; 14
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	ae e0       	ldi	r26, 0x0E	; 14
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 34       	cpi	r26, 0x42	; 66
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	a6 d0       	rcall	.+332    	; 0x1a6 <main>
  5a:	1b c7       	rjmp	.+3638   	; 0xe92 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <gpioInit>:
	}
}

void gpioInit(void){
	//set ouput pin
	DDRB = (1<<LED)|(1<<RF_OUT);
  5e:	85 e0       	ldi	r24, 0x05	; 5
  60:	87 bb       	out	0x17, r24	; 23
	DDRD = (1<<LIGHT1)|(1<<LIGHT2)|(1<<LIGHT3)|(1<<LIGHT4)|(1<<LIGHT5)|(1<<LIGHT6);
  62:	8c ef       	ldi	r24, 0xFC	; 252
  64:	81 bb       	out	0x11, r24	; 17
	PORTD = (1<<LIGHT2)|(1<<LIGHT3)|(1<<LIGHT4)|(1<<LIGHT5)|(1<<LIGHT6);
  66:	88 ef       	ldi	r24, 0xF8	; 248
  68:	82 bb       	out	0x12, r24	; 18
	//indication LED on
	I_LED(0);
  6a:	c2 98       	cbi	0x18, 2	; 24
	//initial input pin to High
	PORTC = (1<<SW1)|(1<<SW2)|(1<<SW3)|(1<<SW4)|(1<<SW5)|(1<<SW6); // Light
  6c:	8f e3       	ldi	r24, 0x3F	; 63
  6e:	85 bb       	out	0x15, r24	; 21
	PORTB = (1<<LED); //User button
  70:	84 e0       	ldi	r24, 0x04	; 4
  72:	88 bb       	out	0x18, r24	; 24
	PORTD |= (1<<0); // get code button
  74:	90 9a       	sbi	0x12, 0	; 18
}
  76:	08 95       	ret

00000078 <uart_received>:
unsigned char sw5 = 1;
unsigned char sw6 = 1;
unsigned char sensorin = 1;

int uart_received (unsigned char * uart_command, unsigned int ilent)
{
  78:	0f 93       	push	r16
  7a:	1f 93       	push	r17
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	ec 01       	movw	r28, r24
  82:	16 2f       	mov	r17, r22
  84:	07 2f       	mov	r16, r23
	if(findstr("rf ",3,uart_command,ilent)!=(-1))
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	63 e0       	ldi	r22, 0x03	; 3
  8c:	70 e0       	ldi	r23, 0x00	; 0
  8e:	ae 01       	movw	r20, r28
  90:	21 2f       	mov	r18, r17
  92:	30 2f       	mov	r19, r16
  94:	31 d3       	rcall	.+1634   	; 0x6f8 <findstr>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	9f 4f       	sbci	r25, 0xFF	; 255
  9a:	79 f0       	breq	.+30     	; 0xba <uart_received+0x42>
	{
		int i = findstr("rf ",3,uart_command,ilent);
  9c:	80 e6       	ldi	r24, 0x60	; 96
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	63 e0       	ldi	r22, 0x03	; 3
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	ae 01       	movw	r20, r28
  a6:	21 2f       	mov	r18, r17
  a8:	30 2f       	mov	r19, r16
  aa:	26 d3       	rcall	.+1612   	; 0x6f8 <findstr>
		//printf("\n");
		//printptr(uart_command + 3 + i,ilent - 3 - i);
		M_Sent_Frame(uart_command + 3 + i,ilent - 3 - i);
  ac:	13 50       	subi	r17, 0x03	; 3
  ae:	18 1b       	sub	r17, r24
  b0:	03 96       	adiw	r24, 0x03	; 3
  b2:	8c 0f       	add	r24, r28
  b4:	9d 1f       	adc	r25, r29
  b6:	61 2f       	mov	r22, r17
  b8:	c1 d2       	rcall	.+1410   	; 0x63c <M_Sent_Frame>
	}
}
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	1f 91       	pop	r17
  c0:	0f 91       	pop	r16
  c2:	08 95       	ret

000000c4 <getCode>:
	//initial input pin to High
	PORTC = (1<<SW1)|(1<<SW2)|(1<<SW3)|(1<<SW4)|(1<<SW5)|(1<<SW6); // Light
	PORTB = (1<<LED); //User button
	PORTD |= (1<<0); // get code button
}
void getCode(void){
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	char str[COMMAND + 1];
	uint8_t datalen;	

	// Nhan code tu bo nho EPPROM
	for (int i = 0; i < COMMAND; i++){
		code [i] = eeprom_read_byte (Mcode + i);
  cc:	80 91 e7 00 	lds	r24, 0x00E7
  d0:	c0 e0       	ldi	r28, 0x00	; 0
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	08 2f       	mov	r16, r24
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	ce 01       	movw	r24, r28
  da:	80 0f       	add	r24, r16
  dc:	91 1f       	adc	r25, r17
  de:	ed d5       	rcall	.+3034   	; 0xcba <__eerd_byte_m8>
  e0:	fe 01       	movw	r30, r28
  e2:	e2 5f       	subi	r30, 0xF2	; 242
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	80 83       	st	Z, r24
	// Khai bao cac mang chua du lieu can truyen di
	char str[COMMAND + 1];
	uint8_t datalen;	

	// Nhan code tu bo nho EPPROM
	for (int i = 0; i < COMMAND; i++){
  e8:	21 96       	adiw	r28, 0x01	; 1
  ea:	c6 30       	cpi	r28, 0x06	; 6
  ec:	d1 05       	cpc	r29, r1
  ee:	a1 f7       	brne	.-24     	; 0xd8 <getCode+0x14>
		code [i] = eeprom_read_byte (Mcode + i);
	}
	code [6] = 0;
  f0:	10 92 14 01 	sts	0x0114, r1

	if ((code [0] == 0xFF)&&(code [1] == 0xFF)&&(code [2] == 0xFF))
  f4:	20 91 0e 01 	lds	r18, 0x010E
  f8:	2f 3f       	cpi	r18, 0xFF	; 255
  fa:	f1 f4       	brne	.+60     	; 0x138 <getCode+0x74>
  fc:	80 91 0f 01 	lds	r24, 0x010F
 100:	8f 3f       	cpi	r24, 0xFF	; 255
 102:	d1 f4       	brne	.+52     	; 0x138 <getCode+0x74>
 104:	80 91 10 01 	lds	r24, 0x0110
 108:	8f 3f       	cpi	r24, 0xFF	; 255
 10a:	b1 f4       	brne	.+44     	; 0x138 <getCode+0x74>
	{
	//	set_default();
		code [0] = 'a';
 10c:	81 e6       	ldi	r24, 0x61	; 97
 10e:	80 93 0e 01 	sts	0x010E, r24
		code [1] = 'b'; 
 112:	82 e6       	ldi	r24, 0x62	; 98
 114:	80 93 0f 01 	sts	0x010F, r24
		code [2] = 'c';
 118:	83 e6       	ldi	r24, 0x63	; 99
 11a:	80 93 10 01 	sts	0x0110, r24
		code [3] = 'd';
 11e:	84 e6       	ldi	r24, 0x64	; 100
 120:	80 93 11 01 	sts	0x0111, r24
		code [4] = 'e'; 
 124:	85 e6       	ldi	r24, 0x65	; 101
 126:	80 93 12 01 	sts	0x0112, r24
		code [5] = 'f';
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	80 93 13 01 	sts	0x0113, r24
		printf("code = default = abcdef\n");
 130:	84 e6       	ldi	r24, 0x64	; 100
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	bf d3       	rcall	.+1918   	; 0x8b4 <puts>
 136:	32 c0       	rjmp	.+100    	; 0x19c <getCode+0xd8>
	}
	else
	{
		printf("code = %c%c%c%c%c%c\n", code[0], code[1], code[2], code[3], code[4], code[5]);
 138:	8d b7       	in	r24, 0x3d	; 61
 13a:	9e b7       	in	r25, 0x3e	; 62
 13c:	0e 97       	sbiw	r24, 0x0e	; 14
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	9e bf       	out	0x3e, r25	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	8d bf       	out	0x3d, r24	; 61
 148:	ed b7       	in	r30, 0x3d	; 61
 14a:	fe b7       	in	r31, 0x3e	; 62
 14c:	31 96       	adiw	r30, 0x01	; 1
 14e:	8c e7       	ldi	r24, 0x7C	; 124
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ad b7       	in	r26, 0x3d	; 61
 154:	be b7       	in	r27, 0x3e	; 62
 156:	12 96       	adiw	r26, 0x02	; 2
 158:	9c 93       	st	X, r25
 15a:	8e 93       	st	-X, r24
 15c:	11 97       	sbiw	r26, 0x01	; 1
 15e:	22 83       	std	Z+2, r18	; 0x02
 160:	13 82       	std	Z+3, r1	; 0x03
 162:	80 91 0f 01 	lds	r24, 0x010F
 166:	84 83       	std	Z+4, r24	; 0x04
 168:	15 82       	std	Z+5, r1	; 0x05
 16a:	80 91 10 01 	lds	r24, 0x0110
 16e:	86 83       	std	Z+6, r24	; 0x06
 170:	17 82       	std	Z+7, r1	; 0x07
 172:	80 91 11 01 	lds	r24, 0x0111
 176:	80 87       	std	Z+8, r24	; 0x08
 178:	11 86       	std	Z+9, r1	; 0x09
 17a:	80 91 12 01 	lds	r24, 0x0112
 17e:	82 87       	std	Z+10, r24	; 0x0a
 180:	13 86       	std	Z+11, r1	; 0x0b
 182:	80 91 13 01 	lds	r24, 0x0113
 186:	84 87       	std	Z+12, r24	; 0x0c
 188:	15 86       	std	Z+13, r1	; 0x0d
 18a:	7c d3       	rcall	.+1784   	; 0x884 <printf>
 18c:	8d b7       	in	r24, 0x3d	; 61
 18e:	9e b7       	in	r25, 0x3e	; 62
 190:	0e 96       	adiw	r24, 0x0e	; 14
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	9e bf       	out	0x3e, r25	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	8d bf       	out	0x3d, r24	; 61
	}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <main>:
int main(void)
{
 1a6:	5f 92       	push	r5
 1a8:	6f 92       	push	r6
 1aa:	7f 92       	push	r7
 1ac:	8f 92       	push	r8
 1ae:	9f 92       	push	r9
 1b0:	af 92       	push	r10
 1b2:	bf 92       	push	r11
 1b4:	cf 92       	push	r12
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	df 93       	push	r29
 1c2:	cf 93       	push	r28
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	2f 97       	sbiw	r28, 0x0f	; 15
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	cd bf       	out	0x3d, r28	; 61
	// Khoi tao PORT IN/OUT
	gpioInit();
 1d4:	44 df       	rcall	.-376    	; 0x5e <gpioInit>
	// Khoi tao uart
	uartInit();
 1d6:	5c d2       	rcall	.+1208   	; 0x690 <uartInit>
	I_LED(ON);
 1d8:	c2 98       	cbi	0x18, 2	; 24
	printf("Start\n");
 1da:	81 e9       	ldi	r24, 0x91	; 145
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	6a d3       	rcall	.+1748   	; 0x8b4 <puts>
	I_LED(OFF);
 1e0:	c2 9a       	sbi	0x18, 2	; 24
	getCode();
 1e2:	70 df       	rcall	.-288    	; 0xc4 <getCode>
	
	while (1)
	{
		// Nhan duoc du lieu
		//printf("\n%d",PIND);
		rf_len = M_Get_Frame(str,15);
 1e4:	6e 01       	movw	r12, r28
 1e6:	08 94       	sec
 1e8:	c1 1c       	adc	r12, r1
 1ea:	d1 1c       	adc	r13, r1
							eeprom_write_byte (Mcode + i,str[i]);
						}
						
						code[6]=0;
						I_LED(OFF);
						printf("new code = %c%c%c%c%c%c\n", str[0],str[1],str[2],str[3],str[4],str[5]);
 1ec:	47 e9       	ldi	r20, 0x97	; 151
 1ee:	84 2e       	mov	r8, r20
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	94 2e       	mov	r9, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f4:	38 ec       	ldi	r19, 0xC8	; 200
 1f6:	e3 2e       	mov	r14, r19
 1f8:	f1 2c       	mov	r15, r1
			if(rf_len){
				if (coderf[6]==0){
					for (int i = 0; i < COMMAND; i++){
					coderf[i] = str[i];
					}
					coderf[6]++;
 1fa:	55 24       	eor	r5, r5
 1fc:	53 94       	inc	r5
				code[6] = '0';
				M_Sent_Frame(code,7);
			}
			if ((sw_1 &&(sw1 == 0)) || ((sw_1 == 0) &&(sw1)))
			{
				printf("\nL1 %d",sw1);
 1fe:	20 ee       	ldi	r18, 0xE0	; 224
 200:	a2 2e       	mov	r10, r18
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	b2 2e       	mov	r11, r18
				sw1 = sw_1;
				P_TURN (LIGHT1);
				code[6] = '9';
 206:	99 e3       	ldi	r25, 0x39	; 57
 208:	79 2e       	mov	r7, r25
				I_LED(OFF);
				_delay_ms(1000);			
			}
			if (sensor_in &&(sensorin == 0)){
				sensorin = sensor_in;
				code[6] = '0';
 20a:	80 e3       	ldi	r24, 0x30	; 48
 20c:	68 2e       	mov	r6, r24
	
	while (1)
	{
		// Nhan duoc du lieu
		//printf("\n%d",PIND);
		rf_len = M_Get_Frame(str,15);
 20e:	c6 01       	movw	r24, r12
 210:	6f e0       	ldi	r22, 0x0F	; 15
 212:	ae d1       	rcall	.+860    	; 0x570 <M_Get_Frame>
		if(!get_code){
 214:	80 99       	sbic	0x10, 0	; 16
 216:	8a c0       	rjmp	.+276    	; 0x32c <main+0x186>
			I_LED(ON);
 218:	c2 98       	cbi	0x18, 2	; 24
			if(rf_len){
 21a:	88 23       	and	r24, r24
 21c:	c1 f3       	breq	.-16     	; 0x20e <main+0x68>
				if (coderf[6]==0){
 21e:	80 91 1b 01 	lds	r24, 0x011B
 222:	88 23       	and	r24, r24
 224:	a9 f4       	brne	.+42     	; 0x250 <main+0xaa>
					for (int i = 0; i < COMMAND; i++){
					coderf[i] = str[i];
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	80 93 15 01 	sts	0x0115, r24
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	80 93 16 01 	sts	0x0116, r24
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	80 93 17 01 	sts	0x0117, r24
 238:	8c 81       	ldd	r24, Y+4	; 0x04
 23a:	80 93 18 01 	sts	0x0118, r24
 23e:	8d 81       	ldd	r24, Y+5	; 0x05
 240:	80 93 19 01 	sts	0x0119, r24
 244:	8e 81       	ldd	r24, Y+6	; 0x06
 246:	80 93 1a 01 	sts	0x011A, r24
					}
					coderf[6]++;
 24a:	50 92 1b 01 	sts	0x011B, r5
 24e:	df cf       	rjmp	.-66     	; 0x20e <main+0x68>
				}
				else{
					if (findstr(coderf,COMMAND,str,COMMAND)!=(-1))
 250:	85 e1       	ldi	r24, 0x15	; 21
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	66 e0       	ldi	r22, 0x06	; 6
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	a6 01       	movw	r20, r12
 25a:	26 e0       	ldi	r18, 0x06	; 6
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	4c d2       	rcall	.+1176   	; 0x6f8 <findstr>
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	9f 4f       	sbci	r25, 0xFF	; 255
 264:	31 f0       	breq	.+12     	; 0x272 <main+0xcc>
						coderf[6]++;
 266:	80 91 1b 01 	lds	r24, 0x011B
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	80 93 1b 01 	sts	0x011B, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <main+0xd0>
					else
						coderf[6]=0;
 272:	10 92 1b 01 	sts	0x011B, r1
					if (coderf[6]==3){
 276:	80 91 1b 01 	lds	r24, 0x011B
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	41 f6       	brne	.-112    	; 0x20e <main+0x68>
 27e:	00 e0       	ldi	r16, 0x00	; 0
 280:	10 e0       	ldi	r17, 0x00	; 0
						for (int i = 0 ; i < COMMAND; i++){
							eeprom_write_byte (Mcode + i,str[i]);
 282:	80 91 e7 00 	lds	r24, 0x00E7
 286:	f6 01       	movw	r30, r12
 288:	e0 0f       	add	r30, r16
 28a:	f1 1f       	adc	r31, r17
 28c:	d8 01       	movw	r26, r16
 28e:	a8 0f       	add	r26, r24
 290:	b1 1d       	adc	r27, r1
 292:	cd 01       	movw	r24, r26
 294:	60 81       	ld	r22, Z
 296:	19 d5       	rcall	.+2610   	; 0xcca <__eewr_byte_m8>
					if (findstr(coderf,COMMAND,str,COMMAND)!=(-1))
						coderf[6]++;
					else
						coderf[6]=0;
					if (coderf[6]==3){
						for (int i = 0 ; i < COMMAND; i++){
 298:	0f 5f       	subi	r16, 0xFF	; 255
 29a:	1f 4f       	sbci	r17, 0xFF	; 255
 29c:	06 30       	cpi	r16, 0x06	; 6
 29e:	11 05       	cpc	r17, r1
 2a0:	81 f7       	brne	.-32     	; 0x282 <main+0xdc>
							eeprom_write_byte (Mcode + i,str[i]);
						}
						
						code[6]=0;
 2a2:	10 92 14 01 	sts	0x0114, r1
						I_LED(OFF);
 2a6:	c2 9a       	sbi	0x18, 2	; 24
						printf("new code = %c%c%c%c%c%c\n", str[0],str[1],str[2],str[3],str[4],str[5]);
 2a8:	2d b7       	in	r18, 0x3d	; 61
 2aa:	3e b7       	in	r19, 0x3e	; 62
 2ac:	2e 50       	subi	r18, 0x0E	; 14
 2ae:	30 40       	sbci	r19, 0x00	; 0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	3e bf       	out	0x3e, r19	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	2d bf       	out	0x3d, r18	; 61
 2ba:	ed b7       	in	r30, 0x3d	; 61
 2bc:	fe b7       	in	r31, 0x3e	; 62
 2be:	31 96       	adiw	r30, 0x01	; 1
 2c0:	ad b7       	in	r26, 0x3d	; 61
 2c2:	be b7       	in	r27, 0x3e	; 62
 2c4:	12 96       	adiw	r26, 0x02	; 2
 2c6:	9c 92       	st	X, r9
 2c8:	8e 92       	st	-X, r8
 2ca:	11 97       	sbiw	r26, 0x01	; 1
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	82 83       	std	Z+2, r24	; 0x02
 2d0:	13 82       	std	Z+3, r1	; 0x03
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	84 83       	std	Z+4, r24	; 0x04
 2d6:	15 82       	std	Z+5, r1	; 0x05
 2d8:	8b 81       	ldd	r24, Y+3	; 0x03
 2da:	86 83       	std	Z+6, r24	; 0x06
 2dc:	17 82       	std	Z+7, r1	; 0x07
 2de:	8c 81       	ldd	r24, Y+4	; 0x04
 2e0:	80 87       	std	Z+8, r24	; 0x08
 2e2:	11 86       	std	Z+9, r1	; 0x09
 2e4:	8d 81       	ldd	r24, Y+5	; 0x05
 2e6:	82 87       	std	Z+10, r24	; 0x0a
 2e8:	13 86       	std	Z+11, r1	; 0x0b
 2ea:	8e 81       	ldd	r24, Y+6	; 0x06
 2ec:	84 87       	std	Z+12, r24	; 0x0c
 2ee:	15 86       	std	Z+13, r1	; 0x0d
 2f0:	c9 d2       	rcall	.+1426   	; 0x884 <printf>
						printf("reset to apply changesss\n");
 2f2:	2d b7       	in	r18, 0x3d	; 61
 2f4:	3e b7       	in	r19, 0x3e	; 62
 2f6:	22 5f       	subi	r18, 0xF2	; 242
 2f8:	3f 4f       	sbci	r19, 0xFF	; 255
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	3e bf       	out	0x3e, r19	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	2d bf       	out	0x3d, r18	; 61
 304:	80 eb       	ldi	r24, 0xB0	; 176
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	d5 d2       	rcall	.+1450   	; 0x8b4 <puts>
						I_LED(ON);
 30a:	c2 98       	cbi	0x18, 2	; 24
 30c:	88 ee       	ldi	r24, 0xE8	; 232
 30e:	93 e0       	ldi	r25, 0x03	; 3
 310:	f7 01       	movw	r30, r14
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <main+0x16c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 316:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 318:	d9 f7       	brne	.-10     	; 0x310 <main+0x16a>
						_delay_ms(100);
						I_LED(OFF);
 31a:	c2 9a       	sbi	0x18, 2	; 24
 31c:	80 e1       	ldi	r24, 0x10	; 16
 31e:	97 e2       	ldi	r25, 0x27	; 39
 320:	f7 01       	movw	r30, r14
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <main+0x17c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 326:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 328:	d9 f7       	brne	.-10     	; 0x320 <main+0x17a>
 32a:	71 cf       	rjmp	.-286    	; 0x20e <main+0x68>
					}
				}
			}
		}
		else {
			if(rf_len)
 32c:	88 23       	and	r24, r24
 32e:	09 f4       	brne	.+2      	; 0x332 <main+0x18c>
 330:	75 c0       	rjmp	.+234    	; 0x41c <main+0x276>
		    {   
	 			I_LED(ON);
 332:	c2 98       	cbi	0x18, 2	; 24
				printptr(str,COMMAND+1);
 334:	c6 01       	movw	r24, r12
 336:	67 e0       	ldi	r22, 0x07	; 7
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	ba d1       	rcall	.+884    	; 0x6b0 <printptr>
				printf("\n");
 33c:	8a e0       	ldi	r24, 0x0A	; 10
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	b3 d2       	rcall	.+1382   	; 0x8a8 <putchar>
				if (findstr(code,COMMAND,str,COMMAND + 1)!=(-1))
 342:	8e e0       	ldi	r24, 0x0E	; 14
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	66 e0       	ldi	r22, 0x06	; 6
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	a6 01       	movw	r20, r12
 34c:	27 e0       	ldi	r18, 0x07	; 7
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	d3 d1       	rcall	.+934    	; 0x6f8 <findstr>
 352:	8f 5f       	subi	r24, 0xFF	; 255
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	09 f4       	brne	.+2      	; 0x35a <main+0x1b4>
 358:	60 c0       	rjmp	.+192    	; 0x41a <main+0x274>
				{ 
					if (str[COMMAND] == '1')
 35a:	8f 81       	ldd	r24, Y+7	; 0x07
 35c:	81 33       	cpi	r24, 0x31	; 49
 35e:	b1 f4       	brne	.+44     	; 0x38c <main+0x1e6>
					{ P_TURN(LIGHT1);printf("L1\n"); sensorin = sensor_in; _delay_ms(50);}
 360:	82 b3       	in	r24, 0x12	; 18
 362:	92 b3       	in	r25, 0x12	; 18
 364:	90 95       	com	r25
 366:	94 70       	andi	r25, 0x04	; 4
 368:	8b 7f       	andi	r24, 0xFB	; 251
 36a:	98 2b       	or	r25, r24
 36c:	92 bb       	out	0x12, r25	; 18
 36e:	89 ec       	ldi	r24, 0xC9	; 201
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	a0 d2       	rcall	.+1344   	; 0x8b4 <puts>
 374:	83 b3       	in	r24, 0x13	; 19
 376:	82 70       	andi	r24, 0x02	; 2
 378:	80 93 ee 00 	sts	0x00EE, r24
 37c:	84 ef       	ldi	r24, 0xF4	; 244
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	f7 01       	movw	r30, r14
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x1dc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 386:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 388:	d9 f7       	brne	.-10     	; 0x380 <main+0x1da>
 38a:	47 c0       	rjmp	.+142    	; 0x41a <main+0x274>
					else
					if (str[COMMAND] == 'a')
 38c:	81 36       	cpi	r24, 0x61	; 97
 38e:	81 f4       	brne	.+32     	; 0x3b0 <main+0x20a>
					{P_OUT (LIGHT1,0);printf("L10\n"); sensorin = sensor_in; _delay_ms(50);}
 390:	92 98       	cbi	0x12, 2	; 18
 392:	8c ec       	ldi	r24, 0xCC	; 204
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	8e d2       	rcall	.+1308   	; 0x8b4 <puts>
 398:	83 b3       	in	r24, 0x13	; 19
 39a:	82 70       	andi	r24, 0x02	; 2
 39c:	80 93 ee 00 	sts	0x00EE, r24
 3a0:	84 ef       	ldi	r24, 0xF4	; 244
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	f7 01       	movw	r30, r14
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <main+0x200>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ac:	d9 f7       	brne	.-10     	; 0x3a4 <main+0x1fe>
 3ae:	35 c0       	rjmp	.+106    	; 0x41a <main+0x274>
					else
					if (str[COMMAND] == 'A')
 3b0:	81 34       	cpi	r24, 0x41	; 65
 3b2:	81 f4       	brne	.+32     	; 0x3d4 <main+0x22e>
					{P_OUT (LIGHT1,1);printf("L11\n"); sensorin = sensor_in; _delay_ms(50);}
 3b4:	92 9a       	sbi	0x12, 2	; 18
 3b6:	80 ed       	ldi	r24, 0xD0	; 208
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	7c d2       	rcall	.+1272   	; 0x8b4 <puts>
 3bc:	83 b3       	in	r24, 0x13	; 19
 3be:	82 70       	andi	r24, 0x02	; 2
 3c0:	80 93 ee 00 	sts	0x00EE, r24
 3c4:	84 ef       	ldi	r24, 0xF4	; 244
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	f7 01       	movw	r30, r14
 3ca:	31 97       	sbiw	r30, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <main+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3d0:	d9 f7       	brne	.-10     	; 0x3c8 <main+0x222>
 3d2:	23 c0       	rjmp	.+70     	; 0x41a <main+0x274>
					else
					if (str[COMMAND] == '0'){
 3d4:	80 33       	cpi	r24, 0x30	; 48
 3d6:	81 f4       	brne	.+32     	; 0x3f8 <main+0x252>
						printf("ALL-0\n");
 3d8:	84 ed       	ldi	r24, 0xD4	; 212
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	6b d2       	rcall	.+1238   	; 0x8b4 <puts>
						P_OUT (LIGHT1,0);
 3de:	92 98       	cbi	0x12, 2	; 18
						sensorin = sensor_in;
 3e0:	83 b3       	in	r24, 0x13	; 19
 3e2:	82 70       	andi	r24, 0x02	; 2
 3e4:	80 93 ee 00 	sts	0x00EE, r24
 3e8:	84 ef       	ldi	r24, 0xF4	; 244
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	f7 01       	movw	r30, r14
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <main+0x248>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f4:	d9 f7       	brne	.-10     	; 0x3ec <main+0x246>
 3f6:	11 c0       	rjmp	.+34     	; 0x41a <main+0x274>
						_delay_ms(50);
					}
					else
					if (str[COMMAND] == '9'){
 3f8:	89 33       	cpi	r24, 0x39	; 57
 3fa:	79 f4       	brne	.+30     	; 0x41a <main+0x274>
						printf("ALL-1\n");
 3fc:	8a ed       	ldi	r24, 0xDA	; 218
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	59 d2       	rcall	.+1202   	; 0x8b4 <puts>
						P_OUT (LIGHT1,1);
 402:	92 9a       	sbi	0x12, 2	; 18
						sensorin = sensor_in;;
 404:	83 b3       	in	r24, 0x13	; 19
 406:	82 70       	andi	r24, 0x02	; 2
 408:	80 93 ee 00 	sts	0x00EE, r24
 40c:	84 ef       	ldi	r24, 0xF4	; 244
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	f7 01       	movw	r30, r14
 412:	31 97       	sbiw	r30, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <main+0x26c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 416:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 418:	d9 f7       	brne	.-10     	; 0x410 <main+0x26a>
						_delay_ms(50);
					}
				}
				I_LED(OFF);
 41a:	c2 9a       	sbi	0x18, 2	; 24
			}
			if (sensor_in == 0) {
 41c:	99 99       	sbic	0x13, 1	; 19
 41e:	13 c0       	rjmp	.+38     	; 0x446 <main+0x2a0>
				I_LED(ON);
 420:	c2 98       	cbi	0x18, 2	; 24
				sensorin = sensor_in;
 422:	83 b3       	in	r24, 0x13	; 19
 424:	82 70       	andi	r24, 0x02	; 2
 426:	80 93 ee 00 	sts	0x00EE, r24
				code[6] = '9';
 42a:	70 92 14 01 	sts	0x0114, r7
				M_Sent_Frame(code,7);
 42e:	8e e0       	ldi	r24, 0x0E	; 14
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	67 e0       	ldi	r22, 0x07	; 7
 434:	03 d1       	rcall	.+518    	; 0x63c <M_Sent_Frame>
				I_LED(OFF);
 436:	c2 9a       	sbi	0x18, 2	; 24
 438:	80 e1       	ldi	r24, 0x10	; 16
 43a:	97 e2       	ldi	r25, 0x27	; 39
 43c:	f7 01       	movw	r30, r14
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <main+0x298>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 442:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 444:	d9 f7       	brne	.-10     	; 0x43c <main+0x296>
				_delay_ms(1000);			
			}
			if (sensor_in &&(sensorin == 0)){
 446:	99 9b       	sbis	0x13, 1	; 19
 448:	0e c0       	rjmp	.+28     	; 0x466 <__stack+0x7>
 44a:	80 91 ee 00 	lds	r24, 0x00EE
 44e:	88 23       	and	r24, r24
 450:	51 f4       	brne	.+20     	; 0x466 <__stack+0x7>
				sensorin = sensor_in;
 452:	83 b3       	in	r24, 0x13	; 19
 454:	82 70       	andi	r24, 0x02	; 2
 456:	80 93 ee 00 	sts	0x00EE, r24
				code[6] = '0';
 45a:	60 92 14 01 	sts	0x0114, r6
				M_Sent_Frame(code,7);
 45e:	8e e0       	ldi	r24, 0x0E	; 14
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	67 e0       	ldi	r22, 0x07	; 7
 464:	eb d0       	rcall	.+470    	; 0x63c <M_Sent_Frame>
			}
			if ((sw_1 &&(sw1 == 0)) || ((sw_1 == 0) &&(sw1)))
 466:	98 9b       	sbis	0x13, 0	; 19
 468:	04 c0       	rjmp	.+8      	; 0x472 <__stack+0x13>
 46a:	80 91 e8 00 	lds	r24, 0x00E8
 46e:	88 23       	and	r24, r24
 470:	31 f0       	breq	.+12     	; 0x47e <__stack+0x1f>
 472:	98 99       	sbic	0x13, 0	; 19
 474:	29 c0       	rjmp	.+82     	; 0x4c8 <__stack+0x69>
 476:	80 91 e8 00 	lds	r24, 0x00E8
 47a:	88 23       	and	r24, r24
 47c:	29 f1       	breq	.+74     	; 0x4c8 <__stack+0x69>
			{
				printf("\nL1 %d",sw1);
 47e:	00 d0       	rcall	.+0      	; 0x480 <__stack+0x21>
 480:	00 d0       	rcall	.+0      	; 0x482 <__stack+0x23>
 482:	ed b7       	in	r30, 0x3d	; 61
 484:	fe b7       	in	r31, 0x3e	; 62
 486:	31 96       	adiw	r30, 0x01	; 1
 488:	ad b7       	in	r26, 0x3d	; 61
 48a:	be b7       	in	r27, 0x3e	; 62
 48c:	12 96       	adiw	r26, 0x02	; 2
 48e:	bc 92       	st	X, r11
 490:	ae 92       	st	-X, r10
 492:	11 97       	sbiw	r26, 0x01	; 1
 494:	80 91 e8 00 	lds	r24, 0x00E8
 498:	82 83       	std	Z+2, r24	; 0x02
 49a:	13 82       	std	Z+3, r1	; 0x03
 49c:	f3 d1       	rcall	.+998    	; 0x884 <printf>
				sw1 = sw_1;
 49e:	83 b3       	in	r24, 0x13	; 19
 4a0:	81 70       	andi	r24, 0x01	; 1
 4a2:	80 93 e8 00 	sts	0x00E8, r24
				P_TURN (LIGHT1);
 4a6:	92 b3       	in	r25, 0x12	; 18
 4a8:	82 b3       	in	r24, 0x12	; 18
 4aa:	80 95       	com	r24
 4ac:	84 70       	andi	r24, 0x04	; 4
 4ae:	9b 7f       	andi	r25, 0xFB	; 251
 4b0:	89 2b       	or	r24, r25
 4b2:	82 bb       	out	0x12, r24	; 18
				code[6] = '9';
 4b4:	70 92 14 01 	sts	0x0114, r7
				M_Sent_Frame(code,7);
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	8e e0       	ldi	r24, 0x0E	; 14
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	67 e0       	ldi	r22, 0x07	; 7
 4c6:	ba d0       	rcall	.+372    	; 0x63c <M_Sent_Frame>
			}
			I_LED(OFF);
 4c8:	c2 9a       	sbi	0x18, 2	; 24
 4ca:	a1 ce       	rjmp	.-702    	; 0x20e <main+0x68>

000004cc <M_Get_Pulsestart>:
//==============================================================================
unsigned char M_Get_Pulsestart()
{
     unsigned int i;
//	 printf("\n%d",i);
	 if(Data_In)
 4cc:	b1 9b       	sbis	0x16, 1	; 22
 4ce:	18 c0       	rjmp	.+48     	; 0x500 <M_Get_Pulsestart+0x34>
	 {	
  	   if((Data_In));
 4d0:	86 b3       	in	r24, 0x16	; 22
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	26 e2       	ldi	r18, 0x26	; 38
 4d8:	32 e0       	ldi	r19, 0x02	; 2
 4da:	f9 01       	movw	r30, r18
 4dc:	31 97       	sbiw	r30, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <M_Get_Pulsestart+0x10>
  		   for(i=0;i<35;i++)
 	 	   {
			  _delay_us(TIME);
 	         if((Data_In)==0) break;        
 4e0:	b1 9b       	sbis	0x16, 1	; 22
 4e2:	05 c0       	rjmp	.+10     	; 0x4ee <M_Get_Pulsestart+0x22>
     unsigned int i;
//	 printf("\n%d",i);
	 if(Data_In)
	 {	
  	   if((Data_In));
  		   for(i=0;i<35;i++)
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	83 32       	cpi	r24, 0x23	; 35
 4e8:	91 05       	cpc	r25, r1
 4ea:	b9 f7       	brne	.-18     	; 0x4da <M_Get_Pulsestart+0xe>
 4ec:	09 c0       	rjmp	.+18     	; 0x500 <M_Get_Pulsestart+0x34>
 	 	   {
			  _delay_us(TIME);
 	         if((Data_In)==0) break;        
 		    }
			//printf("\n%d",i);
  	   if((i<29)&&(i>=0)) {return 0;}
 4ee:	8d 31       	cpi	r24, 0x1D	; 29
 4f0:	91 05       	cpc	r25, r1
 4f2:	30 f0       	brcs	.+12     	; 0x500 <M_Get_Pulsestart+0x34>
   		  else if (i>30) {return 0;}
 4f4:	4f 97       	sbiw	r24, 0x1f	; 31
 4f6:	20 f4       	brcc	.+8      	; 0x500 <M_Get_Pulsestart+0x34>
  	   else { while((Data_In)==0); return 1;}
 4f8:	b1 9b       	sbis	0x16, 1	; 22
 4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <M_Get_Pulsestart+0x2c>
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	08 95       	ret
 500:	80 e0       	ldi	r24, 0x00	; 0
	}
	else return 0;

}
 502:	08 95       	ret

00000504 <M_Get_Byte>:


//==============================================================================
unsigned char M_Get_Byte()
{
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	27 e0       	ldi	r18, 0x07	; 7
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	ec e4       	ldi	r30, 0x4C	; 76
 50c:	f4 e0       	ldi	r31, 0x04	; 4
     for(i=0;i<8;i++)
     {       
		_delay_us(2*TIME);
		if ((Data_In))
		{
		  	data|=(1<<(7-i));	// nhan bit cao truoc
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	cf 01       	movw	r24, r30
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <M_Get_Byte+0x10>
     data=0;
	 
     for(i=0;i<8;i++)
     {       
		_delay_us(2*TIME);
		if ((Data_In))
 518:	b1 9b       	sbis	0x16, 1	; 22
 51a:	0a c0       	rjmp	.+20     	; 0x530 <M_Get_Byte+0x2c>
		{
		  	data|=(1<<(7-i));	// nhan bit cao truoc
			while (Data_In);
 51c:	b1 99       	sbic	0x16, 1	; 22
 51e:	fe cf       	rjmp	.-4      	; 0x51c <M_Get_Byte+0x18>
     for(i=0;i<8;i++)
     {       
		_delay_us(2*TIME);
		if ((Data_In))
		{
		  	data|=(1<<(7-i));	// nhan bit cao truoc
 520:	cb 01       	movw	r24, r22
 522:	02 2e       	mov	r0, r18
 524:	02 c0       	rjmp	.+4      	; 0x52a <M_Get_Byte+0x26>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	0a 94       	dec	r0
 52c:	e2 f7       	brpl	.-8      	; 0x526 <M_Get_Byte+0x22>
 52e:	48 2b       	or	r20, r24
			while (Data_In);
		}
		while ((Data_In)==0);
 530:	b1 9b       	sbis	0x16, 1	; 22
 532:	fe cf       	rjmp	.-4      	; 0x530 <M_Get_Byte+0x2c>
 534:	21 50       	subi	r18, 0x01	; 1
 536:	30 40       	sbci	r19, 0x00	; 0
unsigned char M_Get_Byte()
{
     unsigned char data,i;
     data=0;
	 
     for(i=0;i<8;i++)
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	2f 3f       	cpi	r18, 0xFF	; 255
 53c:	38 07       	cpc	r19, r24
 53e:	49 f7       	brne	.-46     	; 0x512 <M_Get_Byte+0xe>
			while (Data_In);
		}
		while ((Data_In)==0);
      }                  
     return data;
}
 540:	84 2f       	mov	r24, r20
 542:	08 95       	ret

00000544 <M_Get_Array>:

//==============================================================================
unsigned int M_Get_Array(unsigned char *array,unsigned char length)
{
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	06 2f       	mov	r16, r22
 54e:	ec 01       	movw	r28, r24
 550:	10 e0       	ldi	r17, 0x00	; 0
 552:	05 c0       	rjmp	.+10     	; 0x55e <M_Get_Array+0x1a>
     unsigned char i;
     for(i=0;i<length;i++)
     {
          array[i]=M_Get_Byte();
 554:	d7 df       	rcall	.-82     	; 0x504 <M_Get_Byte>
 556:	89 93       	st	Y+, r24
		  if (array[i] == '\r')
 558:	8d 30       	cpi	r24, 0x0D	; 13
 55a:	19 f0       	breq	.+6      	; 0x562 <M_Get_Array+0x1e>

//==============================================================================
unsigned int M_Get_Array(unsigned char *array,unsigned char length)
{
     unsigned char i;
     for(i=0;i<length;i++)
 55c:	1f 5f       	subi	r17, 0xFF	; 255
 55e:	10 17       	cp	r17, r16
 560:	c8 f3       	brcs	.-14     	; 0x554 <M_Get_Array+0x10>
          array[i]=M_Get_Byte();
		  if (array[i] == '\r')
		  	return (i);
     }
	 return i;
}
 562:	81 2f       	mov	r24, r17
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	08 95       	ret

00000570 <M_Get_Frame>:

//==============================================================================
unsigned int M_Get_Frame(unsigned char *data, unsigned int length)
{
 570:	1f 93       	push	r17
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	ec 01       	movw	r28, r24
 578:	16 2f       	mov	r17, r22
	 if (M_Get_Pulsestart())
 57a:	a8 df       	rcall	.-176    	; 0x4cc <M_Get_Pulsestart>
 57c:	88 23       	and	r24, r24
 57e:	19 f4       	brne	.+6      	; 0x586 <M_Get_Frame+0x16>
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	04 c0       	rjmp	.+8      	; 0x58e <M_Get_Frame+0x1e>
	 {
	 	
		unsigned int i = M_Get_Array(data,length);
 586:	ce 01       	movw	r24, r28
 588:	61 2f       	mov	r22, r17
 58a:	dc df       	rcall	.-72     	; 0x544 <M_Get_Array>
 58c:	9c 01       	movw	r18, r24
		return i;
	}	
	return 0;
	 	       
}
 58e:	c9 01       	movw	r24, r18
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	08 95       	ret

00000598 <M_Sent_Bit>:
/*
     Ma hoa Manchester:
     Bit 1 --> 10
     Bit 0 --> 01
*/
        if(i)  // toc do truyen 1K
 598:	88 23       	and	r24, r24
 59a:	49 f0       	breq	.+18     	; 0x5ae <M_Sent_Bit+0x16>
        {
                M_Data_Out(1);
 59c:	c0 9a       	sbi	0x18, 0	; 24
 59e:	82 e7       	ldi	r24, 0x72	; 114
 5a0:	96 e0       	ldi	r25, 0x06	; 6
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <M_Sent_Bit+0xa>
                _delay_us(TIME*3);  
                M_Data_Out(0);
 5a6:	c0 98       	cbi	0x18, 0	; 24
 5a8:	86 e2       	ldi	r24, 0x26	; 38
 5aa:	92 e0       	ldi	r25, 0x02	; 2
 5ac:	08 c0       	rjmp	.+16     	; 0x5be <M_Sent_Bit+0x26>
                _delay_us(TIME);
        }                     
        else   // toc do truyen 1K
        {
                M_Data_Out(1);
 5ae:	c0 9a       	sbi	0x18, 0	; 24
 5b0:	86 e2       	ldi	r24, 0x26	; 38
 5b2:	92 e0       	ldi	r25, 0x02	; 2
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <M_Sent_Bit+0x1c>
                _delay_us(TIME);    
                M_Data_Out(0);
 5b8:	c0 98       	cbi	0x18, 0	; 24
 5ba:	82 e7       	ldi	r24, 0x72	; 114
 5bc:	96 e0       	ldi	r25, 0x06	; 6
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	f1 f7       	brne	.-4      	; 0x5be <M_Sent_Bit+0x26>
 5c2:	08 95       	ret

000005c4 <M_Pulse_Start>:
        
}  
// ================================================
void M_Pulse_Start()    // Truyen bit 1 co toc do 4ms de bat dau khung truyen
{
 	M_Data_Out(1);
 5c4:	c0 9a       	sbi	0x18, 0	; 24
 5c6:	84 e7       	ldi	r24, 0x74	; 116
 5c8:	90 e4       	ldi	r25, 0x40	; 64
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <M_Pulse_Start+0x6>
	_delay_us(TIME*30);    
	M_Data_Out(0);
 5ce:	c0 98       	cbi	0x18, 0	; 24
 5d0:	86 e2       	ldi	r24, 0x26	; 38
 5d2:	92 e0       	ldi	r25, 0x02	; 2
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <M_Pulse_Start+0x10>
	_delay_us(TIME);
}                     
 5d8:	08 95       	ret

000005da <M_Sent_Byte>:
 
// ================================================
void M_Sent_Byte(unsigned char byte)
{
 5da:	ff 92       	push	r15
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	f8 2e       	mov	r15, r24
 5e6:	c0 e0       	ldi	r28, 0x00	; 0
 5e8:	d0 e0       	ldi	r29, 0x00	; 0
        unsigned char temp,i;
        temp=byte;
        for(i=0;i<8;i++)
        {
               // M_Sent_Bit((temp>>i)&0x01);      truyen tu bit thap den bit cao
               M_Sent_Bit(temp&(0x80>>i));      // truyen tu bit cao den bit thap
 5ea:	00 e8       	ldi	r16, 0x80	; 128
 5ec:	10 e0       	ldi	r17, 0x00	; 0
 5ee:	c8 01       	movw	r24, r16
 5f0:	0c 2e       	mov	r0, r28
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <M_Sent_Byte+0x1e>
 5f4:	95 95       	asr	r25
 5f6:	87 95       	ror	r24
 5f8:	0a 94       	dec	r0
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <M_Sent_Byte+0x1a>
 5fc:	8f 21       	and	r24, r15
 5fe:	cc df       	rcall	.-104    	; 0x598 <M_Sent_Bit>
 600:	21 96       	adiw	r28, 0x01	; 1
// ================================================
void M_Sent_Byte(unsigned char byte)
{
        unsigned char temp,i;
        temp=byte;
        for(i=0;i<8;i++)
 602:	c8 30       	cpi	r28, 0x08	; 8
 604:	d1 05       	cpc	r29, r1
 606:	99 f7       	brne	.-26     	; 0x5ee <M_Sent_Byte+0x14>
        {
               // M_Sent_Bit((temp>>i)&0x01);      truyen tu bit thap den bit cao
               M_Sent_Bit(temp&(0x80>>i));      // truyen tu bit cao den bit thap
        }
}
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	1f 91       	pop	r17
 60e:	0f 91       	pop	r16
 610:	ff 90       	pop	r15
 612:	08 95       	ret

00000614 <M_Sent_Array>:

// ================================================
void M_Sent_Array(unsigned char *array,unsigned char length)
{
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	06 2f       	mov	r16, r22
 61e:	ec 01       	movw	r28, r24
 620:	10 e0       	ldi	r17, 0x00	; 0
 622:	03 c0       	rjmp	.+6      	; 0x62a <M_Sent_Array+0x16>
        unsigned char i;
        for(i=0;i<length;i++)
        {
                M_Sent_Byte(array[i]);
 624:	89 91       	ld	r24, Y+
 626:	d9 df       	rcall	.-78     	; 0x5da <M_Sent_Byte>

// ================================================
void M_Sent_Array(unsigned char *array,unsigned char length)
{
        unsigned char i;
        for(i=0;i<length;i++)
 628:	1f 5f       	subi	r17, 0xFF	; 255
 62a:	10 17       	cp	r17, r16
 62c:	d8 f3       	brcs	.-10     	; 0x624 <M_Sent_Array+0x10>
        {
                M_Sent_Byte(array[i]);
        }
		M_Sent_Byte(13);
 62e:	8d e0       	ldi	r24, 0x0D	; 13
 630:	d4 df       	rcall	.-88     	; 0x5da <M_Sent_Byte>
}
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	08 95       	ret

0000063c <M_Sent_Frame>:

// ================================================
void M_Sent_Frame(unsigned char *data,unsigned char length)
{  
 63c:	df 92       	push	r13
 63e:	ef 92       	push	r14
 640:	ff 92       	push	r15
 642:	0f 93       	push	r16
 644:	1f 93       	push	r17
 646:	8c 01       	movw	r16, r24
 648:	d6 2e       	mov	r13, r22
//        M_Data_Start();
        M_Pulse_Start();
 64a:	bc df       	rcall	.-136    	; 0x5c4 <M_Pulse_Start>
       M_Sent_Array(data,length);
 64c:	c8 01       	movw	r24, r16
 64e:	6d 2d       	mov	r22, r13
 650:	e1 df       	rcall	.-62     	; 0x614 <M_Sent_Array>
 652:	82 e3       	ldi	r24, 0x32	; 50
 654:	e8 2e       	mov	r14, r24
 656:	8b e4       	ldi	r24, 0x4B	; 75
 658:	f8 2e       	mov	r15, r24
 65a:	c7 01       	movw	r24, r14
 65c:	01 97       	sbiw	r24, 0x01	; 1
 65e:	f1 f7       	brne	.-4      	; 0x65c <M_Sent_Frame+0x20>
		_delay_us(TIME*35);

		M_Pulse_Start();
 660:	b1 df       	rcall	.-158    	; 0x5c4 <M_Pulse_Start>
       M_Sent_Array(data,length);
 662:	c8 01       	movw	r24, r16
 664:	6d 2d       	mov	r22, r13
 666:	d6 df       	rcall	.-84     	; 0x614 <M_Sent_Array>
 668:	c7 01       	movw	r24, r14
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	f1 f7       	brne	.-4      	; 0x66a <M_Sent_Frame+0x2e>
	   _delay_ms(10);


		M_Pulse_Start();
        M_Sent_Array(data,length);*/
}
 66e:	1f 91       	pop	r17
 670:	0f 91       	pop	r16
 672:	ff 90       	pop	r15
 674:	ef 90       	pop	r14
 676:	df 90       	pop	r13
 678:	08 95       	ret

0000067a <uart_char_tx>:
unsigned int count;
unsigned char command[30];
//unsigned int bl;

//chuong trinh con phat du lieu 
void uart_char_tx(unsigned char chr){ 
 67a:	1f 93       	push	r17
 67c:	18 2f       	mov	r17, r24
    if(chr == '\n') uart_char_tx('\r');
 67e:	8a 30       	cpi	r24, 0x0A	; 10
 680:	11 f4       	brne	.+4      	; 0x686 <uart_char_tx+0xc>
 682:	8d e0       	ldi	r24, 0x0D	; 13
 684:	fa df       	rcall	.-12     	; 0x67a <uart_char_tx>
	while (bit_is_clear(UCSRA,UDRE)) {}; //cho den khi bit UDRE=1     
 686:	5d 9b       	sbis	0x0b, 5	; 11
 688:	fe cf       	rjmp	.-4      	; 0x686 <uart_char_tx+0xc>
            UDR=chr;
 68a:	1c b9       	out	0x0c, r17	; 12
}
 68c:	1f 91       	pop	r17
 68e:	08 95       	ret

00000690 <uartInit>:

static FILE uartstd = FDEV_SETUP_STREAM(uart_char_tx, NULL, _FDEV_SETUP_WRITE);
void uartInit(void)
	{     
	//set baud, 9600 ung voi f=16Mhz, xem bang 70 trang 165, Atmega32 datasheet 
    UBRRH=0;     
 690:	10 bc       	out	0x20, r1	; 32
    UBRRL=51;
 692:	83 e3       	ldi	r24, 0x33	; 51
 694:	89 b9       	out	0x09, r24	; 9
     
    //set khung truyen va kich hoat bo nhan du lieu 
    UCSRA=0x00; 
 696:	1b b8       	out	0x0b, r1	; 11
    UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); 
 698:	86 e8       	ldi	r24, 0x86	; 134
 69a:	80 bd       	out	0x20, r24	; 32
    UCSRB= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 69c:	88 e9       	ldi	r24, 0x98	; 152
 69e:	8a b9       	out	0x0a, r24	; 10
	stdout = &uartstd;
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	90 93 3f 01 	sts	0x013F, r25
 6a8:	80 93 3e 01 	sts	0x013E, r24
	sei();
 6ac:	78 94       	sei
}
 6ae:	08 95       	ret

000006b0 <printptr>:

void printptr ( unsigned char * pbuff, int ilent)
{
 6b0:	ef 92       	push	r14
 6b2:	ff 92       	push	r15
 6b4:	0f 93       	push	r16
 6b6:	1f 93       	push	r17
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	7c 01       	movw	r14, r24
 6be:	8b 01       	movw	r16, r22
 6c0:	c0 e0       	ldi	r28, 0x00	; 0
 6c2:	d0 e0       	ldi	r29, 0x00	; 0
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <printptr+0x22>
 	int i = 0;
	while (i<ilent)
	{
		uart_char_tx(pbuff[i]);
 6c6:	f7 01       	movw	r30, r14
 6c8:	ec 0f       	add	r30, r28
 6ca:	fd 1f       	adc	r31, r29
 6cc:	80 81       	ld	r24, Z
 6ce:	d5 df       	rcall	.-86     	; 0x67a <uart_char_tx>
		i++;
 6d0:	21 96       	adiw	r28, 0x01	; 1
}

void printptr ( unsigned char * pbuff, int ilent)
{
 	int i = 0;
	while (i<ilent)
 6d2:	c0 17       	cp	r28, r16
 6d4:	d1 07       	cpc	r29, r17
 6d6:	bc f3       	brlt	.-18     	; 0x6c6 <printptr+0x16>
	{
		uart_char_tx(pbuff[i]);
		i++;
	}

}
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	ff 90       	pop	r15
 6e2:	ef 90       	pop	r14
 6e4:	08 95       	ret

000006e6 <proc>:
}

void proc()
{
		
}
 6e6:	08 95       	ret

000006e8 <clear>:

void clear()
{
 6e8:	ec e1       	ldi	r30, 0x1C	; 28
 6ea:	f1 e0       	ldi	r31, 0x01	; 1
	for (int i = 0; i < 30; i++)
		command[i]= 0;
 6ec:	11 92       	st	Z+, r1
		
}

void clear()
{
	for (int i = 0; i < 30; i++)
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	ea 33       	cpi	r30, 0x3A	; 58
 6f2:	f8 07       	cpc	r31, r24
 6f4:	d9 f7       	brne	.-10     	; 0x6ec <clear+0x4>
		command[i]= 0;
}
 6f6:	08 95       	ret

000006f8 <findstr>:

unsigned int findstr(unsigned char * str,unsigned int lens, unsigned char * buffer, unsigned int lenb)
{
 6f8:	8f 92       	push	r8
 6fa:	9f 92       	push	r9
 6fc:	af 92       	push	r10
 6fe:	bf 92       	push	r11
 700:	cf 92       	push	r12
 702:	df 92       	push	r13
 704:	ef 92       	push	r14
 706:	ff 92       	push	r15
 708:	0f 93       	push	r16
 70a:	1f 93       	push	r17
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	4c 01       	movw	r8, r24
 712:	eb 01       	movw	r28, r22
 714:	5a 01       	movw	r10, r20
 716:	69 01       	movw	r12, r18
 718:	40 e0       	ldi	r20, 0x00	; 0
 71a:	50 e0       	ldi	r21, 0x00	; 0
	for(int i = 0; i <= lenb;i++)
	{
		for (int j = 0; j <= lens; j++)
		{
			if (str[j] != buffer[i+j])
				j = lens+1;
 71c:	7b 01       	movw	r14, r22
 71e:	08 94       	sec
 720:	e1 1c       	adc	r14, r1
 722:	f1 1c       	adc	r15, r1
			//printf("\n%u",j);
			if (j == lens - 1)
 724:	8b 01       	movw	r16, r22
 726:	01 50       	subi	r16, 0x01	; 1
 728:	10 40       	sbci	r17, 0x00	; 0
 72a:	16 c0       	rjmp	.+44     	; 0x758 <findstr+0x60>
{
	for(int i = 0; i <= lenb;i++)
	{
		for (int j = 0; j <= lens; j++)
		{
			if (str[j] != buffer[i+j])
 72c:	d4 01       	movw	r26, r8
 72e:	a2 0f       	add	r26, r18
 730:	b3 1f       	adc	r27, r19
 732:	f5 01       	movw	r30, r10
 734:	e2 0f       	add	r30, r18
 736:	f3 1f       	adc	r31, r19
 738:	e4 0f       	add	r30, r20
 73a:	f5 1f       	adc	r31, r21
 73c:	9c 91       	ld	r25, X
 73e:	80 81       	ld	r24, Z
 740:	98 13       	cpse	r25, r24
				j = lens+1;
 742:	97 01       	movw	r18, r14
			//printf("\n%u",j);
			if (j == lens - 1)
 744:	20 17       	cp	r18, r16
 746:	31 07       	cpc	r19, r17
 748:	81 f0       	breq	.+32     	; 0x76a <findstr+0x72>

unsigned int findstr(unsigned char * str,unsigned int lens, unsigned char * buffer, unsigned int lenb)
{
	for(int i = 0; i <= lenb;i++)
	{
		for (int j = 0; j <= lens; j++)
 74a:	2f 5f       	subi	r18, 0xFF	; 255
 74c:	3f 4f       	sbci	r19, 0xFF	; 255
 74e:	c2 17       	cp	r28, r18
 750:	d3 07       	cpc	r29, r19
 752:	60 f7       	brcc	.-40     	; 0x72c <findstr+0x34>
		command[i]= 0;
}

unsigned int findstr(unsigned char * str,unsigned int lens, unsigned char * buffer, unsigned int lenb)
{
	for(int i = 0; i <= lenb;i++)
 754:	4f 5f       	subi	r20, 0xFF	; 255
 756:	5f 4f       	sbci	r21, 0xFF	; 255
 758:	ba 01       	movw	r22, r20
 75a:	c4 16       	cp	r12, r20
 75c:	d5 06       	cpc	r13, r21
 75e:	18 f0       	brcs	.+6      	; 0x766 <findstr+0x6e>
 760:	20 e0       	ldi	r18, 0x00	; 0
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	f4 cf       	rjmp	.-24     	; 0x74e <findstr+0x56>
 766:	6f ef       	ldi	r22, 0xFF	; 255
 768:	7f ef       	ldi	r23, 0xFF	; 255
				return i;
		}
		
	}
	return (-1);
}
 76a:	cb 01       	movw	r24, r22
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	1f 91       	pop	r17
 772:	0f 91       	pop	r16
 774:	ff 90       	pop	r15
 776:	ef 90       	pop	r14
 778:	df 90       	pop	r13
 77a:	cf 90       	pop	r12
 77c:	bf 90       	pop	r11
 77e:	af 90       	pop	r10
 780:	9f 90       	pop	r9
 782:	8f 90       	pop	r8
 784:	08 95       	ret

00000786 <is_command>:

int is_command(unsigned char * str)
{
 786:	fc 01       	movw	r30, r24
 788:	af e1       	ldi	r26, 0x1F	; 31
 78a:	b1 e0       	ldi	r27, 0x01	; 1
 78c:	07 c0       	rjmp	.+14     	; 0x79c <is_command+0x16>
	int i = 0;
	while (str[i] != 0) {
		if (str[i] != command[i + 3])
 78e:	8d 91       	ld	r24, X+
 790:	31 96       	adiw	r30, 0x01	; 1
 792:	98 17       	cp	r25, r24
 794:	19 f0       	breq	.+6      	; 0x79c <is_command+0x16>
 796:	20 e0       	ldi	r18, 0x00	; 0
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	05 c0       	rjmp	.+10     	; 0x7a6 <is_command+0x20>
}

int is_command(unsigned char * str)
{
	int i = 0;
	while (str[i] != 0) {
 79c:	90 81       	ld	r25, Z
 79e:	99 23       	and	r25, r25
 7a0:	b1 f7       	brne	.-20     	; 0x78e <is_command+0x8>
 7a2:	21 e0       	ldi	r18, 0x01	; 1
 7a4:	30 e0       	ldi	r19, 0x00	; 0
		if (str[i] != command[i + 3])
			return 0;
		i++;
	}
	return 1;
}
 7a6:	c9 01       	movw	r24, r18
 7a8:	08 95       	ret

000007aa <__vector_11>:
	}

}
		
ISR(SIG_UART_RECV)
{ //trinh phuc vu ngat USART hoan tat nhan  
 7aa:	1f 92       	push	r1
 7ac:	0f 92       	push	r0
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	0f 92       	push	r0
 7b2:	11 24       	eor	r1, r1
 7b4:	2f 93       	push	r18
 7b6:	3f 93       	push	r19
 7b8:	4f 93       	push	r20
 7ba:	5f 93       	push	r21
 7bc:	6f 93       	push	r22
 7be:	7f 93       	push	r23
 7c0:	8f 93       	push	r24
 7c2:	9f 93       	push	r25
 7c4:	af 93       	push	r26
 7c6:	bf 93       	push	r27
 7c8:	ef 93       	push	r30
 7ca:	ff 93       	push	r31
command [count+3] = UDR;
 7cc:	60 91 3a 01 	lds	r22, 0x013A
 7d0:	70 91 3b 01 	lds	r23, 0x013B
 7d4:	8c b1       	in	r24, 0x0c	; 12
 7d6:	fb 01       	movw	r30, r22
 7d8:	e4 5e       	subi	r30, 0xE4	; 228
 7da:	fe 4f       	sbci	r31, 0xFE	; 254
 7dc:	83 83       	std	Z+3, r24	; 0x03
//	printf("%u\r\n",command[count+3]);
	
	if (command [count+3]==13)
 7de:	8d 30       	cpi	r24, 0x0D	; 13
 7e0:	f9 f4       	brne	.+62     	; 0x820 <__vector_11+0x76>
		{
			int er = uart_received(command +3,count);
 7e2:	8f e1       	ldi	r24, 0x1F	; 31
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	48 dc       	rcall	.-1904   	; 0x78 <uart_received>
			if (er) printf("\nBad Command\n-> ");
 7e8:	89 2b       	or	r24, r25
 7ea:	59 f0       	breq	.+22     	; 0x802 <__vector_11+0x58>
 7ec:	00 d0       	rcall	.+0      	; 0x7ee <__vector_11+0x44>
 7ee:	8f ee       	ldi	r24, 0xEF	; 239
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	ed b7       	in	r30, 0x3d	; 61
 7f4:	fe b7       	in	r31, 0x3e	; 62
 7f6:	92 83       	std	Z+2, r25	; 0x02
 7f8:	81 83       	std	Z+1, r24	; 0x01
 7fa:	44 d0       	rcall	.+136    	; 0x884 <printf>
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	03 c0       	rjmp	.+6      	; 0x808 <__vector_11+0x5e>
			else printf("\n");//printf("\n-> ");
 802:	8a e0       	ldi	r24, 0x0A	; 10
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	50 d0       	rcall	.+160    	; 0x8a8 <putchar>
			count = 0;
 808:	10 92 3b 01 	sts	0x013B, r1
 80c:	10 92 3a 01 	sts	0x013A, r1
 810:	ec e1       	ldi	r30, 0x1C	; 28
 812:	f1 e0       	ldi	r31, 0x01	; 1
}

void clear()
{
	for (int i = 0; i < 30; i++)
		command[i]= 0;
 814:	11 92       	st	Z+, r1
		
}

void clear()
{
	for (int i = 0; i < 30; i++)
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	ea 33       	cpi	r30, 0x3A	; 58
 81a:	f8 07       	cpc	r31, r24
 81c:	d9 f7       	brne	.-10     	; 0x814 <__vector_11+0x6a>
 81e:	0d c0       	rjmp	.+26     	; 0x83a <__vector_11+0x90>
			count = 0;
			clear();
		}
	else 
	{
		uart_char_tx(command [count+3]);
 820:	2c df       	rcall	.-424    	; 0x67a <uart_char_tx>
		count = (count + 1) %29;
 822:	80 91 3a 01 	lds	r24, 0x013A
 826:	90 91 3b 01 	lds	r25, 0x013B
 82a:	01 96       	adiw	r24, 0x01	; 1
 82c:	6d e1       	ldi	r22, 0x1D	; 29
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	15 d0       	rcall	.+42     	; 0x85c <__udivmodhi4>
 832:	90 93 3b 01 	sts	0x013B, r25
 836:	80 93 3a 01 	sts	0x013A, r24
	}
}
 83a:	ff 91       	pop	r31
 83c:	ef 91       	pop	r30
 83e:	bf 91       	pop	r27
 840:	af 91       	pop	r26
 842:	9f 91       	pop	r25
 844:	8f 91       	pop	r24
 846:	7f 91       	pop	r23
 848:	6f 91       	pop	r22
 84a:	5f 91       	pop	r21
 84c:	4f 91       	pop	r20
 84e:	3f 91       	pop	r19
 850:	2f 91       	pop	r18
 852:	0f 90       	pop	r0
 854:	0f be       	out	0x3f, r0	; 63
 856:	0f 90       	pop	r0
 858:	1f 90       	pop	r1
 85a:	18 95       	reti

0000085c <__udivmodhi4>:
 85c:	aa 1b       	sub	r26, r26
 85e:	bb 1b       	sub	r27, r27
 860:	51 e1       	ldi	r21, 0x11	; 17
 862:	07 c0       	rjmp	.+14     	; 0x872 <__udivmodhi4_ep>

00000864 <__udivmodhi4_loop>:
 864:	aa 1f       	adc	r26, r26
 866:	bb 1f       	adc	r27, r27
 868:	a6 17       	cp	r26, r22
 86a:	b7 07       	cpc	r27, r23
 86c:	10 f0       	brcs	.+4      	; 0x872 <__udivmodhi4_ep>
 86e:	a6 1b       	sub	r26, r22
 870:	b7 0b       	sbc	r27, r23

00000872 <__udivmodhi4_ep>:
 872:	88 1f       	adc	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	5a 95       	dec	r21
 878:	a9 f7       	brne	.-22     	; 0x864 <__udivmodhi4_loop>
 87a:	80 95       	com	r24
 87c:	90 95       	com	r25
 87e:	bc 01       	movw	r22, r24
 880:	cd 01       	movw	r24, r26
 882:	08 95       	ret

00000884 <printf>:
 884:	a0 e0       	ldi	r26, 0x00	; 0
 886:	b0 e0       	ldi	r27, 0x00	; 0
 888:	e7 e4       	ldi	r30, 0x47	; 71
 88a:	f4 e0       	ldi	r31, 0x04	; 4
 88c:	db c2       	rjmp	.+1462   	; 0xe44 <__prologue_saves__+0x20>
 88e:	fe 01       	movw	r30, r28
 890:	35 96       	adiw	r30, 0x05	; 5
 892:	61 91       	ld	r22, Z+
 894:	71 91       	ld	r23, Z+
 896:	80 91 3e 01 	lds	r24, 0x013E
 89a:	90 91 3f 01 	lds	r25, 0x013F
 89e:	af 01       	movw	r20, r30
 8a0:	3e d0       	rcall	.+124    	; 0x91e <vfprintf>
 8a2:	20 96       	adiw	r28, 0x00	; 0
 8a4:	e2 e0       	ldi	r30, 0x02	; 2
 8a6:	ea c2       	rjmp	.+1492   	; 0xe7c <__epilogue_restores__+0x20>

000008a8 <putchar>:
 8a8:	60 91 3e 01 	lds	r22, 0x013E
 8ac:	70 91 3f 01 	lds	r23, 0x013F
 8b0:	2f d2       	rcall	.+1118   	; 0xd10 <fputc>
 8b2:	08 95       	ret

000008b4 <puts>:
 8b4:	0f 93       	push	r16
 8b6:	1f 93       	push	r17
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	8c 01       	movw	r16, r24
 8be:	e0 91 3e 01 	lds	r30, 0x013E
 8c2:	f0 91 3f 01 	lds	r31, 0x013F
 8c6:	83 81       	ldd	r24, Z+3	; 0x03
 8c8:	81 ff       	sbrs	r24, 1
 8ca:	21 c0       	rjmp	.+66     	; 0x90e <puts+0x5a>
 8cc:	c0 e0       	ldi	r28, 0x00	; 0
 8ce:	d0 e0       	ldi	r29, 0x00	; 0
 8d0:	0d c0       	rjmp	.+26     	; 0x8ec <puts+0x38>
 8d2:	e0 91 3e 01 	lds	r30, 0x013E
 8d6:	f0 91 3f 01 	lds	r31, 0x013F
 8da:	20 85       	ldd	r18, Z+8	; 0x08
 8dc:	31 85       	ldd	r19, Z+9	; 0x09
 8de:	bf 01       	movw	r22, r30
 8e0:	f9 01       	movw	r30, r18
 8e2:	09 95       	icall
 8e4:	89 2b       	or	r24, r25
 8e6:	11 f0       	breq	.+4      	; 0x8ec <puts+0x38>
 8e8:	cf ef       	ldi	r28, 0xFF	; 255
 8ea:	df ef       	ldi	r29, 0xFF	; 255
 8ec:	f8 01       	movw	r30, r16
 8ee:	81 91       	ld	r24, Z+
 8f0:	8f 01       	movw	r16, r30
 8f2:	88 23       	and	r24, r24
 8f4:	71 f7       	brne	.-36     	; 0x8d2 <puts+0x1e>
 8f6:	e0 91 3e 01 	lds	r30, 0x013E
 8fa:	f0 91 3f 01 	lds	r31, 0x013F
 8fe:	20 85       	ldd	r18, Z+8	; 0x08
 900:	31 85       	ldd	r19, Z+9	; 0x09
 902:	8a e0       	ldi	r24, 0x0A	; 10
 904:	bf 01       	movw	r22, r30
 906:	f9 01       	movw	r30, r18
 908:	09 95       	icall
 90a:	89 2b       	or	r24, r25
 90c:	11 f0       	breq	.+4      	; 0x912 <puts+0x5e>
 90e:	cf ef       	ldi	r28, 0xFF	; 255
 910:	df ef       	ldi	r29, 0xFF	; 255
 912:	ce 01       	movw	r24, r28
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	08 95       	ret

0000091e <vfprintf>:
 91e:	ab e0       	ldi	r26, 0x0B	; 11
 920:	b0 e0       	ldi	r27, 0x00	; 0
 922:	e4 e9       	ldi	r30, 0x94	; 148
 924:	f4 e0       	ldi	r31, 0x04	; 4
 926:	7e c2       	rjmp	.+1276   	; 0xe24 <__prologue_saves__>
 928:	3c 01       	movw	r6, r24
 92a:	2b 01       	movw	r4, r22
 92c:	5a 01       	movw	r10, r20
 92e:	fc 01       	movw	r30, r24
 930:	17 82       	std	Z+7, r1	; 0x07
 932:	16 82       	std	Z+6, r1	; 0x06
 934:	83 81       	ldd	r24, Z+3	; 0x03
 936:	81 fd       	sbrc	r24, 1
 938:	03 c0       	rjmp	.+6      	; 0x940 <vfprintf+0x22>
 93a:	6f ef       	ldi	r22, 0xFF	; 255
 93c:	7f ef       	ldi	r23, 0xFF	; 255
 93e:	b9 c1       	rjmp	.+882    	; 0xcb2 <vfprintf+0x394>
 940:	9a e0       	ldi	r25, 0x0A	; 10
 942:	89 2e       	mov	r8, r25
 944:	1e 01       	movw	r2, r28
 946:	08 94       	sec
 948:	21 1c       	adc	r2, r1
 94a:	31 1c       	adc	r3, r1
 94c:	f3 01       	movw	r30, r6
 94e:	23 81       	ldd	r18, Z+3	; 0x03
 950:	f2 01       	movw	r30, r4
 952:	23 fd       	sbrc	r18, 3
 954:	85 91       	lpm	r24, Z+
 956:	23 ff       	sbrs	r18, 3
 958:	81 91       	ld	r24, Z+
 95a:	2f 01       	movw	r4, r30
 95c:	88 23       	and	r24, r24
 95e:	09 f4       	brne	.+2      	; 0x962 <vfprintf+0x44>
 960:	a5 c1       	rjmp	.+842    	; 0xcac <vfprintf+0x38e>
 962:	85 32       	cpi	r24, 0x25	; 37
 964:	39 f4       	brne	.+14     	; 0x974 <vfprintf+0x56>
 966:	23 fd       	sbrc	r18, 3
 968:	85 91       	lpm	r24, Z+
 96a:	23 ff       	sbrs	r18, 3
 96c:	81 91       	ld	r24, Z+
 96e:	2f 01       	movw	r4, r30
 970:	85 32       	cpi	r24, 0x25	; 37
 972:	21 f4       	brne	.+8      	; 0x97c <vfprintf+0x5e>
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	b3 01       	movw	r22, r6
 978:	cb d1       	rcall	.+918    	; 0xd10 <fputc>
 97a:	e8 cf       	rjmp	.-48     	; 0x94c <vfprintf+0x2e>
 97c:	98 2f       	mov	r25, r24
 97e:	ff 24       	eor	r15, r15
 980:	ee 24       	eor	r14, r14
 982:	99 24       	eor	r9, r9
 984:	ff e1       	ldi	r31, 0x1F	; 31
 986:	ff 15       	cp	r31, r15
 988:	d0 f0       	brcs	.+52     	; 0x9be <vfprintf+0xa0>
 98a:	9b 32       	cpi	r25, 0x2B	; 43
 98c:	69 f0       	breq	.+26     	; 0x9a8 <vfprintf+0x8a>
 98e:	9c 32       	cpi	r25, 0x2C	; 44
 990:	28 f4       	brcc	.+10     	; 0x99c <vfprintf+0x7e>
 992:	90 32       	cpi	r25, 0x20	; 32
 994:	59 f0       	breq	.+22     	; 0x9ac <vfprintf+0x8e>
 996:	93 32       	cpi	r25, 0x23	; 35
 998:	91 f4       	brne	.+36     	; 0x9be <vfprintf+0xa0>
 99a:	0e c0       	rjmp	.+28     	; 0x9b8 <vfprintf+0x9a>
 99c:	9d 32       	cpi	r25, 0x2D	; 45
 99e:	49 f0       	breq	.+18     	; 0x9b2 <vfprintf+0x94>
 9a0:	90 33       	cpi	r25, 0x30	; 48
 9a2:	69 f4       	brne	.+26     	; 0x9be <vfprintf+0xa0>
 9a4:	41 e0       	ldi	r20, 0x01	; 1
 9a6:	24 c0       	rjmp	.+72     	; 0x9f0 <vfprintf+0xd2>
 9a8:	52 e0       	ldi	r21, 0x02	; 2
 9aa:	f5 2a       	or	r15, r21
 9ac:	84 e0       	ldi	r24, 0x04	; 4
 9ae:	f8 2a       	or	r15, r24
 9b0:	28 c0       	rjmp	.+80     	; 0xa02 <vfprintf+0xe4>
 9b2:	98 e0       	ldi	r25, 0x08	; 8
 9b4:	f9 2a       	or	r15, r25
 9b6:	25 c0       	rjmp	.+74     	; 0xa02 <vfprintf+0xe4>
 9b8:	e0 e1       	ldi	r30, 0x10	; 16
 9ba:	fe 2a       	or	r15, r30
 9bc:	22 c0       	rjmp	.+68     	; 0xa02 <vfprintf+0xe4>
 9be:	f7 fc       	sbrc	r15, 7
 9c0:	29 c0       	rjmp	.+82     	; 0xa14 <vfprintf+0xf6>
 9c2:	89 2f       	mov	r24, r25
 9c4:	80 53       	subi	r24, 0x30	; 48
 9c6:	8a 30       	cpi	r24, 0x0A	; 10
 9c8:	70 f4       	brcc	.+28     	; 0x9e6 <vfprintf+0xc8>
 9ca:	f6 fe       	sbrs	r15, 6
 9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <vfprintf+0xba>
 9ce:	98 9c       	mul	r9, r8
 9d0:	90 2c       	mov	r9, r0
 9d2:	11 24       	eor	r1, r1
 9d4:	98 0e       	add	r9, r24
 9d6:	15 c0       	rjmp	.+42     	; 0xa02 <vfprintf+0xe4>
 9d8:	e8 9c       	mul	r14, r8
 9da:	e0 2c       	mov	r14, r0
 9dc:	11 24       	eor	r1, r1
 9de:	e8 0e       	add	r14, r24
 9e0:	f0 e2       	ldi	r31, 0x20	; 32
 9e2:	ff 2a       	or	r15, r31
 9e4:	0e c0       	rjmp	.+28     	; 0xa02 <vfprintf+0xe4>
 9e6:	9e 32       	cpi	r25, 0x2E	; 46
 9e8:	29 f4       	brne	.+10     	; 0x9f4 <vfprintf+0xd6>
 9ea:	f6 fc       	sbrc	r15, 6
 9ec:	5f c1       	rjmp	.+702    	; 0xcac <vfprintf+0x38e>
 9ee:	40 e4       	ldi	r20, 0x40	; 64
 9f0:	f4 2a       	or	r15, r20
 9f2:	07 c0       	rjmp	.+14     	; 0xa02 <vfprintf+0xe4>
 9f4:	9c 36       	cpi	r25, 0x6C	; 108
 9f6:	19 f4       	brne	.+6      	; 0x9fe <vfprintf+0xe0>
 9f8:	50 e8       	ldi	r21, 0x80	; 128
 9fa:	f5 2a       	or	r15, r21
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <vfprintf+0xe4>
 9fe:	98 36       	cpi	r25, 0x68	; 104
 a00:	49 f4       	brne	.+18     	; 0xa14 <vfprintf+0xf6>
 a02:	f2 01       	movw	r30, r4
 a04:	23 fd       	sbrc	r18, 3
 a06:	95 91       	lpm	r25, Z+
 a08:	23 ff       	sbrs	r18, 3
 a0a:	91 91       	ld	r25, Z+
 a0c:	2f 01       	movw	r4, r30
 a0e:	99 23       	and	r25, r25
 a10:	09 f0       	breq	.+2      	; 0xa14 <vfprintf+0xf6>
 a12:	b8 cf       	rjmp	.-144    	; 0x984 <vfprintf+0x66>
 a14:	89 2f       	mov	r24, r25
 a16:	85 54       	subi	r24, 0x45	; 69
 a18:	83 30       	cpi	r24, 0x03	; 3
 a1a:	18 f0       	brcs	.+6      	; 0xa22 <vfprintf+0x104>
 a1c:	80 52       	subi	r24, 0x20	; 32
 a1e:	83 30       	cpi	r24, 0x03	; 3
 a20:	38 f4       	brcc	.+14     	; 0xa30 <vfprintf+0x112>
 a22:	44 e0       	ldi	r20, 0x04	; 4
 a24:	50 e0       	ldi	r21, 0x00	; 0
 a26:	a4 0e       	add	r10, r20
 a28:	b5 1e       	adc	r11, r21
 a2a:	5f e3       	ldi	r21, 0x3F	; 63
 a2c:	59 83       	std	Y+1, r21	; 0x01
 a2e:	0f c0       	rjmp	.+30     	; 0xa4e <vfprintf+0x130>
 a30:	93 36       	cpi	r25, 0x63	; 99
 a32:	31 f0       	breq	.+12     	; 0xa40 <vfprintf+0x122>
 a34:	93 37       	cpi	r25, 0x73	; 115
 a36:	79 f0       	breq	.+30     	; 0xa56 <vfprintf+0x138>
 a38:	93 35       	cpi	r25, 0x53	; 83
 a3a:	09 f0       	breq	.+2      	; 0xa3e <vfprintf+0x120>
 a3c:	52 c0       	rjmp	.+164    	; 0xae2 <vfprintf+0x1c4>
 a3e:	1f c0       	rjmp	.+62     	; 0xa7e <vfprintf+0x160>
 a40:	f5 01       	movw	r30, r10
 a42:	80 81       	ld	r24, Z
 a44:	89 83       	std	Y+1, r24	; 0x01
 a46:	42 e0       	ldi	r20, 0x02	; 2
 a48:	50 e0       	ldi	r21, 0x00	; 0
 a4a:	a4 0e       	add	r10, r20
 a4c:	b5 1e       	adc	r11, r21
 a4e:	61 01       	movw	r12, r2
 a50:	01 e0       	ldi	r16, 0x01	; 1
 a52:	10 e0       	ldi	r17, 0x00	; 0
 a54:	11 c0       	rjmp	.+34     	; 0xa78 <vfprintf+0x15a>
 a56:	f5 01       	movw	r30, r10
 a58:	c0 80       	ld	r12, Z
 a5a:	d1 80       	ldd	r13, Z+1	; 0x01
 a5c:	f6 fc       	sbrc	r15, 6
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <vfprintf+0x148>
 a60:	6f ef       	ldi	r22, 0xFF	; 255
 a62:	7f ef       	ldi	r23, 0xFF	; 255
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <vfprintf+0x14c>
 a66:	69 2d       	mov	r22, r9
 a68:	70 e0       	ldi	r23, 0x00	; 0
 a6a:	42 e0       	ldi	r20, 0x02	; 2
 a6c:	50 e0       	ldi	r21, 0x00	; 0
 a6e:	a4 0e       	add	r10, r20
 a70:	b5 1e       	adc	r11, r21
 a72:	c6 01       	movw	r24, r12
 a74:	42 d1       	rcall	.+644    	; 0xcfa <strnlen>
 a76:	8c 01       	movw	r16, r24
 a78:	5f e7       	ldi	r21, 0x7F	; 127
 a7a:	f5 22       	and	r15, r21
 a7c:	13 c0       	rjmp	.+38     	; 0xaa4 <vfprintf+0x186>
 a7e:	f5 01       	movw	r30, r10
 a80:	c0 80       	ld	r12, Z
 a82:	d1 80       	ldd	r13, Z+1	; 0x01
 a84:	f6 fc       	sbrc	r15, 6
 a86:	03 c0       	rjmp	.+6      	; 0xa8e <vfprintf+0x170>
 a88:	6f ef       	ldi	r22, 0xFF	; 255
 a8a:	7f ef       	ldi	r23, 0xFF	; 255
 a8c:	02 c0       	rjmp	.+4      	; 0xa92 <vfprintf+0x174>
 a8e:	69 2d       	mov	r22, r9
 a90:	70 e0       	ldi	r23, 0x00	; 0
 a92:	42 e0       	ldi	r20, 0x02	; 2
 a94:	50 e0       	ldi	r21, 0x00	; 0
 a96:	a4 0e       	add	r10, r20
 a98:	b5 1e       	adc	r11, r21
 a9a:	c6 01       	movw	r24, r12
 a9c:	23 d1       	rcall	.+582    	; 0xce4 <strnlen_P>
 a9e:	8c 01       	movw	r16, r24
 aa0:	50 e8       	ldi	r21, 0x80	; 128
 aa2:	f5 2a       	or	r15, r21
 aa4:	f3 fe       	sbrs	r15, 3
 aa6:	06 c0       	rjmp	.+12     	; 0xab4 <vfprintf+0x196>
 aa8:	18 c0       	rjmp	.+48     	; 0xada <vfprintf+0x1bc>
 aaa:	80 e2       	ldi	r24, 0x20	; 32
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	b3 01       	movw	r22, r6
 ab0:	2f d1       	rcall	.+606    	; 0xd10 <fputc>
 ab2:	ea 94       	dec	r14
 ab4:	8e 2d       	mov	r24, r14
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	08 17       	cp	r16, r24
 aba:	19 07       	cpc	r17, r25
 abc:	b0 f3       	brcs	.-20     	; 0xaaa <vfprintf+0x18c>
 abe:	0d c0       	rjmp	.+26     	; 0xada <vfprintf+0x1bc>
 ac0:	f6 01       	movw	r30, r12
 ac2:	f7 fc       	sbrc	r15, 7
 ac4:	85 91       	lpm	r24, Z+
 ac6:	f7 fe       	sbrs	r15, 7
 ac8:	81 91       	ld	r24, Z+
 aca:	6f 01       	movw	r12, r30
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	b3 01       	movw	r22, r6
 ad0:	1f d1       	rcall	.+574    	; 0xd10 <fputc>
 ad2:	e1 10       	cpse	r14, r1
 ad4:	ea 94       	dec	r14
 ad6:	01 50       	subi	r16, 0x01	; 1
 ad8:	10 40       	sbci	r17, 0x00	; 0
 ada:	01 15       	cp	r16, r1
 adc:	11 05       	cpc	r17, r1
 ade:	81 f7       	brne	.-32     	; 0xac0 <vfprintf+0x1a2>
 ae0:	e2 c0       	rjmp	.+452    	; 0xca6 <vfprintf+0x388>
 ae2:	94 36       	cpi	r25, 0x64	; 100
 ae4:	11 f0       	breq	.+4      	; 0xaea <vfprintf+0x1cc>
 ae6:	99 36       	cpi	r25, 0x69	; 105
 ae8:	61 f5       	brne	.+88     	; 0xb42 <vfprintf+0x224>
 aea:	f7 fe       	sbrs	r15, 7
 aec:	08 c0       	rjmp	.+16     	; 0xafe <vfprintf+0x1e0>
 aee:	f5 01       	movw	r30, r10
 af0:	20 81       	ld	r18, Z
 af2:	31 81       	ldd	r19, Z+1	; 0x01
 af4:	42 81       	ldd	r20, Z+2	; 0x02
 af6:	53 81       	ldd	r21, Z+3	; 0x03
 af8:	84 e0       	ldi	r24, 0x04	; 4
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0a c0       	rjmp	.+20     	; 0xb12 <vfprintf+0x1f4>
 afe:	f5 01       	movw	r30, r10
 b00:	80 81       	ld	r24, Z
 b02:	91 81       	ldd	r25, Z+1	; 0x01
 b04:	9c 01       	movw	r18, r24
 b06:	44 27       	eor	r20, r20
 b08:	37 fd       	sbrc	r19, 7
 b0a:	40 95       	com	r20
 b0c:	54 2f       	mov	r21, r20
 b0e:	82 e0       	ldi	r24, 0x02	; 2
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	a8 0e       	add	r10, r24
 b14:	b9 1e       	adc	r11, r25
 b16:	9f e6       	ldi	r25, 0x6F	; 111
 b18:	f9 22       	and	r15, r25
 b1a:	57 ff       	sbrs	r21, 7
 b1c:	09 c0       	rjmp	.+18     	; 0xb30 <vfprintf+0x212>
 b1e:	50 95       	com	r21
 b20:	40 95       	com	r20
 b22:	30 95       	com	r19
 b24:	21 95       	neg	r18
 b26:	3f 4f       	sbci	r19, 0xFF	; 255
 b28:	4f 4f       	sbci	r20, 0xFF	; 255
 b2a:	5f 4f       	sbci	r21, 0xFF	; 255
 b2c:	e0 e8       	ldi	r30, 0x80	; 128
 b2e:	fe 2a       	or	r15, r30
 b30:	ca 01       	movw	r24, r20
 b32:	b9 01       	movw	r22, r18
 b34:	a1 01       	movw	r20, r2
 b36:	2a e0       	ldi	r18, 0x0A	; 10
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	16 d1       	rcall	.+556    	; 0xd68 <__ultoa_invert>
 b3c:	d8 2e       	mov	r13, r24
 b3e:	d2 18       	sub	r13, r2
 b40:	3f c0       	rjmp	.+126    	; 0xbc0 <vfprintf+0x2a2>
 b42:	95 37       	cpi	r25, 0x75	; 117
 b44:	29 f4       	brne	.+10     	; 0xb50 <vfprintf+0x232>
 b46:	1f 2d       	mov	r17, r15
 b48:	1f 7e       	andi	r17, 0xEF	; 239
 b4a:	2a e0       	ldi	r18, 0x0A	; 10
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	1d c0       	rjmp	.+58     	; 0xb8a <vfprintf+0x26c>
 b50:	1f 2d       	mov	r17, r15
 b52:	19 7f       	andi	r17, 0xF9	; 249
 b54:	9f 36       	cpi	r25, 0x6F	; 111
 b56:	61 f0       	breq	.+24     	; 0xb70 <vfprintf+0x252>
 b58:	90 37       	cpi	r25, 0x70	; 112
 b5a:	20 f4       	brcc	.+8      	; 0xb64 <vfprintf+0x246>
 b5c:	98 35       	cpi	r25, 0x58	; 88
 b5e:	09 f0       	breq	.+2      	; 0xb62 <vfprintf+0x244>
 b60:	a5 c0       	rjmp	.+330    	; 0xcac <vfprintf+0x38e>
 b62:	0f c0       	rjmp	.+30     	; 0xb82 <vfprintf+0x264>
 b64:	90 37       	cpi	r25, 0x70	; 112
 b66:	39 f0       	breq	.+14     	; 0xb76 <vfprintf+0x258>
 b68:	98 37       	cpi	r25, 0x78	; 120
 b6a:	09 f0       	breq	.+2      	; 0xb6e <vfprintf+0x250>
 b6c:	9f c0       	rjmp	.+318    	; 0xcac <vfprintf+0x38e>
 b6e:	04 c0       	rjmp	.+8      	; 0xb78 <vfprintf+0x25a>
 b70:	28 e0       	ldi	r18, 0x08	; 8
 b72:	30 e0       	ldi	r19, 0x00	; 0
 b74:	0a c0       	rjmp	.+20     	; 0xb8a <vfprintf+0x26c>
 b76:	10 61       	ori	r17, 0x10	; 16
 b78:	14 fd       	sbrc	r17, 4
 b7a:	14 60       	ori	r17, 0x04	; 4
 b7c:	20 e1       	ldi	r18, 0x10	; 16
 b7e:	30 e0       	ldi	r19, 0x00	; 0
 b80:	04 c0       	rjmp	.+8      	; 0xb8a <vfprintf+0x26c>
 b82:	14 fd       	sbrc	r17, 4
 b84:	16 60       	ori	r17, 0x06	; 6
 b86:	20 e1       	ldi	r18, 0x10	; 16
 b88:	32 e0       	ldi	r19, 0x02	; 2
 b8a:	17 ff       	sbrs	r17, 7
 b8c:	08 c0       	rjmp	.+16     	; 0xb9e <vfprintf+0x280>
 b8e:	f5 01       	movw	r30, r10
 b90:	60 81       	ld	r22, Z
 b92:	71 81       	ldd	r23, Z+1	; 0x01
 b94:	82 81       	ldd	r24, Z+2	; 0x02
 b96:	93 81       	ldd	r25, Z+3	; 0x03
 b98:	44 e0       	ldi	r20, 0x04	; 4
 b9a:	50 e0       	ldi	r21, 0x00	; 0
 b9c:	08 c0       	rjmp	.+16     	; 0xbae <vfprintf+0x290>
 b9e:	f5 01       	movw	r30, r10
 ba0:	80 81       	ld	r24, Z
 ba2:	91 81       	ldd	r25, Z+1	; 0x01
 ba4:	bc 01       	movw	r22, r24
 ba6:	80 e0       	ldi	r24, 0x00	; 0
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	42 e0       	ldi	r20, 0x02	; 2
 bac:	50 e0       	ldi	r21, 0x00	; 0
 bae:	a4 0e       	add	r10, r20
 bb0:	b5 1e       	adc	r11, r21
 bb2:	a1 01       	movw	r20, r2
 bb4:	d9 d0       	rcall	.+434    	; 0xd68 <__ultoa_invert>
 bb6:	d8 2e       	mov	r13, r24
 bb8:	d2 18       	sub	r13, r2
 bba:	8f e7       	ldi	r24, 0x7F	; 127
 bbc:	f8 2e       	mov	r15, r24
 bbe:	f1 22       	and	r15, r17
 bc0:	f6 fe       	sbrs	r15, 6
 bc2:	0b c0       	rjmp	.+22     	; 0xbda <vfprintf+0x2bc>
 bc4:	5e ef       	ldi	r21, 0xFE	; 254
 bc6:	f5 22       	and	r15, r21
 bc8:	d9 14       	cp	r13, r9
 bca:	38 f4       	brcc	.+14     	; 0xbda <vfprintf+0x2bc>
 bcc:	f4 fe       	sbrs	r15, 4
 bce:	07 c0       	rjmp	.+14     	; 0xbde <vfprintf+0x2c0>
 bd0:	f2 fc       	sbrc	r15, 2
 bd2:	05 c0       	rjmp	.+10     	; 0xbde <vfprintf+0x2c0>
 bd4:	8f ee       	ldi	r24, 0xEF	; 239
 bd6:	f8 22       	and	r15, r24
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <vfprintf+0x2c0>
 bda:	1d 2d       	mov	r17, r13
 bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <vfprintf+0x2c2>
 bde:	19 2d       	mov	r17, r9
 be0:	f4 fe       	sbrs	r15, 4
 be2:	0d c0       	rjmp	.+26     	; 0xbfe <vfprintf+0x2e0>
 be4:	fe 01       	movw	r30, r28
 be6:	ed 0d       	add	r30, r13
 be8:	f1 1d       	adc	r31, r1
 bea:	80 81       	ld	r24, Z
 bec:	80 33       	cpi	r24, 0x30	; 48
 bee:	19 f4       	brne	.+6      	; 0xbf6 <vfprintf+0x2d8>
 bf0:	99 ee       	ldi	r25, 0xE9	; 233
 bf2:	f9 22       	and	r15, r25
 bf4:	08 c0       	rjmp	.+16     	; 0xc06 <vfprintf+0x2e8>
 bf6:	1f 5f       	subi	r17, 0xFF	; 255
 bf8:	f2 fe       	sbrs	r15, 2
 bfa:	05 c0       	rjmp	.+10     	; 0xc06 <vfprintf+0x2e8>
 bfc:	03 c0       	rjmp	.+6      	; 0xc04 <vfprintf+0x2e6>
 bfe:	8f 2d       	mov	r24, r15
 c00:	86 78       	andi	r24, 0x86	; 134
 c02:	09 f0       	breq	.+2      	; 0xc06 <vfprintf+0x2e8>
 c04:	1f 5f       	subi	r17, 0xFF	; 255
 c06:	0f 2d       	mov	r16, r15
 c08:	f3 fc       	sbrc	r15, 3
 c0a:	13 c0       	rjmp	.+38     	; 0xc32 <vfprintf+0x314>
 c0c:	f0 fe       	sbrs	r15, 0
 c0e:	0e c0       	rjmp	.+28     	; 0xc2c <vfprintf+0x30e>
 c10:	1e 15       	cp	r17, r14
 c12:	10 f0       	brcs	.+4      	; 0xc18 <vfprintf+0x2fa>
 c14:	9d 2c       	mov	r9, r13
 c16:	0a c0       	rjmp	.+20     	; 0xc2c <vfprintf+0x30e>
 c18:	9d 2c       	mov	r9, r13
 c1a:	9e 0c       	add	r9, r14
 c1c:	91 1a       	sub	r9, r17
 c1e:	1e 2d       	mov	r17, r14
 c20:	05 c0       	rjmp	.+10     	; 0xc2c <vfprintf+0x30e>
 c22:	80 e2       	ldi	r24, 0x20	; 32
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	b3 01       	movw	r22, r6
 c28:	73 d0       	rcall	.+230    	; 0xd10 <fputc>
 c2a:	1f 5f       	subi	r17, 0xFF	; 255
 c2c:	1e 15       	cp	r17, r14
 c2e:	c8 f3       	brcs	.-14     	; 0xc22 <vfprintf+0x304>
 c30:	04 c0       	rjmp	.+8      	; 0xc3a <vfprintf+0x31c>
 c32:	1e 15       	cp	r17, r14
 c34:	10 f4       	brcc	.+4      	; 0xc3a <vfprintf+0x31c>
 c36:	e1 1a       	sub	r14, r17
 c38:	01 c0       	rjmp	.+2      	; 0xc3c <vfprintf+0x31e>
 c3a:	ee 24       	eor	r14, r14
 c3c:	04 ff       	sbrs	r16, 4
 c3e:	0e c0       	rjmp	.+28     	; 0xc5c <vfprintf+0x33e>
 c40:	80 e3       	ldi	r24, 0x30	; 48
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	b3 01       	movw	r22, r6
 c46:	64 d0       	rcall	.+200    	; 0xd10 <fputc>
 c48:	02 ff       	sbrs	r16, 2
 c4a:	1b c0       	rjmp	.+54     	; 0xc82 <vfprintf+0x364>
 c4c:	01 fd       	sbrc	r16, 1
 c4e:	03 c0       	rjmp	.+6      	; 0xc56 <vfprintf+0x338>
 c50:	88 e7       	ldi	r24, 0x78	; 120
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	0e c0       	rjmp	.+28     	; 0xc72 <vfprintf+0x354>
 c56:	88 e5       	ldi	r24, 0x58	; 88
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	0b c0       	rjmp	.+22     	; 0xc72 <vfprintf+0x354>
 c5c:	80 2f       	mov	r24, r16
 c5e:	86 78       	andi	r24, 0x86	; 134
 c60:	81 f0       	breq	.+32     	; 0xc82 <vfprintf+0x364>
 c62:	01 ff       	sbrs	r16, 1
 c64:	02 c0       	rjmp	.+4      	; 0xc6a <vfprintf+0x34c>
 c66:	8b e2       	ldi	r24, 0x2B	; 43
 c68:	01 c0       	rjmp	.+2      	; 0xc6c <vfprintf+0x34e>
 c6a:	80 e2       	ldi	r24, 0x20	; 32
 c6c:	f7 fc       	sbrc	r15, 7
 c6e:	8d e2       	ldi	r24, 0x2D	; 45
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	b3 01       	movw	r22, r6
 c74:	4d d0       	rcall	.+154    	; 0xd10 <fputc>
 c76:	05 c0       	rjmp	.+10     	; 0xc82 <vfprintf+0x364>
 c78:	80 e3       	ldi	r24, 0x30	; 48
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	b3 01       	movw	r22, r6
 c7e:	48 d0       	rcall	.+144    	; 0xd10 <fputc>
 c80:	9a 94       	dec	r9
 c82:	d9 14       	cp	r13, r9
 c84:	c8 f3       	brcs	.-14     	; 0xc78 <vfprintf+0x35a>
 c86:	da 94       	dec	r13
 c88:	f1 01       	movw	r30, r2
 c8a:	ed 0d       	add	r30, r13
 c8c:	f1 1d       	adc	r31, r1
 c8e:	80 81       	ld	r24, Z
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	b3 01       	movw	r22, r6
 c94:	3d d0       	rcall	.+122    	; 0xd10 <fputc>
 c96:	dd 20       	and	r13, r13
 c98:	b1 f7       	brne	.-20     	; 0xc86 <vfprintf+0x368>
 c9a:	05 c0       	rjmp	.+10     	; 0xca6 <vfprintf+0x388>
 c9c:	80 e2       	ldi	r24, 0x20	; 32
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	b3 01       	movw	r22, r6
 ca2:	36 d0       	rcall	.+108    	; 0xd10 <fputc>
 ca4:	ea 94       	dec	r14
 ca6:	ee 20       	and	r14, r14
 ca8:	c9 f7       	brne	.-14     	; 0xc9c <vfprintf+0x37e>
 caa:	50 ce       	rjmp	.-864    	; 0x94c <vfprintf+0x2e>
 cac:	f3 01       	movw	r30, r6
 cae:	66 81       	ldd	r22, Z+6	; 0x06
 cb0:	77 81       	ldd	r23, Z+7	; 0x07
 cb2:	cb 01       	movw	r24, r22
 cb4:	2b 96       	adiw	r28, 0x0b	; 11
 cb6:	e2 e1       	ldi	r30, 0x12	; 18
 cb8:	d1 c0       	rjmp	.+418    	; 0xe5c <__epilogue_restores__>

00000cba <__eerd_byte_m8>:
 cba:	e1 99       	sbic	0x1c, 1	; 28
 cbc:	fe cf       	rjmp	.-4      	; 0xcba <__eerd_byte_m8>
 cbe:	9f bb       	out	0x1f, r25	; 31
 cc0:	8e bb       	out	0x1e, r24	; 30
 cc2:	e0 9a       	sbi	0x1c, 0	; 28
 cc4:	99 27       	eor	r25, r25
 cc6:	8d b3       	in	r24, 0x1d	; 29
 cc8:	08 95       	ret

00000cca <__eewr_byte_m8>:
 cca:	26 2f       	mov	r18, r22

00000ccc <__eewr_r18_m8>:
 ccc:	e1 99       	sbic	0x1c, 1	; 28
 cce:	fe cf       	rjmp	.-4      	; 0xccc <__eewr_r18_m8>
 cd0:	9f bb       	out	0x1f, r25	; 31
 cd2:	8e bb       	out	0x1e, r24	; 30
 cd4:	2d bb       	out	0x1d, r18	; 29
 cd6:	0f b6       	in	r0, 0x3f	; 63
 cd8:	f8 94       	cli
 cda:	e2 9a       	sbi	0x1c, 2	; 28
 cdc:	e1 9a       	sbi	0x1c, 1	; 28
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	01 96       	adiw	r24, 0x01	; 1
 ce2:	08 95       	ret

00000ce4 <strnlen_P>:
 ce4:	fc 01       	movw	r30, r24
 ce6:	05 90       	lpm	r0, Z+
 ce8:	61 50       	subi	r22, 0x01	; 1
 cea:	70 40       	sbci	r23, 0x00	; 0
 cec:	01 10       	cpse	r0, r1
 cee:	d8 f7       	brcc	.-10     	; 0xce6 <strnlen_P+0x2>
 cf0:	80 95       	com	r24
 cf2:	90 95       	com	r25
 cf4:	8e 0f       	add	r24, r30
 cf6:	9f 1f       	adc	r25, r31
 cf8:	08 95       	ret

00000cfa <strnlen>:
 cfa:	fc 01       	movw	r30, r24
 cfc:	61 50       	subi	r22, 0x01	; 1
 cfe:	70 40       	sbci	r23, 0x00	; 0
 d00:	01 90       	ld	r0, Z+
 d02:	01 10       	cpse	r0, r1
 d04:	d8 f7       	brcc	.-10     	; 0xcfc <strnlen+0x2>
 d06:	80 95       	com	r24
 d08:	90 95       	com	r25
 d0a:	8e 0f       	add	r24, r30
 d0c:	9f 1f       	adc	r25, r31
 d0e:	08 95       	ret

00000d10 <fputc>:
 d10:	0f 93       	push	r16
 d12:	1f 93       	push	r17
 d14:	cf 93       	push	r28
 d16:	df 93       	push	r29
 d18:	8c 01       	movw	r16, r24
 d1a:	eb 01       	movw	r28, r22
 d1c:	8b 81       	ldd	r24, Y+3	; 0x03
 d1e:	81 ff       	sbrs	r24, 1
 d20:	1b c0       	rjmp	.+54     	; 0xd58 <fputc+0x48>
 d22:	82 ff       	sbrs	r24, 2
 d24:	0d c0       	rjmp	.+26     	; 0xd40 <fputc+0x30>
 d26:	2e 81       	ldd	r18, Y+6	; 0x06
 d28:	3f 81       	ldd	r19, Y+7	; 0x07
 d2a:	8c 81       	ldd	r24, Y+4	; 0x04
 d2c:	9d 81       	ldd	r25, Y+5	; 0x05
 d2e:	28 17       	cp	r18, r24
 d30:	39 07       	cpc	r19, r25
 d32:	64 f4       	brge	.+24     	; 0xd4c <fputc+0x3c>
 d34:	e8 81       	ld	r30, Y
 d36:	f9 81       	ldd	r31, Y+1	; 0x01
 d38:	01 93       	st	Z+, r16
 d3a:	f9 83       	std	Y+1, r31	; 0x01
 d3c:	e8 83       	st	Y, r30
 d3e:	06 c0       	rjmp	.+12     	; 0xd4c <fputc+0x3c>
 d40:	e8 85       	ldd	r30, Y+8	; 0x08
 d42:	f9 85       	ldd	r31, Y+9	; 0x09
 d44:	80 2f       	mov	r24, r16
 d46:	09 95       	icall
 d48:	89 2b       	or	r24, r25
 d4a:	31 f4       	brne	.+12     	; 0xd58 <fputc+0x48>
 d4c:	8e 81       	ldd	r24, Y+6	; 0x06
 d4e:	9f 81       	ldd	r25, Y+7	; 0x07
 d50:	01 96       	adiw	r24, 0x01	; 1
 d52:	9f 83       	std	Y+7, r25	; 0x07
 d54:	8e 83       	std	Y+6, r24	; 0x06
 d56:	02 c0       	rjmp	.+4      	; 0xd5c <fputc+0x4c>
 d58:	0f ef       	ldi	r16, 0xFF	; 255
 d5a:	1f ef       	ldi	r17, 0xFF	; 255
 d5c:	c8 01       	movw	r24, r16
 d5e:	df 91       	pop	r29
 d60:	cf 91       	pop	r28
 d62:	1f 91       	pop	r17
 d64:	0f 91       	pop	r16
 d66:	08 95       	ret

00000d68 <__ultoa_invert>:
 d68:	fa 01       	movw	r30, r20
 d6a:	aa 27       	eor	r26, r26
 d6c:	28 30       	cpi	r18, 0x08	; 8
 d6e:	51 f1       	breq	.+84     	; 0xdc4 <__ultoa_invert+0x5c>
 d70:	20 31       	cpi	r18, 0x10	; 16
 d72:	81 f1       	breq	.+96     	; 0xdd4 <__ultoa_invert+0x6c>
 d74:	e8 94       	clt
 d76:	6f 93       	push	r22
 d78:	6e 7f       	andi	r22, 0xFE	; 254
 d7a:	6e 5f       	subi	r22, 0xFE	; 254
 d7c:	7f 4f       	sbci	r23, 0xFF	; 255
 d7e:	8f 4f       	sbci	r24, 0xFF	; 255
 d80:	9f 4f       	sbci	r25, 0xFF	; 255
 d82:	af 4f       	sbci	r26, 0xFF	; 255
 d84:	b1 e0       	ldi	r27, 0x01	; 1
 d86:	3e d0       	rcall	.+124    	; 0xe04 <__ultoa_invert+0x9c>
 d88:	b4 e0       	ldi	r27, 0x04	; 4
 d8a:	3c d0       	rcall	.+120    	; 0xe04 <__ultoa_invert+0x9c>
 d8c:	67 0f       	add	r22, r23
 d8e:	78 1f       	adc	r23, r24
 d90:	89 1f       	adc	r24, r25
 d92:	9a 1f       	adc	r25, r26
 d94:	a1 1d       	adc	r26, r1
 d96:	68 0f       	add	r22, r24
 d98:	79 1f       	adc	r23, r25
 d9a:	8a 1f       	adc	r24, r26
 d9c:	91 1d       	adc	r25, r1
 d9e:	a1 1d       	adc	r26, r1
 da0:	6a 0f       	add	r22, r26
 da2:	71 1d       	adc	r23, r1
 da4:	81 1d       	adc	r24, r1
 da6:	91 1d       	adc	r25, r1
 da8:	a1 1d       	adc	r26, r1
 daa:	20 d0       	rcall	.+64     	; 0xdec <__ultoa_invert+0x84>
 dac:	09 f4       	brne	.+2      	; 0xdb0 <__ultoa_invert+0x48>
 dae:	68 94       	set
 db0:	3f 91       	pop	r19
 db2:	2a e0       	ldi	r18, 0x0A	; 10
 db4:	26 9f       	mul	r18, r22
 db6:	11 24       	eor	r1, r1
 db8:	30 19       	sub	r19, r0
 dba:	30 5d       	subi	r19, 0xD0	; 208
 dbc:	31 93       	st	Z+, r19
 dbe:	de f6       	brtc	.-74     	; 0xd76 <__ultoa_invert+0xe>
 dc0:	cf 01       	movw	r24, r30
 dc2:	08 95       	ret
 dc4:	46 2f       	mov	r20, r22
 dc6:	47 70       	andi	r20, 0x07	; 7
 dc8:	40 5d       	subi	r20, 0xD0	; 208
 dca:	41 93       	st	Z+, r20
 dcc:	b3 e0       	ldi	r27, 0x03	; 3
 dce:	0f d0       	rcall	.+30     	; 0xdee <__ultoa_invert+0x86>
 dd0:	c9 f7       	brne	.-14     	; 0xdc4 <__ultoa_invert+0x5c>
 dd2:	f6 cf       	rjmp	.-20     	; 0xdc0 <__ultoa_invert+0x58>
 dd4:	46 2f       	mov	r20, r22
 dd6:	4f 70       	andi	r20, 0x0F	; 15
 dd8:	40 5d       	subi	r20, 0xD0	; 208
 dda:	4a 33       	cpi	r20, 0x3A	; 58
 ddc:	18 f0       	brcs	.+6      	; 0xde4 <__ultoa_invert+0x7c>
 dde:	49 5d       	subi	r20, 0xD9	; 217
 de0:	31 fd       	sbrc	r19, 1
 de2:	40 52       	subi	r20, 0x20	; 32
 de4:	41 93       	st	Z+, r20
 de6:	02 d0       	rcall	.+4      	; 0xdec <__ultoa_invert+0x84>
 de8:	a9 f7       	brne	.-22     	; 0xdd4 <__ultoa_invert+0x6c>
 dea:	ea cf       	rjmp	.-44     	; 0xdc0 <__ultoa_invert+0x58>
 dec:	b4 e0       	ldi	r27, 0x04	; 4
 dee:	a6 95       	lsr	r26
 df0:	97 95       	ror	r25
 df2:	87 95       	ror	r24
 df4:	77 95       	ror	r23
 df6:	67 95       	ror	r22
 df8:	ba 95       	dec	r27
 dfa:	c9 f7       	brne	.-14     	; 0xdee <__ultoa_invert+0x86>
 dfc:	00 97       	sbiw	r24, 0x00	; 0
 dfe:	61 05       	cpc	r22, r1
 e00:	71 05       	cpc	r23, r1
 e02:	08 95       	ret
 e04:	9b 01       	movw	r18, r22
 e06:	ac 01       	movw	r20, r24
 e08:	0a 2e       	mov	r0, r26
 e0a:	06 94       	lsr	r0
 e0c:	57 95       	ror	r21
 e0e:	47 95       	ror	r20
 e10:	37 95       	ror	r19
 e12:	27 95       	ror	r18
 e14:	ba 95       	dec	r27
 e16:	c9 f7       	brne	.-14     	; 0xe0a <__ultoa_invert+0xa2>
 e18:	62 0f       	add	r22, r18
 e1a:	73 1f       	adc	r23, r19
 e1c:	84 1f       	adc	r24, r20
 e1e:	95 1f       	adc	r25, r21
 e20:	a0 1d       	adc	r26, r0
 e22:	08 95       	ret

00000e24 <__prologue_saves__>:
 e24:	2f 92       	push	r2
 e26:	3f 92       	push	r3
 e28:	4f 92       	push	r4
 e2a:	5f 92       	push	r5
 e2c:	6f 92       	push	r6
 e2e:	7f 92       	push	r7
 e30:	8f 92       	push	r8
 e32:	9f 92       	push	r9
 e34:	af 92       	push	r10
 e36:	bf 92       	push	r11
 e38:	cf 92       	push	r12
 e3a:	df 92       	push	r13
 e3c:	ef 92       	push	r14
 e3e:	ff 92       	push	r15
 e40:	0f 93       	push	r16
 e42:	1f 93       	push	r17
 e44:	cf 93       	push	r28
 e46:	df 93       	push	r29
 e48:	cd b7       	in	r28, 0x3d	; 61
 e4a:	de b7       	in	r29, 0x3e	; 62
 e4c:	ca 1b       	sub	r28, r26
 e4e:	db 0b       	sbc	r29, r27
 e50:	0f b6       	in	r0, 0x3f	; 63
 e52:	f8 94       	cli
 e54:	de bf       	out	0x3e, r29	; 62
 e56:	0f be       	out	0x3f, r0	; 63
 e58:	cd bf       	out	0x3d, r28	; 61
 e5a:	09 94       	ijmp

00000e5c <__epilogue_restores__>:
 e5c:	2a 88       	ldd	r2, Y+18	; 0x12
 e5e:	39 88       	ldd	r3, Y+17	; 0x11
 e60:	48 88       	ldd	r4, Y+16	; 0x10
 e62:	5f 84       	ldd	r5, Y+15	; 0x0f
 e64:	6e 84       	ldd	r6, Y+14	; 0x0e
 e66:	7d 84       	ldd	r7, Y+13	; 0x0d
 e68:	8c 84       	ldd	r8, Y+12	; 0x0c
 e6a:	9b 84       	ldd	r9, Y+11	; 0x0b
 e6c:	aa 84       	ldd	r10, Y+10	; 0x0a
 e6e:	b9 84       	ldd	r11, Y+9	; 0x09
 e70:	c8 84       	ldd	r12, Y+8	; 0x08
 e72:	df 80       	ldd	r13, Y+7	; 0x07
 e74:	ee 80       	ldd	r14, Y+6	; 0x06
 e76:	fd 80       	ldd	r15, Y+5	; 0x05
 e78:	0c 81       	ldd	r16, Y+4	; 0x04
 e7a:	1b 81       	ldd	r17, Y+3	; 0x03
 e7c:	aa 81       	ldd	r26, Y+2	; 0x02
 e7e:	b9 81       	ldd	r27, Y+1	; 0x01
 e80:	ce 0f       	add	r28, r30
 e82:	d1 1d       	adc	r29, r1
 e84:	0f b6       	in	r0, 0x3f	; 63
 e86:	f8 94       	cli
 e88:	de bf       	out	0x3e, r29	; 62
 e8a:	0f be       	out	0x3f, r0	; 63
 e8c:	cd bf       	out	0x3d, r28	; 61
 e8e:	ed 01       	movw	r28, r26
 e90:	08 95       	ret

00000e92 <_exit>:
 e92:	f8 94       	cli

00000e94 <__stop_program>:
 e94:	ff cf       	rjmp	.-2      	; 0xe94 <__stop_program>
